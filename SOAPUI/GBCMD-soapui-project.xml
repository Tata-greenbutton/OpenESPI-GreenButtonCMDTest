<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project activeEnvironment="Default" name="GBCMD" resourceRoot="${projectDir}" soapui-version="4.6.4" abortOnError="false" runType="SEQUENTIAL" defaultScriptLanguage="Groovy" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="ESPI Resources" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:resource name="resource" path="/espi/1_1/resource"><con:settings/><con:parameters/><con:resource name="RetailCustomer/{retailCustomerId}" path="RetailCustomer/${#Project#retailCustomerId}"><con:settings/><con:resource name="RetailCustomer/{retailCustomerId}/UsagePoint" path="UsagePoint"><con:settings/><con:resource name="RetailCustomer/{retailCustomerId}/UsagePoint/{usagePointId}" path="${#Project#usagePointId}"><con:settings/><con:resource name="RetailCustomer/{retailCustomerId}/UsagePoint/{usagePointId}/MeterReading" path="MeterReading"><con:settings/><con:parameters/><con:resource name="RetailCustomer/{retailCustomerId}/UsagePoint/{usagePointId}/MeterReading/{meterReadingId}" path="${#Project#meterReadingId}"><con:settings/><con:resource name="ReadingType" path="ReadingType"><con:settings/><con:parameters/><con:resource name="${#Project#readingTypeId}" path="${#Project#readingTypeId}"><con:settings/><con:method name="Get ReadingType" method="GET"><con:settings/><con:parameters/><con:request name="Get ReadingType" mediaType="application/json"><con:endpoint>${#Project#ServiceEndpoint}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>#Project#retailCustomerId</con:entry><con:entry>#Project#usagePointId</con:entry><con:entry>#Project#meterReadingId</con:entry><con:entry>#Project#readingTypeId</con:entry></con:parameterOrder><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials></con:request><con:representation type="RESPONSE"><con:mediaType>application/atom+xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element></con:representation></con:method><con:parameters><con:parameter><con:name>#Project#readingTypeId</con:name><con:value>#Project#readingTypeId</con:value><con:style>TEMPLATE</con:style><con:default>#Project#readingTypeId</con:default></con:parameter></con:parameters><con:method name="Delete" method="DELETE"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndpoint}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="Put" method="PUT"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/><con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/atom+xml" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndpoint}</con:endpoint><con:request><![CDATA[<ns3:entry xmlns:espi="http://naesb.org/espi" xmlns:ns3="http://www.w3.org/2005/Atom">
   <ns3:id>urn:uuid:3430B025-65D5-493A-BEC2-053603C91CD7</ns3:id>
   <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/ReadingType/1" rel="self"/>
   <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/ReadingType" rel="up"/>
   <ns3:title>Type of Meter Reading Data</ns3:title>
   <ns3:content>
      <espi:ReadingType>
         <espi:accumulationBehaviour>4</espi:accumulationBehaviour>
         <espi:commodity>1</espi:commodity>
         <espi:currency>840</espi:currency>
         <espi:dataQualifier>12</espi:dataQualifier>
         <espi:flowDirection>1</espi:flowDirection>
         <espi:intervalLength>900</espi:intervalLength>
         <espi:kind>12</espi:kind>
         <espi:phase>769</espi:phase>
         <espi:powerOfTenMultiplier>0</espi:powerOfTenMultiplier>
         <espi:timeAttribute>0</espi:timeAttribute>
         <espi:uom>72</espi:uom>
         <espi:interharmonic>
            <espi:numerator>600</espi:numerator>
            <espi:denominator>800</espi:denominator>
         </espi:interharmonic>
         <espi:argument>
            <espi:numerator>1</espi:numerator>
            <espi:denominator>2</espi:denominator>
         </espi:argument>
      </espi:ReadingType>
   </ns3:content>
   <ns3:published>2012-10-24T00:00:00Z</ns3:published>
   <ns3:updated>2012-10-24T00:00:00Z</ns3:updated>
</ns3:entry>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:method name="Get ReadingType feed" method="GET"><con:settings/><con:parameters/><con:request name="Get ReadingType feed" mediaType="application/json"><con:endpoint>${#Project#ServiceEndpoint}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>#Project#retailCustomerId</con:entry><con:entry>#Project#usagePointId</con:entry><con:entry>#Project#meterReadingId</con:entry></con:parameterOrder><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials></con:request><con:representation type="RESPONSE"><con:mediaType>application/atom+xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element></con:representation></con:method><con:method name="Post" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/><con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/atom+xml</con:mediaType><con:status>400</con:status><con:params/></con:representation><con:request name="Request 1" mediaType="application/atom+xml" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndpoint}</con:endpoint><con:request><![CDATA[<ns3:entry xmlns:espi="http://naesb.org/espi" xmlns:ns3="http://www.w3.org/2005/Atom">
   <ns3:id>urn:uuid:3430B025-65D5-493A-BEC2-053603C91CD7</ns3:id>
   <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/ReadingType/1" rel="self"/>
   <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/ReadingType" rel="up"/>
   <ns3:title>Type of Meter Reading Data</ns3:title>
   <ns3:content>
      <espi:ReadingType>
         <espi:accumulationBehaviour>4</espi:accumulationBehaviour>
         <espi:commodity>1</espi:commodity>
         <espi:currency>840</espi:currency>
         <espi:dataQualifier>12</espi:dataQualifier>
         <espi:flowDirection>1</espi:flowDirection>
         <espi:intervalLength>900</espi:intervalLength>
         <espi:kind>12</espi:kind>
         <espi:phase>769</espi:phase>
         <espi:powerOfTenMultiplier>0</espi:powerOfTenMultiplier>
         <espi:timeAttribute>0</espi:timeAttribute>
         <espi:uom>72</espi:uom>
         <espi:interharmonic>
            <espi:numerator>600</espi:numerator>
            <espi:denominator>800</espi:denominator>
         </espi:interharmonic>
         <espi:argument>
            <espi:numerator>1</espi:numerator>
            <espi:denominator>2</espi:denominator>
         </espi:argument>
      </espi:ReadingType>
   </ns3:content>
   <ns3:published>2012-10-24T00:00:00Z</ns3:published>
   <ns3:updated>2012-10-24T00:00:00Z</ns3:updated>
</ns3:entry>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="IntervalBlock" path="IntervalBlock"><con:settings/><con:parameters/><con:resource name="${#Project#intervalBlockId}" path="${#Project#intervalBlockId}"><con:settings/><con:method name="Get IntervalBlock" method="GET"><con:settings/><con:parameters/><con:request name="Get IntervalBlock" mediaType="application/json"><con:endpoint>${#Project#ServiceEndpoint}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>#Project#retailCustomerId</con:entry><con:entry>#Project#usagePointId</con:entry><con:entry>#Project#meterReadingId</con:entry><con:entry>#Project#intervalBlockId</con:entry></con:parameterOrder><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials></con:request><con:representation type="RESPONSE"><con:mediaType>application/atom+xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element></con:representation></con:method><con:parameters><con:parameter><con:name>#Project#intervalBlockId</con:name><con:value>#Project#intervalBlockId</con:value><con:style>TEMPLATE</con:style><con:default>#Project#intervalBlockId</con:default></con:parameter></con:parameters><con:method name="Delete" method="DELETE"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndpoint}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="Put" method="PUT"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/><con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/atom+xml" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndpoint}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:attachment><con:name>interval_block_1.xml</con:name><con:contentType>application/atom+xml</con:contentType><con:contentId>interval_block_1.xml</con:contentId><con:url>../data/interval_block_1.xml</con:url><con:id>20e3c2a6-7aa0-4245-876c-44e6e5a230b0</con:id></con:attachment><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:method name="Get IntervalBlock feed" method="GET"><con:settings/><con:parameters/><con:request name="Get IntervalBlock feed" mediaType="application/json"><con:endpoint>${#Project#ServiceEndpoint}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>#Project#retailCustomerId</con:entry><con:entry>#Project#usagePointId</con:entry><con:entry>#Project#meterReadingId</con:entry></con:parameterOrder><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials></con:request><con:representation type="RESPONSE"><con:mediaType>application/atom+xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element></con:representation></con:method><con:method name="Post" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/><con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/atom+xml</con:mediaType><con:status>400</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/html;charset=utf-8</con:mediaType><con:status>415</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/atom+xmp</con:mediaType><con:params/><con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/atom+xml</con:mediaType><con:params/><con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element></con:representation><con:request name="Request 1" mediaType="application/atom+xml" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndpoint}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:attachment><con:name>interval_block_1.xml</con:name><con:contentType>application/atom+xml</con:contentType><con:contentId>interval_block_1.xml</con:contentId><con:url>../data/interval_block_1.xml</con:url><con:id>bc093c16-dcc5-4e04-8421-e78957a97d3d</con:id></con:attachment><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:method name="Get MeterReading" method="GET"><con:settings/><con:parameters/><con:request name="Get MeterReading" mediaType="application/json"><con:endpoint>${#Project#ServiceEndpoint}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>#Project#retailCustomerId</con:entry><con:entry>#Project#usagePointId</con:entry><con:entry>#Project#meterReadingId</con:entry></con:parameterOrder><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials></con:request><con:representation type="RESPONSE"><con:mediaType>application/atom+xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/atom+xml</con:mediaType><con:status>400</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation></con:method><con:parameters><con:parameter><con:name>#Project#meterReadingId</con:name><con:value>#Project#meterReadingId</con:value><con:style>TEMPLATE</con:style><con:default>#Project#meterReadingId</con:default></con:parameter></con:parameters><con:method name="Delete" method="DELETE"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndpoint}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="Put" method="PUT"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/><con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/atom+xml" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndpoint}</con:endpoint><con:request><![CDATA[<ns3:entry xmlns:espi="http://naesb.org/espi" xmlns:ns3="http://www.w3.org/2005/Atom">
   <ns3:id>urn:uuid:F77FBF34-A09E-4EBC-9606-FF1A59A17CAE</ns3:id>
   <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/RetailCustomer/1/UsagePoint/1/MeterReading/1" rel="self"/>
   <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/RetailCustomer/1/UsagePoint/1/MeterReading" rel="up"/>
   <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/RetailCustomer/1/UsagePoint/1/MeterReading/1/IntervalBlock" rel="related"/>
   <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/ReadingType/1" rel="related"/>
   <ns3:title>Fifteen Minute Electricity Consumption</ns3:title>
   <ns3:content>
      <espi:MeterReading/>
   </ns3:content>
   <ns3:published>2012-10-24T00:00:00Z</ns3:published>
   <ns3:updated>2012-10-24T00:00:00Z</ns3:updated>
</ns3:entry>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:method name="Get MeterReading feed" method="GET"><con:settings/><con:parameters/><con:request name="Get MeterReading feed" mediaType="application/json"><con:endpoint>${#Project#ServiceEndpoint}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>#Project#retailCustomerId</con:entry><con:entry>#Project#usagePointId</con:entry></con:parameterOrder><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials></con:request><con:representation type="RESPONSE"><con:mediaType>application/atom+xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element></con:representation></con:method><con:method name="Post" method="POST"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/atom+xml</con:mediaType><con:status>400</con:status><con:params/></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/><con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html;charset=utf-8</con:mediaType><con:status>415</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/atom+xml</con:mediaType><con:params/><con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element></con:representation><con:request name="Request 1" mediaType="application/atom+xml" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndpoint}</con:endpoint><con:request><![CDATA[<ns3:entry xmlns:espi="http://naesb.org/espi" xmlns:ns3="http://www.w3.org/2005/Atom">
   <ns3:id>urn:uuid:F77FBF34-A09E-4EBC-9606-FF1A59A17CAE</ns3:id>
   <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/RetailCustomer/1/UsagePoint/1/MeterReading/1" rel="self"/>
   <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/RetailCustomer/1/UsagePoint/1/MeterReading" rel="up"/>
   <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/RetailCustomer/1/UsagePoint/1/MeterReading/1/IntervalBlock" rel="related"/>
   <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/ReadingType/1" rel="related"/>
   <ns3:title>Fifteen Minute Electricity Consumption</ns3:title>
   <ns3:content>
      <espi:MeterReading/>
   </ns3:content>
   <ns3:published>2012-10-24T00:00:00Z</ns3:published>
   <ns3:updated>2012-10-24T00:00:00Z</ns3:updated>
</ns3:entry>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="ElectricPowerQualitySummary" path="ElectricPowerQualitySummary"><con:settings/><con:parameters/><con:resource name="${#Project#electricPowerQualitySummaryId}" path="${#Project#electricPowerQualitySummaryId}"><con:settings/><con:parameters><con:parameter><con:name>#Project#electricPowerQualitySummaryId</con:name><con:value>#Project#electricPowerQualitySummaryId</con:value><con:style>TEMPLATE</con:style><con:default>#Project#electricPowerQualitySummaryId</con:default></con:parameter></con:parameters><con:method name="Get" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/atom+xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndpoint}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="Delete" method="DELETE"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndpoint}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="Put" method="PUT"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/><con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/atom+xml" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndpoint}</con:endpoint><con:request><![CDATA[<ns3:entry xmlns:espi="http://naesb.org/espi" xmlns:ns3="http://www.w3.org/2005/Atom">
   <ns3:id>urn:uuid:DEB0A337-C1B5-4658-99BA-4688E253A99B</ns3:id>
   <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/RetailCustomer/1/UsagePoint/1/ElectricPowerQualitySummary/1" rel="self"/>
   <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/RetailCustomer/1/UsagePoint/1/ElectricPowerQualitySummary" rel="up"/>
   <ns3:title>Quality Summary</ns3:title>
   <ns3:content>
      <espi:ElectricPowerQualitySummary>
         <espi:flickerPlt>1</espi:flickerPlt>
         <espi:flickerPst>2</espi:flickerPst>
         <espi:harmonicVoltage>3</espi:harmonicVoltage>
         <espi:longInterruptions>4</espi:longInterruptions>
         <espi:mainsVoltage>5</espi:mainsVoltage>
         <espi:measurementProtocol>6</espi:measurementProtocol>
         <espi:powerFrequency>7</espi:powerFrequency>
         <espi:rapidVoltageChanges>8</espi:rapidVoltageChanges>
         <espi:shortInterruptions>9</espi:shortInterruptions>
         <espi:summaryInterval>
            <espi:duration>2119600</espi:duration>
            <espi:start>2330578000</espi:start>
         </espi:summaryInterval>
         <espi:supplyVoltageDips>10</espi:supplyVoltageDips>
         <espi:supplyVoltageImbalance>11</espi:supplyVoltageImbalance>
         <espi:supplyVoltageVariations>12</espi:supplyVoltageVariations>
         <espi:tempOvervoltage>13</espi:tempOvervoltage>
      </espi:ElectricPowerQualitySummary>
   </ns3:content>
   <ns3:published>2012-10-24T00:00:00Z</ns3:published>
   <ns3:updated>2012-10-24T00:00:00Z</ns3:updated>
</ns3:entry>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:method name="Get" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/atom+xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndpoint}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="Post" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/><con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/atom+xml</con:mediaType><con:status>400</con:status><con:params/></con:representation><con:request name="Request 1" mediaType="application/atom+xml" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndpoint}</con:endpoint><con:request><![CDATA[<ns3:entry xmlns:espi="http://naesb.org/espi" xmlns:ns3="http://www.w3.org/2005/Atom">
   <ns3:id>urn:uuid:DEB0A337-C1B5-4658-99BA-4688E253A99B</ns3:id>
   <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/RetailCustomer/1/UsagePoint/1/ElectricPowerQualitySummary/1" rel="self"/>
   <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/RetailCustomer/1/UsagePoint/1/ElectricPowerQualitySummary" rel="up"/>
   <ns3:title>Quality Summary</ns3:title>
   <ns3:content>
      <espi:ElectricPowerQualitySummary>
         <espi:flickerPlt>1</espi:flickerPlt>
         <espi:flickerPst>2</espi:flickerPst>
         <espi:harmonicVoltage>3</espi:harmonicVoltage>
         <espi:longInterruptions>4</espi:longInterruptions>
         <espi:mainsVoltage>5</espi:mainsVoltage>
         <espi:measurementProtocol>6</espi:measurementProtocol>
         <espi:powerFrequency>7</espi:powerFrequency>
         <espi:rapidVoltageChanges>8</espi:rapidVoltageChanges>
         <espi:shortInterruptions>9</espi:shortInterruptions>
         <espi:summaryInterval>
            <espi:duration>2119600</espi:duration>
            <espi:start>2330578000</espi:start>
         </espi:summaryInterval>
         <espi:supplyVoltageDips>10</espi:supplyVoltageDips>
         <espi:supplyVoltageImbalance>11</espi:supplyVoltageImbalance>
         <espi:supplyVoltageVariations>12</espi:supplyVoltageVariations>
         <espi:tempOvervoltage>13</espi:tempOvervoltage>
      </espi:ElectricPowerQualitySummary>
   </ns3:content>
   <ns3:published>2012-10-24T00:00:00Z</ns3:published>
   <ns3:updated>2012-10-24T00:00:00Z</ns3:updated>
</ns3:entry>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="ElectricPowerUsageSummary" path="ElectricPowerUsageSummary"><con:settings/><con:parameters/><con:resource name="${#Project#electricPowerUsageSummaryId}" path="${#Project#electricPowerUsageSummaryId}"><con:settings/><con:parameters><con:parameter><con:name>#Project#electricPowerUsageSummaryId</con:name><con:value>#Project#electricPowerUsageSummaryId</con:value><con:style>TEMPLATE</con:style><con:default>#Project#electricPowerUsageSummaryId</con:default></con:parameter></con:parameters><con:method name="Get" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/atom+xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndpoint}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="Delete" method="DELETE"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndpoint}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="Put" method="PUT"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/><con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element></con:representation><con:request name="Request 1" mediaType="application/atom+xml" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndpoint}</con:endpoint><con:request><![CDATA[<ns3:entry xmlns:espi="http://naesb.org/espi" xmlns:ns3="http://www.w3.org/2005/Atom">
   <ns3:id>urn:uuid:621D4BDF-FE3D-418B-8C98-276D941D3D45</ns3:id>
   <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/RetailCustomer/1/UsagePoint/1/ElectricPowerUsageSummary/1" rel="self"/>
   <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/RetailCustomer/1/UsagePoint/1/ElectricPowerUsageSummary" rel="up"/>
   <ns3:title>Usage Summary</ns3:title>
   <ns3:content>
      <espi:ElectricPowerUsageSummary>
         <espi:billingPeriod>
            <espi:duration>1119600</espi:duration>
            <espi:start>1330578000</espi:start>
         </espi:billingPeriod>
         <espi:billLastPeriod>15252000</espi:billLastPeriod>
         <espi:billToDate>1149000</espi:billToDate>
         <espi:costAdditionalLastPeriod>1346000</espi:costAdditionalLastPeriod>
         <espi:currency>840</espi:currency>
         <espi:overallConsumptionLastPeriod>
            <espi:powerOfTenMultiplier>0</espi:powerOfTenMultiplier>
            <espi:uom>72</espi:uom>
            <espi:value>1298640</espi:value>
         </espi:overallConsumptionLastPeriod>
         <espi:currentBillingPeriodOverAllConsumption>
            <espi:powerOfTenMultiplier>0</espi:powerOfTenMultiplier>
            <espi:timeStamp>1331784000</espi:timeStamp>
            <espi:uom>72</espi:uom>
            <espi:value>93026</espi:value>
         </espi:currentBillingPeriodOverAllConsumption>
         <espi:qualityOfReading>14</espi:qualityOfReading>
         <espi:statusTimeStamp>1331784000</espi:statusTimeStamp>
      </espi:ElectricPowerUsageSummary>
   </ns3:content>
   <ns3:published>2012-10-24T00:00:00Z</ns3:published>
   <ns3:updated>2012-10-24T00:00:00Z</ns3:updated>
</ns3:entry>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:method name="Get" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/atom+xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndpoint}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="Post" method="POST"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/atom+xml</con:mediaType><con:status>400</con:status><con:params/></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/><con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element></con:representation><con:request name="Request 1" mediaType="application/atom+xml" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndpoint}</con:endpoint><con:request><![CDATA[<ns3:entry xmlns:espi="http://naesb.org/espi" xmlns:ns3="http://www.w3.org/2005/Atom">
   <ns3:id>urn:uuid:621D4BDF-FE3D-418B-8C98-276D941D3D45</ns3:id>
   <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/RetailCustomer/1/UsagePoint/1/ElectricPowerUsageSummary/1" rel="self"/>
   <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/RetailCustomer/1/UsagePoint/1/ElectricPowerUsageSummary" rel="up"/>
   <ns3:title>Usage Summary</ns3:title>
   <ns3:content>
      <espi:ElectricPowerUsageSummary>
         <espi:billingPeriod>
            <espi:duration>1119600</espi:duration>
            <espi:start>1330578000</espi:start>
         </espi:billingPeriod>
         <espi:billLastPeriod>15252000</espi:billLastPeriod>
         <espi:billToDate>1149000</espi:billToDate>
         <espi:costAdditionalLastPeriod>1346000</espi:costAdditionalLastPeriod>
         <espi:currency>840</espi:currency>
         <espi:overallConsumptionLastPeriod>
            <espi:powerOfTenMultiplier>0</espi:powerOfTenMultiplier>
            <espi:uom>72</espi:uom>
            <espi:value>1298640</espi:value>
         </espi:overallConsumptionLastPeriod>
         <espi:currentBillingPeriodOverAllConsumption>
            <espi:powerOfTenMultiplier>0</espi:powerOfTenMultiplier>
            <espi:timeStamp>1331784000</espi:timeStamp>
            <espi:uom>72</espi:uom>
            <espi:value>93026</espi:value>
         </espi:currentBillingPeriodOverAllConsumption>
         <espi:qualityOfReading>14</espi:qualityOfReading>
         <espi:statusTimeStamp>1331784000</espi:statusTimeStamp>
      </espi:ElectricPowerUsageSummary>
   </ns3:content>
   <ns3:published>2012-10-24T00:00:00Z</ns3:published>
   <ns3:updated>2012-10-24T00:00:00Z</ns3:updated>
</ns3:entry>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="LocalTimeParameters" path="LocalTimeParameters"><con:settings/><con:parameters/><con:resource name="${#Project#localTimeParametersID}" path="${#Project#localTimeParametersID}"><con:settings/><con:parameters><con:parameter><con:name>#Project#localTimeParametersID</con:name><con:value>#Project#localTimeParametersID</con:value><con:style>TEMPLATE</con:style><con:default>#Project#localTimeParametersID</con:default></con:parameter></con:parameters><con:method name="Get" method="GET"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/html;charset=ISO-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndpoint}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="Put" method="PUT"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/atom+xml" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndpoint}</con:endpoint><con:request><![CDATA[<ns3:entry xmlns:espi="http://naesb.org/espi" xmlns:ns3="http://www.w3.org/2005/Atom">
   <ns3:id>urn:uuid:54C62EBE-2DB6-4D4F-B6BF-1973A079C841</ns3:id>
   <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/LocalTimeParameters/1" rel="self"/>
   <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/LocalTimeParameters" rel="up"/>
   <ns3:title>DST For North America</ns3:title>
   <ns3:content>
      <espi:LocalTimeParameters>
         <espi:dstEndRule>B40E2000</espi:dstEndRule>
         <espi:dstOffset>3600</espi:dstOffset>
         <espi:dstStartRule>360E2000</espi:dstStartRule>
         <espi:tzOffset>-18000</espi:tzOffset>
      </espi:LocalTimeParameters>
   </ns3:content>
   <ns3:published>2012-10-24T00:00:00Z</ns3:published>
   <ns3:updated>2012-10-24T00:00:00Z</ns3:updated>
</ns3:entry>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="Delete" method="DELETE"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>${#Project#ServiceEndpoint}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:method name="Get" method="GET"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/html;charset=ISO-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndpoint}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="Post" method="POST"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/atom+xml" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndpoint}</con:endpoint><con:request><![CDATA[<ns3:entry xmlns:espi="http://naesb.org/espi" xmlns:ns3="http://www.w3.org/2005/Atom">
   <ns3:id>urn:uuid:54C62EBE-2DB6-4D4F-B6BF-1973A079C841</ns3:id>
   <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/LocalTimeParameters/1" rel="self"/>
   <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/LocalTimeParameters" rel="up"/>
   <ns3:title>DST For North America</ns3:title>
   <ns3:content>
      <espi:LocalTimeParameters>
         <espi:dstEndRule>B40E2000</espi:dstEndRule>
         <espi:dstOffset>3600</espi:dstOffset>
         <espi:dstStartRule>360E2000</espi:dstStartRule>
         <espi:tzOffset>-18000</espi:tzOffset>
      </espi:LocalTimeParameters>
   </ns3:content>
   <ns3:published>2012-10-24T00:00:00Z</ns3:published>
   <ns3:updated>2012-10-24T00:00:00Z</ns3:updated>
</ns3:entry>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:method name="Get UsagePoint" method="GET"><con:settings/><con:parameters/><con:request name="Get UsagePoint" mediaType="application/json"><con:endpoint>${#Project#ServiceEndpoint}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>#Project#retailCustomerId</con:entry><con:entry>#Project#usagePointId</con:entry></con:parameterOrder><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials></con:request><con:representation type="RESPONSE"><con:mediaType>application/atom+xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/atom+xml</con:mediaType><con:status>400</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/html;charset=utf-8</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation></con:method><con:parameters><con:parameter><con:name>#Project#usagePointId</con:name><con:value>#Project#usagePointId</con:value><con:style>TEMPLATE</con:style><con:default>#Project#usagePointId</con:default></con:parameter></con:parameters><con:method name="Delete" method="DELETE"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndpoint}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="Put" method="PUT"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/><con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element></con:representation><con:request name="Request 1" mediaType="application/atom+xml" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndpoint}</con:endpoint><con:request><![CDATA[<ns3:entry xmlns:espi="http://naesb.org/espi" xmlns:ns3="http://www.w3.org/2005/Atom">
   <ns3:id>urn:uuid:48C2A019-5598-4E16-B0F9-49E4FF27F5FB</ns3:id>
   <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/RetailCustomer/1/UsagePoint/1" rel="self"/>
   <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/RetailCustomer/1/UsagePoint" rel="up"/>
   <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/RetailCustomer/1/UsagePoint/1/MeterReading" rel="related"/>
   <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/RetailCustomer/1/UsagePoint/1/ElectricPowerUsageSummary" rel="related"/>
   <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/RetailCustomer/1/UsagePoint/1/ElectricPowerQualitySummary" rel="related"/>
   <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/LocalTimeParameters/1" rel="related"/>
   <ns3:title>Front Electric Meter</ns3:title>
   <ns3:content>
      <espi:UsagePoint>
         <espi:ServiceCategory>
            <espi:kind>0</espi:kind>
         </espi:ServiceCategory>
      </espi:UsagePoint>
   </ns3:content>
   <ns3:published>2012-10-24T00:00:00Z</ns3:published>
   <ns3:updated>2012-10-24T00:00:00Z</ns3:updated>
</ns3:entry>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:method name="Get UsagePoint feed" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Get UsagePoint feed" mediaType="application/json"><con:endpoint>${#Project#ServiceEndpoint}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>#Project#retailCustomerId</con:entry><con:entry>#Project#usagePointId</con:entry></con:parameterOrder><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials></con:request><con:representation type="RESPONSE"><con:mediaType>application/atom+xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html;charset=utf-8</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation></con:method><con:method name="Post UsagePoint" method="POST"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/atom+xml</con:mediaType><con:status>400</con:status><con:params/></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/><con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html;charset=utf-8</con:mediaType><con:status>415</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/atom_xml</con:mediaType><con:params/><con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/atom+xml</con:mediaType><con:params/><con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element></con:representation><con:request name="Post UsagePoint" mediaType="application/atom+xml" postQueryString="false"><con:endpoint>${#Project#ServiceEndpoint}</con:endpoint><con:request><![CDATA[<ns3:entry xmlns:espi="http://naesb.org/espi" xmlns:ns3="http://www.w3.org/2005/Atom">
   <ns3:id>urn:uuid:48C2A019-5598-4E16-B0F9-49E4FF27F5FB</ns3:id>
   <ns3:link href="https://localhost:8080/DataCustodian/espi/1_1/resource/RetailCustomer/1/UsagePoint/1" rel="self"/>
   <ns3:link href="https://localhost:8080/DataCustodian/espi/1_1/resource/RetailCustomer/1/UsagePoint" rel="up"/>
   <ns3:link href="https://localhost:8080/DataCustodian/espi/1_1/resource/RetailCustomer/1/UsagePoint/1/MeterReading" rel="related"/>
   <ns3:link href="https://localhost:8080/DataCustodian/espi/1_1/resource/RetailCustomer/1/UsagePoint/1/ElectricPowerUsageSummary" rel="related"/>
   <ns3:link href="https://localhost:8080/DataCustodian/espi/1_1/resource/RetailCustomer/1/UsagePoint/1/ElectricPowerQualitySummary" rel="related"/>
   <ns3:link href="https://localhost:8080/DataCustodian/espi/1_1/resource/LocalTimeParameters/1" rel="related"/>
   <ns3:title>Front Electric Meter</ns3:title>
   <ns3:content>
      <espi:UsagePoint>
         <espi:ServiceCategory>
            <espi:kind>0</espi:kind>
         </espi:ServiceCategory>
      </espi:UsagePoint>
   </ns3:content>
   <ns3:published>2012-10-24T00:00:00Z</ns3:published>
   <ns3:updated>2012-10-24T00:00:00Z</ns3:updated>
</ns3:entry>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>#Project#retailCustomerId</con:entry><con:entry>#Project#usagePointId</con:entry></con:parameterOrder><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials></con:request></con:method><con:parameters><con:parameter><con:name>#Project#usagePointId</con:name><con:value>#Project#usagePointId</con:value><con:style>TEMPLATE</con:style><con:default>#Project#usagePointId</con:default></con:parameter></con:parameters></con:resource><con:parameters><con:parameter><con:name>#Project#retailCustomerId</con:name><con:value>#Project#retailCustomerId</con:value><con:style>TEMPLATE</con:style><con:default>#Project#retailCustomerId</con:default></con:parameter></con:parameters><con:method name="Delete" method="DELETE"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndpoint}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="IntervalBlock" path="IntervalBlock"><con:settings/><con:parameters/><con:resource name="${#Project@#intervalBlockId}" path="${#Project#intervalBlockId}"><con:settings/><con:method name="Get root IntervalBlock" method="GET"><con:settings/><con:parameters/><con:request name="Get root IntervalBlock" mediaType="application/json"><con:endpoint>${#Project#ServiceEndpoint}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>#Project@#intervalBlockId</con:entry></con:parameterOrder><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials></con:request><con:representation type="RESPONSE"><con:mediaType>application/atom+xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element></con:representation></con:method><con:parameters><con:parameter><con:name>#Project@#intervalBlockId</con:name><con:value>#Project@#intervalBlockId</con:value><con:style>TEMPLATE</con:style><con:default>#Project@#intervalBlockId</con:default></con:parameter></con:parameters></con:resource><con:method name="Get root IntervalBlock feed" method="GET"><con:settings/><con:parameters/><con:request name="Get root IntervalBlock feed" mediaType="application/json"><con:endpoint>${#Project#ServiceEndpoint}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials></con:request><con:representation type="RESPONSE"><con:mediaType>application/atom+xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/atom+xml</con:mediaType><con:status>400</con:status><con:params/></con:representation></con:method></con:resource><con:resource name="UsagePoint" path="UsagePoint"><con:settings/><con:parameters/><con:resource name="${Project#usagePointId}" path="${#Project#usagePointId}"><con:settings/><con:method name="Get root UsagePoint" method="GET"><con:settings/><con:parameters/><con:request name="Get root UsagePoint" mediaType="application/json"><con:endpoint>${#Project#ServiceEndpoint}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:parameterOrder><con:entry>Project#usagePointId</con:entry></con:parameterOrder></con:request><con:representation type="RESPONSE"><con:mediaType>application/atom+xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/atom+xml</con:mediaType><con:status>400</con:status><con:params/></con:representation></con:method><con:parameters><con:parameter><con:name>Project#usagePointId</con:name><con:value>Project#usagePointId</con:value><con:style>TEMPLATE</con:style><con:default>Project#usagePointId</con:default></con:parameter></con:parameters><con:method name="Delete" method="DELETE"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndpoint}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="Put" method="PUT"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/><con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element></con:representation><con:request name="Request 1" mediaType="application/atom+xml" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndpoint}</con:endpoint><con:request><![CDATA[<ns3:entry xmlns:espi="http://naesb.org/espi" xmlns:ns3="http://www.w3.org/2005/Atom">
   <ns3:id>urn:uuid:48C2A019-5598-4E16-B0F9-49E4FF27F5FB</ns3:id>
   <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/RetailCustomer/1/UsagePoint/1" rel="self"/>
   <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/RetailCustomer/1/UsagePoint" rel="up"/>
   <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/RetailCustomer/1/UsagePoint/1/MeterReading" rel="related"/>
   <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/RetailCustomer/1/UsagePoint/1/ElectricPowerUsageSummary" rel="related"/>
   <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/RetailCustomer/1/UsagePoint/1/ElectricPowerQualitySummary" rel="related"/>
   <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/LocalTimeParameters/1" rel="related"/>
   <ns3:title>Front Electric Meter</ns3:title>
   <ns3:content>
      <espi:UsagePoint>
         <espi:ServiceCategory>
            <espi:kind>0</espi:kind>
         </espi:ServiceCategory>
      </espi:UsagePoint>
   </ns3:content>
   <ns3:published>2012-10-24T00:00:00Z</ns3:published>
   <ns3:updated>2012-10-24T00:00:00Z</ns3:updated>
</ns3:entry>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:method name="Get root UsagePoint feed" method="GET"><con:settings/><con:parameters/><con:request name="Get root UsagePoint feed" mediaType="application/json"><con:endpoint>${#Project#ServiceEndpoint}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials></con:request><con:representation type="RESPONSE"><con:mediaType>application/atom+xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/atom+xml</con:mediaType><con:status>400</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element></con:representation></con:method><con:method name="Post" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/><con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/atom+xml</con:mediaType><con:status>400</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/atom+xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html;charset=utf-8</con:mediaType><con:status>415</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml+atom</con:mediaType><con:params/><con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/atom+xml</con:mediaType><con:params/><con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element></con:representation><con:request name="Request 1" mediaType="application/atom+xml" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndpoint}</con:endpoint><con:request><![CDATA[<ns3:entry xmlns:espi="http://naesb.org/espi" xmlns:ns3="http://www.w3.org/2005/Atom">
   <ns3:id>urn:uuid:48C2A019-5598-4E16-B0F9-49E4FF27F5FB</ns3:id>
   <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/RetailCustomer/1/UsagePoint/1" rel="self"/>
   <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/RetailCustomer/1/UsagePoint" rel="up"/>
   <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/RetailCustomer/1/UsagePoint/1/MeterReading" rel="related"/>
   <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/RetailCustomer/1/UsagePoint/1/ElectricPowerUsageSummary" rel="related"/>
   <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/RetailCustomer/1/UsagePoint/1/ElectricPowerQualitySummary" rel="related"/>
   <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/LocalTimeParameters/1" rel="related"/>
   <ns3:title>Front Electric Meter</ns3:title>
   <ns3:content>
      <espi:UsagePoint>
         <espi:ServiceCategory>
            <espi:kind>0</espi:kind>
         </espi:ServiceCategory>
      </espi:UsagePoint>
   </ns3:content>
   <ns3:published>2012-10-24T00:00:00Z</ns3:published>
   <ns3:updated>2012-10-24T00:00:00Z</ns3:updated>
</ns3:entry>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="MeterReading" path="MeterReading"><con:settings/><con:parameters/><con:resource name="${#Project#meterReadingId}" path="${#Project#meterReadingId}"><con:settings/><con:method name="Get root MeterReading" method="GET"><con:settings/><con:parameters/><con:request name="Get root MeterReading" mediaType="application/json"><con:endpoint>${#Project#ServiceEndpoint}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>#Project#meterReadingId</con:entry></con:parameterOrder><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials></con:request><con:representation type="RESPONSE"><con:mediaType>application/atom+xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element></con:representation></con:method><con:parameters><con:parameter><con:name>#Project#meterReadingId</con:name><con:value>#Project#meterReadingId</con:value><con:style>TEMPLATE</con:style><con:default>#Project#meterReadingId</con:default></con:parameter></con:parameters><con:method name="Delete" method="DELETE"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndpoint}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="Put" method="PUT"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/><con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element></con:representation><con:request name="Request 1" mediaType="application/atom+xml" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndpoint}</con:endpoint><con:request><![CDATA[<ns3:entry xmlns:espi="http://naesb.org/espi" xmlns:ns3="http://www.w3.org/2005/Atom">
   <ns3:id>urn:uuid:F77FBF34-A09E-4EBC-9606-FF1A59A17CAE</ns3:id>
   <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/RetailCustomer/1/UsagePoint/1/MeterReading/1" rel="self"/>
   <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/RetailCustomer/1/UsagePoint/1/MeterReading" rel="up"/>
   <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/RetailCustomer/1/UsagePoint/1/MeterReading/1/IntervalBlock" rel="related"/>
   <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/ReadingType/1" rel="related"/>
   <ns3:title>Fifteen Minute Electricity Consumption</ns3:title>
   <ns3:content>
      <espi:MeterReading/>
   </ns3:content>
   <ns3:published>2012-10-24T00:00:00Z</ns3:published>
   <ns3:updated>2012-10-24T00:00:00Z</ns3:updated>
</ns3:entry>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:method name="Get root MeterReading feed" method="GET"><con:settings/><con:parameters/><con:request name="Get root MeterReading feed" mediaType="application/json"><con:endpoint>${#Project#ServiceEndpoint}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials></con:request><con:representation type="RESPONSE"><con:mediaType>application/atom+xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element></con:representation></con:method><con:method name="Post" method="POST"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/atom+xml</con:mediaType><con:status>400</con:status><con:params/></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/><con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element></con:representation><con:request name="Request 1" mediaType="application/atom+xml" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndpoint}</con:endpoint><con:request><![CDATA[<ns3:entry xmlns:espi="http://naesb.org/espi" xmlns:ns3="http://www.w3.org/2005/Atom">
   <ns3:id>urn:uuid:F77FBF34-A09E-4EBC-9606-FF1A59A17CAE</ns3:id>
   <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/RetailCustomer/1/UsagePoint/1/MeterReading/1" rel="self"/>
   <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/RetailCustomer/1/UsagePoint/1/MeterReading" rel="up"/>
   <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/RetailCustomer/1/UsagePoint/1/MeterReading/1/IntervalBlock" rel="related"/>
   <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/ReadingType/1" rel="related"/>
   <ns3:title>Fifteen Minute Electricity Consumption</ns3:title>
   <ns3:content>
      <espi:MeterReading/>
   </ns3:content>
   <ns3:published>2012-10-24T00:00:00Z</ns3:published>
   <ns3:updated>2012-10-24T00:00:00Z</ns3:updated>
</ns3:entry>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="ReadingType" path="ReadingType"><con:settings/><con:parameters/><con:resource name="${#Project#readingTypeId}" path="${#Project#readingTypeId}"><con:settings/><con:method name="Get root ReadingType" method="GET"><con:settings/><con:parameters/><con:request name="Get root ReadingType" mediaType="application/json"><con:endpoint>${#Project#ServiceEndpoint}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>#Project#readingTypeId</con:entry></con:parameterOrder><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials></con:request><con:representation type="RESPONSE"><con:mediaType>application/atom+xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/atom+xml</con:mediaType><con:status>400</con:status><con:params/></con:representation></con:method><con:parameters><con:parameter><con:name>#Project#readingTypeId</con:name><con:value>#Project#readingTypeId</con:value><con:style>TEMPLATE</con:style><con:default>#Project#readingTypeId</con:default></con:parameter></con:parameters><con:method name="Delete" method="DELETE"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndpoint}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="Put" method="PUT"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/><con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/atom+xml" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndpoint}</con:endpoint><con:request><![CDATA[<ns3:entry xmlns:espi="http://naesb.org/espi" xmlns:ns3="http://www.w3.org/2005/Atom">
   <ns3:id>urn:uuid:3430B025-65D5-493A-BEC2-053603C91CD7</ns3:id>
   <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/ReadingType/1" rel="self"/>
   <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/ReadingType" rel="up"/>
   <ns3:title>Type of Meter Reading Data</ns3:title>
   <ns3:content>
      <espi:ReadingType>
         <espi:accumulationBehaviour>4</espi:accumulationBehaviour>
         <espi:commodity>1</espi:commodity>
         <espi:currency>840</espi:currency>
         <espi:dataQualifier>12</espi:dataQualifier>
         <espi:flowDirection>1</espi:flowDirection>
         <espi:intervalLength>900</espi:intervalLength>
         <espi:kind>12</espi:kind>
         <espi:phase>769</espi:phase>
         <espi:powerOfTenMultiplier>0</espi:powerOfTenMultiplier>
         <espi:timeAttribute>0</espi:timeAttribute>
         <espi:uom>72</espi:uom>
         <espi:interharmonic>
            <espi:numerator>600</espi:numerator>
            <espi:denominator>800</espi:denominator>
         </espi:interharmonic>
         <espi:argument>
            <espi:numerator>1</espi:numerator>
            <espi:denominator>2</espi:denominator>
         </espi:argument>
      </espi:ReadingType>
   </ns3:content>
   <ns3:published>2012-10-24T00:00:00Z</ns3:published>
   <ns3:updated>2012-10-24T00:00:00Z</ns3:updated>
</ns3:entry>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:method name="Get root ReadingType feed" method="GET"><con:settings/><con:parameters/><con:request name="Get root ReadingType feed" mediaType="application/json"><con:endpoint>${#Project#ServiceEndpoint}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials></con:request><con:representation type="RESPONSE"><con:mediaType>application/atom+xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element></con:representation></con:method><con:method name="Post" method="POST"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/atom+xml</con:mediaType><con:status>400</con:status><con:params/></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/><con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/atom+xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element></con:representation><con:request name="Request 1" mediaType="application/atom+xml" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndpoint}</con:endpoint><con:request><![CDATA[<ns3:entry xmlns:espi="http://naesb.org/espi" xmlns:ns3="http://www.w3.org/2005/Atom">
   <ns3:id>urn:uuid:3430B025-65D5-493A-BEC2-053603C91CD7</ns3:id>
   <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/ReadingType/1" rel="self"/>
   <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/ReadingType" rel="up"/>
   <ns3:title>Type of Meter Reading Data</ns3:title>
   <ns3:content>
      <espi:ReadingType>
         <espi:accumulationBehaviour>4</espi:accumulationBehaviour>
         <espi:commodity>1</espi:commodity>
         <espi:currency>840</espi:currency>
         <espi:dataQualifier>12</espi:dataQualifier>
         <espi:flowDirection>1</espi:flowDirection>
         <espi:intervalLength>900</espi:intervalLength>
         <espi:kind>12</espi:kind>
         <espi:phase>769</espi:phase>
         <espi:powerOfTenMultiplier>0</espi:powerOfTenMultiplier>
         <espi:timeAttribute>0</espi:timeAttribute>
         <espi:uom>72</espi:uom>
         <espi:interharmonic>
            <espi:numerator>600</espi:numerator>
            <espi:denominator>800</espi:denominator>
         </espi:interharmonic>
         <espi:argument>
            <espi:numerator>1</espi:numerator>
            <espi:denominator>2</espi:denominator>
         </espi:argument>
      </espi:ReadingType>
   </ns3:content>
   <ns3:published>2012-10-24T00:00:00Z</ns3:published>
   <ns3:updated>2012-10-24T00:00:00Z</ns3:updated>
</ns3:entry>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="Batch" path="Batch"><con:settings/><con:parameters/><con:resource name="Subscription" path="Subscription"><con:settings/><con:parameters/><con:resource name="{subscriptionID}" path="${#Project#subscriptionID}"><con:settings/><con:method name="Method 1" method="GET"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/json"><con:endpoint>${#Project#ServiceEndpoint}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials></con:request><con:representation type="RESPONSE"><con:mediaType>application/atom+xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html;charset=ISO-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/atom+xml</con:mediaType><con:status>400</con:status><con:params/></con:representation></con:method><con:parameters><con:parameter><con:name>subscriptionID</con:name><con:value>subscriptionID</con:value><con:style>TEMPLATE</con:style><con:default>subscriptionID</con:default></con:parameter></con:parameters></con:resource><con:method name="Method 1" method="GET"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/html;charset=ISO-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndpoint}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials></con:request></con:method></con:resource><con:resource name="RetailCustomer" path="RetailCustomer"><con:settings/><con:parameters/><con:resource name="{retailCustomerId}" path="${#Project#retailCustomerId}"><con:settings/><con:resource name="UsagePoint" path="UsagePoint"><con:settings/><con:parameters/><con:resource name="${#Project#usagePointId}" path="${#Project#usagePointId}"><con:settings/><con:parameters><con:parameter><con:name>#Project#usagePointId</con:name><con:value>#Project#usagePointId</con:value><con:style>TEMPLATE</con:style><con:default>#Project#usagePointId</con:default></con:parameter></con:parameters><con:method name="Method 1" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/atom+xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndpoint}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>retailCustomerId</con:entry><con:entry>#Project#usagePointId</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:method name="Method 1" method="GET"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/html;charset=utf-8</con:mediaType><con:status>405</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/atom+xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndpoint}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>retailCustomerId</con:entry></con:parameterOrder></con:request></con:method><con:method name="Post" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/><con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html;charset=utf-8</con:mediaType><con:status>405 415</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/atom+xml</con:mediaType><con:params/><con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/atom+xml" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndpoint}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:attachment><con:name>test_usage_data.xml</con:name><con:contentType>application/xml</con:contentType><con:contentId>test_usage_data.xml</con:contentId><con:url>../data/test_usage_data.xml</con:url><con:id>a08d6407-242b-4a21-a369-cadf59fd95a7</con:id></con:attachment><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>retailCustomerId</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:method name="Method 1" method="GET"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/json"><con:endpoint>${#Project#ServiceEndpoint}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials></con:request><con:representation type="FAULT"><con:mediaType>text/html;charset=ISO-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html;charset=utf-8</con:mediaType><con:status>405</con:status><con:params/><con:element>html</con:element></con:representation></con:method><con:parameters><con:parameter><con:name>retailCustomerId</con:name><con:value>retailCustomerId</con:value><con:style>TEMPLATE</con:style><con:default>retailCustomerId</con:default></con:parameter></con:parameters></con:resource><con:method name="Method 1" method="GET"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/html;charset=ISO-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndpoint}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials></con:request></con:method></con:resource><con:resource name="Bulk" path="Bulk"><con:settings/><con:parameters/><con:resource name="${Project#bulkId}" path="${Project#bulkId}"><con:settings/><con:parameters><con:parameter><con:name>Project#bulkId</con:name><con:value>Project#bulkId</con:value><con:style>TEMPLATE</con:style><con:default>Project#bulkId</con:default></con:parameter></con:parameters><con:method name="Method 1" method="GET"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/html;charset=ISO-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndpoint}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:method name="Method 1" method="GET"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/html;charset=ISO-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndpoint}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:method name="Get Batch Collection" method="GET"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/html;charset=ISO-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:request name="Get Batch Collection (NOP)" mediaType="application/json"><con:endpoint>${#Project#ServiceEndpoint}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials></con:request></con:method></con:resource><con:resource name="Subscription" path="Subscription"><con:settings/><con:parameters/><con:resource name="${#Project#subscriptionId}" path="${#Project#subscriptionId}"><con:settings/><con:parameters><con:parameter><con:name>#Project#subscriptionId</con:name><con:value>#Project#subscriptionId</con:value><con:style>TEMPLATE</con:style><con:default>#Project#subscriptionId</con:default></con:parameter></con:parameters><con:method name="Get" method="GET"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/html;charset=utf-8</con:mediaType><con:status>400</con:status><con:params/><con:element>html</con:element></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndpoint}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="Delete" method="DELETE"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/html;charset=utf-8</con:mediaType><con:status>400</con:status><con:params/><con:element>html</con:element></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndpoint}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:method name="Get" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/atom+xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndpoint}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="ApplicationInformation" path="ApplicationInformation"><con:settings/><con:parameters/><con:resource name="${#Project#applicationInformationId}" path="${#Project#applicationInformationId}"><con:settings/><con:parameters><con:parameter><con:name>#Project#applicationInformationId</con:name><con:value>#Project#applicationInformationId</con:value><con:style>TEMPLATE</con:style><con:default>#Project#applicationInformationId</con:default></con:parameter></con:parameters><con:method name="Get" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/atom+xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndpoint}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="Delete" method="DELETE"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndpoint}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="Put" method="PUT"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/><con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/atom+xml" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndpoint}</con:endpoint><con:request><![CDATA[   <ns3:entry xmlns:espi="http://naesb.org/espi" xmlns:ns3="http://www.w3.org/2005/Atom">
      <ns3:id>urn:uuid:af6e8b03-0299-467e-972a-a883ecdcc575</ns3:id>
      <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/ApplicationInformation" rel="up"/>
      <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/ApplicationInformation/1" rel="self"/>
      <ns3:title>GreenButtonData.org  DataCustodian Application</ns3:title>
      <ns3:content>
         <espi:ApplicationInformation>
            <espi:dataCustodianApplicationStatus/>
            <espi:thirdPartyNotifyUri>http://localhost:8080/ThirdParty/espi/1_1/Notification</espi:thirdPartyNotifyUri>
            <espi:dataCustodianBulkRequestURI/>
            <espi:dataCustodianResourceEndpoint>http://localhost:8080/DataCustodian/espi/1_1/resource</espi:dataCustodianResourceEndpoint>
            <espi:thirdPartyScopeSelectionScreenURI>http://localhost:8080/ThirdParty/RetailCustomer/ScopeSelection</espi:thirdPartyScopeSelectionScreenURI>
            <espi:client_secret>secret</espi:client_secret>
            <espi:redirect_uri>http://localhost:8080/ThirdParty/espi/1_1/OAuthCallBack</espi:redirect_uri>
            <espi:client_id>third_party</espi:client_id>
            <espi:scope>FB=4_5_15;IntervalDuration=900;BlockDuration=monthly;HistoryLength=13</espi:scope>
            <espi:scope>FB=4_5_15;IntervalDuration=3600;BlockDuration=monthly;HistoryLength=13</espi:scope>
            <espi:dataCustodianId>data_custodian</espi:dataCustodianId>
            <espi:thirdPartyApplicationName>Third Party (localhost)</espi:thirdPartyApplicationName>
         </espi:ApplicationInformation>
      </ns3:content>
      <ns3:published>2014-01-02T10:00:00Z</ns3:published>
      <ns3:updated>2014-01-02T10:00:00Z</ns3:updated>
   </ns3:entry>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:method name="Get" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/atom+xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndpoint}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="Post" method="POST"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/atom+xml</con:mediaType><con:status>400</con:status><con:params/></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/><con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element></con:representation><con:request name="Request 1" mediaType="application/atom+xml" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndpoint}</con:endpoint><con:request><![CDATA[   <ns3:entry xmlns:espi="http://naesb.org/espi" xmlns:ns3="http://www.w3.org/2005/Atom">
      <ns3:id>urn:uuid:af6e8b03-0299-467e-972a-a883ecdcc575</ns3:id>
      <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/ApplicationInformation" rel="up"/>
      <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/ApplicationInformation/1" rel="self"/>
      <ns3:title>GreenButtonData.org  DataCustodian Application</ns3:title>
      <ns3:content>
         <espi:ApplicationInformation>
            <espi:dataCustodianApplicationStatus/>
            <espi:thirdPartyNotifyUri>http://localhost:8080/ThirdParty/espi/1_1/Notification</espi:thirdPartyNotifyUri>
            <espi:dataCustodianBulkRequestURI/>
            <espi:dataCustodianResourceEndpoint>http://localhost:8080/DataCustodian/espi/1_1/resource</espi:dataCustodianResourceEndpoint>
            <espi:thirdPartyScopeSelectionScreenURI>http://localhost:8080/ThirdParty/RetailCustomer/ScopeSelection</espi:thirdPartyScopeSelectionScreenURI>
            <espi:client_secret>secret</espi:client_secret>
            <espi:redirect_uri>http://localhost:8080/ThirdParty/espi/1_1/OAuthCallBack</espi:redirect_uri>
            <espi:client_id>third_party</espi:client_id>
            <espi:scope>FB=4_5_15;IntervalDuration=900;BlockDuration=monthly;HistoryLength=13</espi:scope>
            <espi:scope>FB=4_5_15;IntervalDuration=3600;BlockDuration=monthly;HistoryLength=13</espi:scope>
            <espi:dataCustodianId>data_custodian</espi:dataCustodianId>
            <espi:thirdPartyApplicationName>Third Party (localhost)</espi:thirdPartyApplicationName>
         </espi:ApplicationInformation>
      </ns3:content>
      <ns3:published>2014-01-02T10:00:00Z</ns3:published>
      <ns3:updated>2014-01-02T10:00:00Z</ns3:updated>
   </ns3:entry>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="Authorization" path="Authorization"><con:settings/><con:parameters/><con:resource name="${#Project#authorizationId}" path="${#Project#authorizationId}"><con:settings/><con:parameters><con:parameter><con:name>#Project#authorizationId</con:name><con:value>#Project#authorizationId</con:value><con:style>TEMPLATE</con:style><con:default>#Project#authorizationId</con:default></con:parameter></con:parameters><con:method name="Get" method="GET"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/atom+xml</con:mediaType><con:status>400</con:status><con:params/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndpoint}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="Delete" method="DELETE"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndpoint}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:method name="Get" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/atom+xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndpoint}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="ReadServiceStatus" path="ReadServiceStatus"><con:settings/><con:parameters/><con:method name="Get" method="GET"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/html;charset=ISO-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndpoint}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="LocalTimeParameters" path="LocalTimeParameters"><con:settings/><con:parameters/><con:resource name="${#Project#localTimeParametersId}" path="${#Project#localTimeParametersId}"><con:settings/><con:parameters><con:parameter><con:name>#Project#localTimeParametersId</con:name><con:value>#Project#localTimeParametersId</con:value><con:style>TEMPLATE</con:style><con:default>#Project#localTimeParametersId</con:default></con:parameter></con:parameters><con:method name="Get" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndpoint}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="Put" method="PUT"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/html;charset=ISO-8859-1</con:mediaType><con:status>403</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/><con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/atom+xml</con:mediaType><con:params/><con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/atom+xml" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndpoint}</con:endpoint><con:request><![CDATA[<ns3:entry xmlns:espi="http://naesb.org/espi" xmlns:ns3="http://www.w3.org/2005/Atom">
   <ns3:id>urn:uuid:54C62EBE-2DB6-4D4F-B6BF-1973A079C841</ns3:id>
   <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/LocalTimeParameters/1" rel="self"/>
   <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/LocalTimeParameters" rel="up"/>
   <ns3:title>DST For North America</ns3:title>
   <ns3:content>
      <espi:LocalTimeParameters>
         <espi:dstEndRule>B40E2000</espi:dstEndRule>
         <espi:dstOffset>3600</espi:dstOffset>
         <espi:dstStartRule>360E2000</espi:dstStartRule>
         <espi:tzOffset>-18000</espi:tzOffset>
      </espi:LocalTimeParameters>
   </ns3:content>
   <ns3:published>2012-10-24T00:00:00Z</ns3:published>
   <ns3:updated>2012-10-24T00:00:00Z</ns3:updated>
</ns3:entry>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="Delete" method="DELETE"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndpoint}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:method name="Get" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/atom+xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndpoint}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="Post" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/><con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html;charset=ISO-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/atom+xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html;charset=utf-8</con:mediaType><con:status>415 400</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/atom+xml</con:mediaType><con:params/><con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/atom+xml</con:mediaType><con:status>400</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element></con:representation><con:request name="Request 1" mediaType="application/atom+xml" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndpoint}</con:endpoint><con:request><![CDATA[<ns3:entry xmlns:espi="http://naesb.org/espi" xmlns:ns3="http://www.w3.org/2005/Atom">
   <ns3:id>urn:uuid:54C62EBE-2DB6-4D4F-B6BF-1973A079C841</ns3:id>
   <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/LocalTimeParameters/1" rel="self"/>
   <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/LocalTimeParameters" rel="up"/>
   <ns3:title>DST For North America</ns3:title>
   <ns3:content>
      <espi:LocalTimeParameters>
         <espi:dstEndRule>B40E2000</espi:dstEndRule>
         <espi:dstOffset>3600</espi:dstOffset>
         <espi:dstStartRule>360E2000</espi:dstStartRule>
         <espi:tzOffset>-18000</espi:tzOffset>
      </espi:LocalTimeParameters>
   </ns3:content>
   <ns3:published>2012-10-24T00:00:00Z</ns3:published>
   <ns3:updated>2012-10-24T00:00:00Z</ns3:updated>
</ns3:entry>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:resource><con:endpoints><con:endpoint>${#Project#ServiceEndpoint}</con:endpoint><con:endpoint>192.168.1.3:8080</con:endpoint><con:endpoint>http://localhost:8080</con:endpoint></con:endpoints></con:interface><con:testSuite name="MartySandbox"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="SeleniumTestSave" searchProperties="true" id="d21e2694-ad3f-42c7-93bc-f32f800ec176"><con:settings/><con:testStep type="groovy" name="LogIntoDataCustodian"><con:settings/><con:config><script>/////////////////////////////////////////////////////////
// Note: Generated by capture using Selenium in FF. 
// Export to Java / JUnit 4 / WebDriver
// Copy and paste into Groovy Script with minor tweaks
/////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////
// Need these imports to run tests
/////////////////////////////////////////////////////////
import org.openqa.selenium.By
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver
import org.openqa.selenium.WebElement
import org.openqa.selenium.firefox.FirefoxDriver
//import org.openqa.selenium.support.ui.ExpectedCondition
//import org.openqa.selenium.support.ui.WebDriverWait
//import org.openqa.selenium.JavascriptExecutor;
//import org.openqa.selenium.support.ui.ExpectedConditions

import java.util.concurrent.TimeUnit;
import java.util.regex.Pattern;
import java.util.concurrent.TimeUnit;
import org.junit.*;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.*;

/////////////////////////////////////////////////////////
// get variables from the project Custom Properties
/////////////////////////////////////////////////////////
def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath

def BaseURL = project.getPropertyValue("BaseURL")
def ServiceEndpoint=BaseURL+"/DataCustodian"
def TestManager=project.getPropertyValue("TestManager")
def TestManagerPW=project.getPropertyValue("TestManagerPW")
def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")


def TestFile=projectPath + "/../data/" + project.getPropertyValue("TestFile")

//projectPath.replaceAll("\x5c","\x5c\x5c")

log.info("We are talking to: " + ServiceEndpoint)
log.info("Test File Path: "+ TestFile)


// Create a new instance of the Firefox driver
WebDriver driver = new FirefoxDriver()
    driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);


// Open the DataCustodian Page
driver.get(ServiceEndpoint)

/////////////////////////////////////////////////////////
// Log in as Manager
/////////////////////////////////////////////////////////
driver.findElement(By.id("login")).click();
driver.findElement(By.name("j_username")).clear()
driver.findElement(By.name("j_username")).sendKeys(TestManager)
driver.findElement(By.name("j_password")).clear()
driver.findElement(By.name("j_password")).sendKeys(TestManagerPW)
driver.findElement(By.name("submit")).click()

/////////////////////////////////////////////////////////
// Now to the upload
/////////////////////////////////////////////////////////
driver.findElement(By.partialLinkText("Upload")).click();
driver.findElement(By.name("file")).sendKeys(TestFile);
//driver.findElement(By.name("file")).sendKeys("C:\\_Project\\NIST\\NISTGreenButton\\Source\\OpenESPI-Greenbutton-java\\OpenESPI-DataCustodian-java\\src\\main\\resources\\fixtures\\test_usage_data.xml");
driver.findElement(By.name("upload")).click();
driver.findElement(By.partialLinkText("Customer List")).click();
driver.findElement(By.partialLinkText(TestRetailCustomer)).click();
driver.findElement(By.partialLinkText("Add Usage")).click();
driver.findElement(By.id("UUID")).clear();
driver.findElement(By.id("UUID")).sendKeys("48C2A019-5598-4E16-B0F9-49E4FF27F5FB");
//driver.findElement(By.id("description")).clear();
//driver.findElement(By.id("description")).sendKeys("test_usage_data");
driver.findElement(By.name("create")).click();
driver.findElement(By.id("logout")).click();

/////////////////////////////////////////////////////////
// now look at data as Retail Customer
/////////////////////////////////////////////////////////
driver.findElement(By.id("login")).click();
driver.findElement(By.name("j_username")).clear()
driver.findElement(By.name("j_username")).sendKeys(TestRetailCustomer)
driver.findElement(By.name("j_password")).clear()
driver.findElement(By.name("j_password")).sendKeys(TestRetailCustomerPW)
driver.findElement(By.name("submit")).click()
driver.findElement(By.partialLinkText("Usage Points")).click();

sleep(5000)
driver.findElement(By.id("logout")).click();

//Close the browser
driver.quit()
</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy"><con:settings/><con:config><script>import org.openqa.selenium.By
import org.openqa.selenium.WebDriver
import org.openqa.selenium.WebElement
import org.openqa.selenium.firefox.FirefoxDriver
import org.openqa.selenium.support.ui.ExpectedCondition
import org.openqa.selenium.support.ui.WebDriverWait

        // Create a new instance of the Firefox driver
        // Notice that the remainder of the code relies on the interface, 
        // not the implementation.
        WebDriver driver = new FirefoxDriver()

        // And now use this to visit Google
//        driver.get("http://www.google.com")
		driver.get("http://services.greenbuttondata.org/DataCustodian/")

        // Find the text input element by its name
//        WebElement element = driver.findElement(By.name("q"))
WebElement element = driver.findElement(By.id("login"))
element.click()


// 		driver.findElement(By.id("login")).click()
        
sleep(1000)

        // Enter something to search for
        driver.findElement(By.name("j_username")).clear()
        driver.findElement(By.name("j_username")).sendKeys("alan")
        driver.findElement(By.name("j_password")).clear()
        driver.findElement(By.name("j_password")).sendKeys("koala")
        driver.findElement(By.name("submit")).click()

        // Now submit the form. WebDriver will find the form for us from the element
 //       element.submit()

        // Check the title of the page
        log.info("Page title is: " + driver.getTitle())
        
		sleep(5000)

/*        
        // Google's search is rendered dynamically with JavaScript.
        // Wait for the page to load, timeout after 10 seconds
        (new WebDriverWait(driver, 10)).until(new ExpectedCondition() {
            public Boolean apply(WebDriver d) {
                return d.getTitle().toLowerCase().startsWith("cheese!")
            }
        });
*/
        // Should see: "cheese! - Google Search"
        log.info("Page title is: " + driver.getTitle())

        
        //Close the browser
        driver.quit()</script></con:config></con:testStep><con:testStep type="groovy" name="Java"><con:settings/><con:config><script>package com.example.tests;

import java.util.regex.Pattern;
import java.util.concurrent.TimeUnit;
import org.junit.*;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.*;
import org.openqa.selenium.*;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.support.ui.Select;

public class TestSelenium {
  private WebDriver driver;
  private String baseUrl;
  private boolean acceptNextAlert = true;
  private StringBuffer verificationErrors = new StringBuffer();

  @Before
  public void setUp() throws Exception {
    driver = new FirefoxDriver();
    baseUrl = "https://www.google.com/";
    driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
  }

  @Test
  public void testSelenium() throws Exception {
    driver.get(baseUrl + "/search?q=search&amp;ie=utf-8&amp;oe=utf-8&amp;aq=t&amp;rls=org.mozilla:en-US:official&amp;client=firefox-a");
    driver.findElement(By.xpath("//a[contains(text(),'Maps')]")).click();
  }

  @After
  public void tearDown() throws Exception {
    driver.quit();
    String verificationErrorString = verificationErrors.toString();
    if (!"".equals(verificationErrorString)) {
      fail(verificationErrorString);
    }
  }

  private boolean isElementPresent(By by) {
    try {
      driver.findElement(by);
      return true;
    } catch (NoSuchElementException e) {
      return false;
    }
  }

  private boolean isAlertPresent() {
    try {
      driver.switchTo().alert();
      return true;
    } catch (NoAlertPresentException e) {
      return false;
    }
  }

  private String closeAlertAndGetItsText() {
    try {
      Alert alert = driver.switchTo().alert();
      String alertText = alert.getText();
      if (acceptNextAlert) {
        alert.accept();
      } else {
        alert.dismiss();
      }
      return alertText;
    } finally {
      acceptNextAlert = true;
    }
  }
}
</script></con:config></con:testStep><con:testStep type="groovy" name="GoogleSuggest"><con:settings/><con:config><script>import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.support.ui.ExpectedCondition
import org.openqa.selenium.support.ui.WebDriverWait

log.info("here is a message")
	def s;


	Integer i;
    	
        // The Firefox driver supports javascript 
        WebDriver driver = new FirefoxDriver();
        
        // Go to the Google Suggest home page
        driver.get("http://www.google.com/webhp?complete=1&amp;hl=en");
        
        // Enter the query string "Cheese"
        WebElement query = driver.findElement(By.name("q"));
        query.sendKeys("Cheese");

        // Sleep until the div we want is visible or 5 seconds is over
        long end = System.currentTimeMillis() + 5000;
        while (System.currentTimeMillis() &lt; end) {
            WebElement resultsDiv = driver.findElement(By.className("gssb_e"));

            // If results have been returned, the results are displayed in a drop down.
            if (resultsDiv.isDisplayed()) {
              break;
            }
        }

        // And now list the suggestions
        List&lt;WebElement> allSuggestions = driver.findElements(By.xpath("//td[@class='gssb_a gbqfsf']"));
        
        for (WebElement suggestion : allSuggestions) {
        	 log.info( suggestion.getText());

        }


</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="IntegrationTests" searchProperties="true" id="fbf0e69d-c340-4a3b-bb29-776f3094d4d5"><con:settings/><con:testStep type="groovy" name="UploadTestUsageDataFile"><con:settings/><con:config><script>/////////////////////////////////////////////////////////
// Note: Generated by capture using Selenium in FF. 
// Export to Java / JUnit 4 / WebDriver
// Copy and paste into Groovy Script with minor tweaks
/////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////
// Need these imports to run tests
/////////////////////////////////////////////////////////
import org.openqa.selenium.By
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver
import org.openqa.selenium.WebElement
import org.openqa.selenium.firefox.FirefoxDriver
//import org.openqa.selenium.support.ui.ExpectedCondition
//import org.openqa.selenium.support.ui.WebDriverWait
//import org.openqa.selenium.JavascriptExecutor;
//import org.openqa.selenium.support.ui.ExpectedConditions

import java.util.concurrent.TimeUnit;
import java.util.regex.Pattern;
import java.util.concurrent.TimeUnit;
import org.junit.*;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.*;

/////////////////////////////////////////////////////////
// get variables from the project Custom Properties
/////////////////////////////////////////////////////////
def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath

def BaseURL = project.getPropertyValue("BaseURL")
def ServiceEndpoint=BaseURL+"/DataCustodian"
def TestManager=project.getPropertyValue("TestManager")
def TestManagerPW=project.getPropertyValue("TestManagerPW")
def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")


def TestFile=projectPath + "/../data/" + project.getPropertyValue("TestFile")

//projectPath.replaceAll("\x5c","\x5c\x5c")

log.info("We are talking to: " + ServiceEndpoint)
log.info("Test File Path: "+ TestFile)


/////////////////////////////////////////////////////////
// Create a new instance of the Firefox driver
/////////////////////////////////////////////////////////
WebDriver driver = new FirefoxDriver()

driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);

// Open the DataCustodian Page
driver.get(ServiceEndpoint)

/////////////////////////////////////////////////////////
// Log in as Manager
/////////////////////////////////////////////////////////
driver.findElement(By.id("login")).click();
driver.findElement(By.name("j_username")).clear()
driver.findElement(By.name("j_username")).sendKeys(TestManager)
driver.findElement(By.name("j_password")).clear()
driver.findElement(By.name("j_password")).sendKeys(TestManagerPW)
driver.findElement(By.name("submit")).click()

/////////////////////////////////////////////////////////
// Now to the upload
/////////////////////////////////////////////////////////
driver.findElement(By.partialLinkText("Upload")).click();
driver.findElement(By.name("file")).sendKeys(TestFile);
driver.findElement(By.name("upload")).click();
driver.findElement(By.partialLinkText("Customer List")).click();
driver.findElement(By.partialLinkText(TestRetailCustomer)).click();
driver.findElement(By.partialLinkText("Add Usage")).click();
driver.findElement(By.id("UUID")).clear();
driver.findElement(By.id("UUID")).sendKeys("48C2A019-5598-4E16-B0F9-49E4FF27F5FB");
//driver.findElement(By.id("description")).clear();
//driver.findElement(By.id("description")).sendKeys("test_usage_data");
driver.findElement(By.name("create")).click();
driver.findElement(By.id("logout")).click();

/////////////////////////////////////////////////////////
// now look at data as Retail Customer
/////////////////////////////////////////////////////////
driver.findElement(By.id("login")).click();
driver.findElement(By.name("j_username")).clear()
driver.findElement(By.name("j_username")).sendKeys(TestRetailCustomer)
driver.findElement(By.name("j_password")).clear()
driver.findElement(By.name("j_password")).sendKeys(TestRetailCustomerPW)
driver.findElement(By.name("submit")).click()
driver.findElement(By.partialLinkText("Usage Points")).click();

driver.findElement(By.partialLinkText("Front Electric Meter")).click();

sleep(5000)
driver.findElement(By.id("logout")).click();

//Close the browser
driver.quit()
</script></con:config></con:testStep><con:testStep type="groovy" name="AuthorizationFromDataCustodianStart"><con:settings/><con:config><script>///////////////////////////////////////////////////////// 
// Note: Generated by capture using Selenium in FF.
// Export to Java / JUnit 4 / WebDriver // Copy and paste into Groovy Script with minor tweaks
/////////////////////////////////////////////////////////
///////////////////////////////////////////////////////// 
// Need these imports to run tests
/////////////////////////////////////////////////////////
import org.openqa.selenium.By
import org.openqa.selenium.WebDriver
import org.openqa.selenium.WebElement
import org.openqa.selenium.firefox.FirefoxDriver
import org.openqa.selenium.support.ui.ExpectedCondition
import org.openqa.selenium.support.ui.WebDriverWait
import java.util.concurrent.TimeUnit;
import java.util.regex.Pattern;
import java.util.concurrent.TimeUnit;
import org.junit.*;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.*;
///////////////////////////////////////////////////////// 
// get variables from the project Custom Properties
/////////////////////////////////////////////////////////
def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def BaseURL = project.getPropertyValue("BaseURL")
def ServiceEndpoint=BaseURL+"/DataCustodian"
def TestManager=project.getPropertyValue("TestManager")
def TestManagerPW=project.getPropertyValue("TestManagerPW")
def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")
def TestFile=project.getPropertyValue("TestFile")
def projectPath = groovyUtils.projectPath
log.info("We are talking to: " + ServiceEndpoint) 
log.info("Test File Path: "+ TestFile)

 ///////////////////////////////////////////////////////// 
 // Create a new instance of the Firefox driver
 ///////////////////////////////////////////////////////// 
 WebDriver driver = new FirefoxDriver()

 driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
 // Open the DataCustodian Page 
 driver.get(ServiceEndpoint)

 ///////////////////////////////////////////////////////// 
 // Log in as Manager
 /////////////////////////////////////////////////////////
driver.findElement(By.id("login")).click();
driver.findElement(By.name("j_username")).clear()
driver.findElement(By.name("j_username")).sendKeys(TestManager)
driver.findElement(By.name("j_password")).clear()
driver.findElement(By.name("j_password")).sendKeys(TestManagerPW)
driver.findElement(By.name("submit")).click()
//driver.findElement(By.partialLinkText("Remove all OAuth tokens")).click();
driver.findElement(By.id("logout")).click();
///////////////////////////////////////////////////////// 
// Log in as Alan and do the OAuth thing
/////////////////////////////////////////////////////////
driver.findElement(By.id("login")).click();
driver.findElement(By.name("j_username")).clear();
driver.findElement(By.name("j_username")).sendKeys(TestRetailCustomer);
driver.findElement(By.name("j_password")).clear();
driver.findElement(By.name("j_password")).sendKeys(TestRetailCustomerPW);
driver.findElement(By.name("submit")).click();
driver.findElement(By.partialLinkText("Third Parties")).click();
driver.findElement(By.name("Third_party")).click();
driver.findElement(By.cssSelector("label")).click();
driver.findElement(By.name("next")).click();
driver.findElement(By.name("j_username")).clear();
driver.findElement(By.name("j_username")).sendKeys(TestRetailCustomer);
driver.findElement(By.name("j_password")).clear();
driver.findElement(By.name("j_password")).sendKeys(TestRetailCustomerPW);
driver.findElement(By.name("submit")).click();
driver.findElement(By.name("scope")).click();
driver.findElement(By.name("next")).click();

driver.findElement(By.name("scope.FB=4_5_15;IntervalDuration=900;BlockDuration=monthly;HistoryLength=13")).click();

driver.findElement(By.name("authorize")).click(); sleep(1000)
driver.findElement(By.partialLinkText("Usage Points")).click();
driver.findElement(By.partialLinkText("Front Electric Meter")).click();
sleep(5000)
///////////////////////////////////////////////////////// 
//Close the browser
/////////////////////////////////////////////////////////
driver.quit() </script></con:config></con:testStep><con:testStep type="groovy" name="test"><con:settings/><con:config><script>/////////////////////////////////////////////////////////
// Note: Generated by capture using Selenium in FF. 
// Export to Java / JUnit 4 / WebDriver
// Copy and paste into Groovy Script with minor tweaks
/////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////
// Need these imports to run tests
/////////////////////////////////////////////////////////
import org.openqa.selenium.By
import org.openqa.selenium.WebDriver
import org.openqa.selenium.WebElement
import org.openqa.selenium.firefox.FirefoxDriver
import org.openqa.selenium.support.ui.ExpectedCondition
import org.openqa.selenium.support.ui.WebDriverWait
import java.util.concurrent.TimeUnit;
import java.util.regex.Pattern;
import java.util.concurrent.TimeUnit;
import org.junit.*;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.*;

/////////////////////////////////////////////////////////
// get variables from the project Custom Properties
/////////////////////////////////////////////////////////
def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

def BaseURL = project.getPropertyValue("BaseURL")
//def ServiceEndpoint=project.getPropertyValue("ServiceEndpoint")
def ServiceEndpoint=BaseURL
def TestManager=project.getPropertyValue("TestManager")
def TestManagerPW=project.getPropertyValue("TestManagerPW")
def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")
def TestFile=project.getPropertyValue("TestFile")
def projectPath = groovyUtils.projectPath

log.info("We are talking to: " + ServiceEndpoint)
log.info("Test File Path: "+ TestFile)


/////////////////////////////////////////////////////////
// Create a new instance of the Firefox driver
/////////////////////////////////////////////////////////
WebDriver driver = new FirefoxDriver()
    driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);


// Open the DataCustodian Page
driver.get(ServiceEndpoint+"/ThirdParty/")


/////////////////////////////////////////////////////////
// Log in as Alan and do the OAuth thing
/////////////////////////////////////////////////////////
driver.findElement(By.id("login")).click();
driver.findElement(By.name("j_username")).clear();
driver.findElement(By.name("j_username")).sendKeys(TestRetailCustomer);
driver.findElement(By.name("j_password")).clear();
driver.findElement(By.name("j_password")).sendKeys(TestRetailCustomerPW);
driver.findElement(By.name("submit")).click();

sleep(5000)

driver.findElement(By.partialLinkText("Usage Points")).click();
driver.findElement(By.partialLinkText("Front Electric Meter")).click();

sleep(5000)

/////////////////////////////////////////////////////////
//Close the browser
/////////////////////////////////////////////////////////
driver.quit()
</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Resources" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Post UsagePoint - Post UsagePoint"><con:settings/><con:config service="ESPI Resources" resourcePath="/espi/1_1/resource/RetailCustomer/${#Project#retailCustomerId}/UsagePoint" methodName="Post UsagePoint" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Post UsagePoint - Post UsagePoint" mediaType="application/json" postQueryString="false"><con:endpoint>${#Project#ServiceEndpoint}</con:endpoint><con:request><![CDATA[<ns3:entry xmlns:espi="http://naesb.org/espi" xmlns:ns3="http://www.w3.org/2005/Atom">
   <ns3:id>urn:uuid:48C2A019-5598-4E16-B0F9-49E4FF27F5FB</ns3:id>
   <ns3:link href="https://localhost:8080/DataCustodian/espi/1_1/resource/RetailCustomer/1/UsagePoint/1" rel="self"/>
   <ns3:link href="https://localhost:8080/DataCustodian/espi/1_1/resource/RetailCustomer/1/UsagePoint" rel="up"/>
   <ns3:link href="https://localhost:8080/DataCustodian/espi/1_1/resource/RetailCustomer/1/UsagePoint/1/MeterReading" rel="related"/>
   <ns3:link href="https://localhost:8080/DataCustodian/espi/1_1/resource/RetailCustomer/1/UsagePoint/1/ElectricPowerUsageSummary" rel="related"/>
   <ns3:link href="https://localhost:8080/DataCustodian/espi/1_1/resource/RetailCustomer/1/UsagePoint/1/ElectricPowerQualitySummary" rel="related"/>
   <ns3:link href="https://localhost:8080/DataCustodian/espi/1_1/resource/LocalTimeParameters/1" rel="related"/>
   <ns3:title>Front Electric Meter</ns3:title>
   <ns3:content>
      <espi:UsagePoint>
         <espi:ServiceCategory>
            <espi:kind>0</espi:kind>
         </espi:ServiceCategory>
      </espi:UsagePoint>
   </ns3:content>
   <ns3:published>2012-10-24T00:00:00Z</ns3:published>
   <ns3:updated>2012-10-24T00:00:00Z</ns3:updated>
</ns3:entry>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="#Project#retailCustomerId" value="2" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>#Project#retailCustomerId</con:entry><con:entry>#Project#usagePointId</con:entry></con:parameterOrder><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:properties><con:property><con:name>sessionid</con:name><con:value>null</con:value></con:property></con:properties></con:testSuite><con:testSuite name="OpenEspiIntegrationTests"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Library" searchProperties="true" id="73736828-3934-44f5-af9f-866f8478c216"><con:settings/><con:testStep type="groovy" name="resetDB"><con:settings/><con:config><script>def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath

def mysqlCmd=project.getPropertyValue("mysqlCmd")
def DBprepopulateScriptName = project.getPropertyValue("DBprepopulateScriptName")


def cmdClean = projectPath + "/etc/doMysql.sh " + mysqlCmd + " " + projectPath + "/etc/cleantables.sql"

log.info("exec: " + cmdClean);

def doClean = cmdClean.execute()

doClean.waitFor()

if(doClean.exitValue()!=0)
{
	log.error "return code: ${ doClean.exitValue()}"
	log.error "stderr: ${doClean.err.text}"
	log.error "stdout: ${doClean.in.text}"
}


def cmdPopulate = projectPath + "/etc/doMysql.sh " + mysqlCmd + " " + projectPath + "/etc/" + DBprepopulateScriptName

log.info("exec: " + cmdPopulate);

def doPopulate = cmdPopulate.execute()

doPopulate.waitFor()

if(doPopulate.exitValue()!=0)
{
	log.error "return code: ${ doPopulate.exitValue()}"
	log.error "stderr: ${doPopulate.err.text}"
	log.error "stdout: ${doPopulate.in.text}"
}
</script></con:config></con:testStep><con:testStep type="groovy" name="resourceTests"><con:settings/><con:config><script><![CDATA[import org.xml.sax.SAXException;
import org.w3c.dom.*;
import javax.xml.parsers.*;
import javax.xml.xpath.*;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import javax.xml.namespace.NamespaceContext;

import groovyx.net.http.HTTPBuilder
import groovyx.net.http.HttpResponseException;
import static groovyx.net.http.Method.GET
import static groovyx.net.http.ContentType.TEXT
import groovyx.net.http.Method;

import org.xml.sax.InputSource;

import java.io.File;
import java.io.FilenameFilter;

import org.apache.commons.io.FileUtils;


public class SimpleNamespaceContext implements NamespaceContext {

    private final Map<String, String> PREF_MAP = new HashMap<String, String>();

    public SimpleNamespaceContext(final Map<String, String> prefMap) {
        PREF_MAP.putAll(prefMap);       
    }

    public String getNamespaceURI(String prefix) {
        return PREF_MAP.get(prefix);
    }

    public String getPrefix(String uri) {
        throw new UnsupportedOperationException();
    }

    public Iterator getPrefixes(String uri) {
        throw new UnsupportedOperationException();
    }

}


public class ResourceTester {

	Object log;
	public String _strError = "";
	Document _docResponse = null;
	String _strResponseBody = null;

	ResourceTester(Object theLog)
	{
		log = theLog;
	}
	
	public String parseSelfLink(Document srcDoc)
	{
		XPath xpath = XPathFactory.newInstance().newXPath();
		
		// add namespaces
		HashMap<String, String> prefMap = new HashMap<String, String>() {{
		    put("espi", "http://naesb.org/espi");
		    put("ns3", "http://www.w3.org/2005/Atom");
		}};
		
		SimpleNamespaceContext namespaces = new SimpleNamespaceContext(prefMap);
		
		xpath.setNamespaceContext(namespaces);
		
		// find resource self link
		String strExpr = "/ns3:entry/ns3:link[@rel='self']/@href";
		XPathExpression expr = xpath.compile(strExpr);
		String href = expr.evaluate(srcDoc);
	
		return href; 
	}
	
	
	public String parseEntryName(Document srcDoc)
	{
		String strEntryName;
		
		//find tag name of espi content
		Element feed = srcDoc.getDocumentElement();
		NodeList nlContent = feed.getElementsByTagName("ns3:content");
		NodeList nlContentChildren = nlContent.item(0).getChildNodes();
	
		for(int j = 0 ; j < nlContentChildren.getLength();j++) {
			if(nlContentChildren.item(j).getNodeType()==Node.ELEMENT_NODE)
			{
				Element espi = (Element) nlContentChildren.item(j);
				strEntryName = espi.getNodeName();
			}
		}
	
		return strEntryName;
	}

	public Document parseDocument(String strInputFile)
	{
		DocumentBuilderFactory domFactory = DocumentBuilderFactory.newInstance();
		domFactory.setNamespaceAware(true); 
		DocumentBuilder builder = domFactory.newDocumentBuilder();
		
		// parse source document "Xpath form
		Document srcDoc = builder.parse(strInputFile);
	
		return srcDoc;
	}


	private Element getDirectChild(Element parent, String name) {
		
	    for(Node child = parent.getFirstChild(); child != null; child = child.getNextSibling())
	    {
	        if(child instanceof Element && name.equals(child.getNodeName())) return (Element) child;
	    }
	    
	    return null;
	}
	
	private String getNodeValue( Node node ) {
		
	    NodeList childNodes = node.getChildNodes();
	    
	    for (int x = 0; x < childNodes.getLength(); x++ ) {
	    	
	        Node data = childNodes.item(x);
	        if ( data.getNodeType() == Node.TEXT_NODE )
	            return data.getNodeValue().trim();
	    }
	    
	    return "";
	}
	
	private boolean CompareLinks(Node nodeSource,Node nodeResult,Object log) {
		
		String strHrefSrc = nodeSource.getAttribute("href");
		String strRelSrc = nodeSource.getAttribute("rel");
	
		//log.info("Compare link: href:" + strHrefSrc + " rel:" + strRelSrc); 
		
		NodeList nlRes = nodeResult.getChildNodes();
	
		for (int i = 0; i < nlRes.getLength(); i++) 
		{	
			if(nlRes.item(i).getNodeType()==Node.ELEMENT_NODE)
			{
				String strResNodeName = nlRes.item(i).getNodeName();
				if(strResNodeName.equals("ns3:link"))
				{
					String strHrefRes = nlRes.item(i).getAttribute("href");
					String strRelRes = nlRes.item(i).getAttribute("rel");		
	
					if((strHrefRes.equals(strHrefSrc)) && (strRelRes.equals(strRelSrc)))
					{
						return false;
					}
				}
			}
		}
	
		log.error("Did not find matching link for href:" + strHrefSrc + " rel:" + strRelSrc);

		_strError = _strError + "Did not find matching link for href:" + strHrefSrc + " rel:" + strRelSrc;
		
		return true;
	}
	
	private boolean CompareNodes(Node nodeSource,Node nodeResult,Object log) {
		
		boolean bFailure = false;
		
		if(nodeSource.getNodeType()==Node.ELEMENT_NODE) {
	
			String strSrcNodeName = nodeSource.getNodeName();	 
			String strResNodeName = nodeResult.getNodeName();	 
	
			//log.info("Comparing nodes: " + strSrcNodeName + " and " + strResNodeName);
	
			if(!strSrcNodeName.equals(strResNodeName)) {
				log.error("Node: " + strSrcNodeName + " names not equal");
				_strError = _strError + "Node: " + strSrcNodeName + " names not equal";
				bFailure = true;
			}
	
			String strSrcNodeValue = getNodeValue(nodeSource);	 
			String strResNodeValue = getNodeValue(nodeResult);
	
			if(strSrcNodeName.equals("ns3:id"))
			{
				strSrcNodeValue = strSrcNodeValue.toUpperCase();
				strResNodeValue = strResNodeValue.toUpperCase();
			}
	
			//log.info("Node: " + strSrcNodeName + "SrcNodeVal: " + strSrcNodeValue + " ResNodeVal: " + strResNodeValue);
	
			//if(!strSrcNodeName.equals("ns3:published") && !strSrcNodeName.equals("ns3:updated")) {	
				if(!strSrcNodeValue.equals(strResNodeValue))
				{
					log.error("Node: " + strSrcNodeName + " values not equal: SrcNodeVal: " + strSrcNodeValue + " ResNodeVal: " + strResNodeValue);	
					_strError = _strError + "Node: " + strSrcNodeName + " values not equal: SrcNodeVal: " + strSrcNodeValue + " ResNodeVal: " + strResNodeValue;
					bFailure = true;
				}
			//}
	
			NodeList nlSrc = nodeSource.getChildNodes();
			NodeList nlRes = nodeResult.getChildNodes();
	
			for (int i = 0; i < nlSrc.getLength(); i++) 
			{
				if(nlSrc.item(i).getNodeType()==Node.ELEMENT_NODE)
				{
					if(strSrcNodeName.equals("espi:IntervalBlock"))
					{
						//log.info("espi:IntervalBlock");
						bFailure = bFailure  | CompareNodes(nlSrc.item(i),nlRes.item(i),log);
					}
					else if(!nlSrc.item(i).getNodeName().equals("ns3:link"))
					{
	
						Element elResultChild = getDirectChild(nodeResult,nlSrc.item(i).getNodeName());
						if(elResultChild==null)
						{
							log.error("Node: " + strSrcNodeName + " Result does not contain Child: " + nlSrc.item(i).getNodeName());
							_strError = _strError + "Node: " + strSrcNodeName + " Result does not contain Child: " + nlSrc.item(i).getNodeName();
							bFailure = true;
							
						}
						else
						{
							bFailure = bFailure  | CompareNodes(nlSrc.item(i),elResultChild,log);
						}
					}
					else
					{
						// treat links specially
						//bFailure = bFailure  | CompareLinks(nlSrc.item(i),nodeResult,log);				
					}
				}
			}
		}
	
		return bFailure;
	}
	
	
	public String ReplaceLinks(String strEntryName,String strOriginal)
	{
		String strReturn;
		
		if(strEntryName.equals("espi:IntervalBlock")) {
		
			strReturn = strOriginal.replaceAll("/RetailCustomer\\/[0-9A-Fa-f]{1,20}/UsagePoint\\/[0-9A-Fa-f]{1,20}/MeterReading\\/[0-9A-Fa-f]{1,20}","");						
			//strReturn = strOriginal.replaceAll("/IntervalBlock\\/[0-9A-Fa-f]{1,20}","/IntervalBlock/" + _intervalBlockId);
		}
		else if(strEntryName.equals("espi:UsagePoint")) {
			
			strReturn = strOriginal.replaceAll("/RetailCustomer\\/[0-9A-Fa-f]{1,20}","");
			//strReturn = strOriginal.replaceAll("/UsagePoint\\/[0-9A-Fa-f]{1,20}","/UsagePoint/" + _usagePointId);
		}
		else if(strEntryName.equals("espi:MeterReading")) {
		
			strReturn = strOriginal.replaceAll("/RetailCustomer\\/[0-9A-Fa-f]{1,20}/UsagePoint\\/[0-9A-Fa-f]{1,20}","");
			//strReturn = strOriginal.replaceAll("/MeterReading\\/[0-9A-Fa-f]{1,20}","/MeterReading/" + _meterReadingId);
		}
		else if(strEntryName.equals("espi:ReadingType")) {
		
			strReturn = strOriginal.replaceAll("/RetailCustomer\\/[0-9A-Fa-f]{1,20}/UsagePoint\\/[0-9A-Fa-f]{1,20}","");
			//strReturn = strOriginal.replaceAll("/MeterReading\\/[0-9A-Fa-f]{1,20}","/MeterReading/" + _meterReadingId);
		}	
		else if(strEntryName.equals("espi:ElectricPowerUsageSummary")) {
			
			strReturn = strOriginal.replaceAll("/RetailCustomer\\/[0-9A-Fa-f]{1,20}/UsagePoint\\/[0-9A-Fa-f]{1,20}","");
			//strReturn = strOriginal.replaceAll("/ElectricPowerUsageSummary\\/[0-9A-Fa-f]{1,20}","/ElectricPowerUsageSummary/" + _ElectricPowerUsageSummaryId);
				
		}
		else if(strEntryName.equals("espi:ElectricPowerQualitySummary")) {
			
			strReturn = strOriginal.replaceAll("/RetailCustomer\\/[0-9A-Fa-f]{1,20}/UsagePoint\\/[0-9A-Fa-f]{1,20}","");
			//strReturn = strOriginal.replaceAll("/ElectricPowerQualitySummary\\/[0-9A-Fa-f]{1,20}","/ElectricPowerQualitySummary/" + _ElectricPowerQualitySummaryId);					
		}
		else if(strEntryName.equals("espi:LocalTimeParameters")) {
			
			strReturn = strOriginal.replaceAll("/RetailCustomer\\/[0-9A-Fa-f]{1,20}/UsagePoint\\/[0-9A-Fa-f]{1,20}","");
			//strReturn = strOriginal.replaceAll("/LocalTimeParameters\\/[0-9A-Fa-f]{1,20}","/LocalTimeParameters/" + _localTimeParametersId);					
		}	
		else
		{
			
			//strReturn = strOriginal.replaceAll("/RetailCustomer\\/[0-9A-Fa-f]{1,20}","/RetailCustomer/" + _retailCustomerId);
			//strReturn = strOriginal.replaceAll("/UsagePoint\\/[0-9A-Fa-f]{1,20}","/UsagePoint/" + _usagePointId);
			//strReturn = strOriginal.replaceAll("/MeterReading\\/[0-9A-Fa-f]{1,20}","/MeterReading/" + _meterReadingId);
			//strReturn = strOriginal.replaceAll("/ReadingType\\/[0-9A-Fa-f]{1,20}","/ReadingType/" + _readingTypeId);
			//strReturn = strOriginal.replaceAll("/IntervalBlock\\/[0-9A-Fa-f]{1,20}","/IntervalBlock/" + _intervalBlockId);
			//strReturn = strOriginal.replaceAll("/resource\\/[0-9A-Fa-f]{1,20}","/resource/" + _resourceId);							
		}				
	}
	

	public boolean doDELETE(boolean bShouldPass,String strBaseEndpoint,String href) {
	
		boolean bFailure = false;
		String strResult = "";
			
		try {
			
			def http = new HTTPBuilder(strBaseEndpoint);
	
			def res = http.request(Method.DELETE) { req ->
			    uri.path = href			 
			    response.success = { resp, object ->			        
			        strResult = "DELETE succeeded: " + resp.status;
			    }		 
			    response.failure = { resp ->
			       
			        strResult = "DELETE Failed: " + resp.statusLine;
			        bFailure = true;
			    }	    
			}		      		
		} catch ( HttpResponseException ex ) {
		    
		    // default failure handler throws an exception:
		    strResult = "DELETE Unexpected response error: ${ex.statusCode}";
		    _strError = strResult;
		    bFailure = true;
		    return true;
		}			
	
	
		if(bShouldPass) {
			if(bFailure) {
				_strError = strResult;
				return true;
			} else {
				return false;
			}
		} else {
			if(!bFailure) {
				_strError = "DELETE did not fail as expected " + strResult ;
				return true;
			} else {
				return false;
			}		
		}
		
		return true;
	}
	
	public boolean doGET(boolean bShouldPass,String strBaseEndpoint,String strInputFile,Document docSrc,String href) {
		
		boolean bFailure = false;
		String strResult = "";
		String strBody = "";
		
	  	def http = new HTTPBuilder();
	  
		try {
	
			http.request( strBaseEndpoint, GET, TEXT ) { req ->
				uri.path = href
				//headers.Accept = 'application/xml'
				headers.Accept = 'application/atom+xml'
				
				response.success = { resp, reader ->
					//assert resp.statusLine.statusCode == 200
					//log.info "Got response: ${resp.statusLine}"
					//log.info "Content-Type: ${resp.headers.'Content-Type'}"
					//log.info reader.text
					strBody = reader.text;	
					//log.info("body: " + strBody);	
					_strResponseBody = strBody; 		
				}						
				response.failure = { resp ->
					strResult = "GET Failed: " + resp.statusLine;
					bFailure = true;
				}  
			}
		} catch ( HttpResponseException ex ) {
		    // default failure handler throws an exception:
		    strResult ="GET Unexpected response error: ${ex.statusCode}"
		    _strError = strResult;
		    bFailure = true;
		    return true;
		} catch (Exception e) {
		    strResult ="GET Unexpected error"
		    _strError = strResult;
		    bFailure = true;
		    return true;			
		}
	
		if(bShouldPass) {
			if(!bFailure) {
				
				DocumentBuilderFactory domFactory = DocumentBuilderFactory.newInstance();
				domFactory.setNamespaceAware(true); 
				DocumentBuilder builder = domFactory.newDocumentBuilder();
			
				def Document docResult = builder.parse(new InputSource(new StringReader(strBody)));

				if(strInputFile!=null) {
					
					Element feedSrc = docSrc.getDocumentElement();
					Element feedResult = docResult.getDocumentElement();
				
					bFailure = CompareNodes(feedSrc,feedResult,log);			
		
					if(bFailure) {
						_strError = "GET content veification failure" + _strError;
						return true;
					} else {
						_docResponse = docResult;
						return false;
					}
				}
				else
				{
					_docResponse = docResult;
					return false;					
				}
			} else {
				_strError = strResult;
				return true;
			}
		} else {
			if(bFailure) {
				return false;
			} else {
				_strError = "GET did not fail as expected: " + _strError + strResult;
				return true;
			}
		}
	
		return true;
	}
	
	
	
	public boolean doPOST(boolean bShouldPass,String strBaseEndpoint,String strInputFile,String href) {
		
		// used for creating new record
	
		boolean bFailure = false;
		String strResult = "";
		
		try {
			
			String strContent = FileUtils.readFileToString(new File(strInputFile));
	
			try {
				
				def http = new HTTPBuilder(strBaseEndpoint);
		
				def res = http.request(Method.POST) { req ->
				    uri.path = href
				   // send("application/xml", strContent)
				    send("application/atom+xml", strContent)
				 
				    response.success = { resp, object ->
				    		strResult = "POST succeeded: " + resp.status;	   
				    }
				 
				    response.failure = { resp ->
					    strResult = "POST Failed: " + resp.statusLine;
				        	bFailure = true;
				    }			 
				}
			      		
			} catch ( HttpResponseException ex ) {
			    
			    // default failure handler throws an exception:
			    strResult = "POST Unexpected response error: ${ex.statusCode}"
			    _strError = strResult;
			    bFailure = true;
			    return true;
			}			
		} catch (IOException e) {			
			//e.printStackTrace();
			_strError = "POST Error reading file: " + strInputFile;
			bFailure = true;
			return true;
		}
	
	
		if(bShouldPass) {
			if(bFailure) {
				_strError = strResult;
				return true;
			} else {
				return false;
			}
		} else {
			if(!bFailure) {
				_strError = "POST did not fail as expected " + strResult;
				return true;
			} else {
				return false;
			}		
		}
		
		return true;
	}
	
	
	public boolean doPUT(boolean bShouldPass,String strBaseEndpoint,String strInputFile,String href) {
		
		boolean bFailure = false;
		String strResult = "";
			
		// used for putdating record
		try {
			
			String strContent = FileUtils.readFileToString(new File(strInputFile));
	
			try {
				
				def http = new HTTPBuilder(strBaseEndpoint);
		
				def res = http.request(Method.PUT) { req ->
				    uri.path = href
				    //send("application/xml", strContent)	
				    send("application/atom+xml", strContent)
				 
				    response.success = { resp, object ->
				        strResult = "PUT succeeded: " + resp.status;		        
				    }			 
				    response.failure = { resp ->	       
				        strResult = "PUT Failed: " + resp.statusLine;				    
				        bFailure = true;
				    }
				}
			      		
			}catch ( HttpResponseException ex ) {
			    
			    // default failure handler throws an exception:
			    strResult = "PUT Unexpected response error: ${ex.statusCode}";
			    bFailure = true;
			}			
		} catch (IOException e) {
			
			//e.printStackTrace();
			strResult = "PUT Error reading file: " + strInputFile;
			_strError = strResult;
			return true;
		}
	
		if(bShouldPass)
		{
			if(bFailure)
			{
				_strError = strResult;
				return true;
			}
			else
			{
				return false;
			}
		}
		else
		{
			if(!bFailure)
			{
				_strError = "PUT did not fail as expected" + strResult;
				return true;
			}
			else
			{
				return false;
			}		
		}
		
		return true;
	}
	
	
	public boolean TestDeleteXPATH(boolean bShouldPass,boolean bReportError,String strBaseEndpoint,String strLinkPrefixForReplace,String strInputFile) {
		
		boolean bFailure = false;
		
		Document srcDoc = parseDocument(strInputFile);
		String href = parseSelfLink(srcDoc);
	
		// remove endpoint root prefix
		href = href.replace(strLinkPrefixForReplace,"");
	
		// read back xpath style resource and validate response against source
		log.info("Delete XPATH " + strBaseEndpoint + href);	
		bFailure = doDELETE(bShouldPass,strBaseEndpoint,href);

		if(bReportError) {
			if(bShouldPass && bFailure) {
				log.error("FAILED: Delete XPATH " + strBaseEndpoint + href + " with error:" + _strError);	
			}
		}

		return bFailure;
	}

	public boolean TestDeleteROOT(boolean bShouldPass,boolean bReportError,String strBaseEndpoint,String strLinkPrefixForReplace,String strInputFile) {
		
		boolean bFailure = false;
		
		Document srcDoc = parseDocument(strInputFile);
		String href = parseSelfLink(srcDoc);
	
		// remove endpoint root prefix
		href = href.replace(strLinkPrefixForReplace,"");

		//find tag name of espi content
		String strEntryName = parseEntryName(srcDoc);
	
		// based on entry type replace links 
		href = ReplaceLinks(strEntryName,href);	
			
		// read back xpath style resource and validate response against source
		log.info("Delete ROOT " + strBaseEndpoint + href);	
		bFailure = doDELETE(bShouldPass,strBaseEndpoint,href);

		if(bReportError) {
			if(bShouldPass && bFailure) {
				log.error("FAILED: Delete ROOT " + strBaseEndpoint + href + " with error:" + _strError);	
			}
		}		
	
		return bFailure;
	}	
	
	public boolean TestPostXPATH(boolean bShouldPass,boolean bReportError,String strBaseEndpoint,String strLinkPrefixForReplace,String strInputFile)
	{
		
		boolean bFailure = false;

		Document srcDoc = parseDocument(strInputFile);
		String href = parseSelfLink(srcDoc);
		
		// remove endpoint root prefix
		href = href.replace(strLinkPrefixForReplace,"");
	
		int idx = href.lastIndexOf("/");
		href = href.substring(0,idx);
	
		log.info("POST XPATH " + strBaseEndpoint + href);		
		bFailure = doPOST(bShouldPass,strBaseEndpoint,strInputFile,href);

		if(bReportError) {
			if(bShouldPass && bFailure) {
				log.error("FAILED: POST XPATH " + strBaseEndpoint + href + " with error:" + _strError);	
			}
		}	
					
		return bFailure;
	}
	
	public boolean TestPutXPATH(boolean bShouldPass,boolean bReportError,String strBaseEndpoint,String strLinkPrefixForReplace,String strInputFile) {
		
		boolean bFailure = false;
		
		Document srcDoc = parseDocument(strInputFile);
		String href = parseSelfLink(srcDoc);
		
		// remove endpoint root prefix
		href = href.replace(strLinkPrefixForReplace,"");
	
		log.info("PUT XPATH " + strBaseEndpoint + href);			
		bFailure = doPUT(bShouldPass,strBaseEndpoint,strInputFile,href);	

		if(bReportError) {
			if(bShouldPass && bFailure) {
				log.error("FAILED: PUT XPATH " + strBaseEndpoint + href + " with error:" + _strError);	
			}
		}	
				
		return bFailure;
	}
	
	public boolean TestPutROOT(boolean bShouldPass,boolean bReportError,String strBaseEndpoint,String strLinkPrefixForReplace,String strInputFile) {
		
		boolean bFailure = false;
		
		Document srcDoc = parseDocument(strInputFile);
		String href = parseSelfLink(srcDoc);
	
		// remove endpoint root prefix
		href = href.replace(strLinkPrefixForReplace,"");
	
		//find tag name of espi content
		String strEntryName = parseEntryName(srcDoc);
	
		// based on entry type replace links 
		href = ReplaceLinks(strEntryName,href);	
	
		log.info("PUT ROOT " + strBaseEndpoint + href);		
		bFailure = doPUT(bShouldPass,strBaseEndpoint,strInputFile,href);	

		if(bReportError) {
			if(bShouldPass && bFailure) {
				log.error("FAILED: PUT ROOT " + strBaseEndpoint + href + " with error:" + _strError);	
			}
		}	
				
		return bFailure;
	}
	
	public boolean TestPostROOT(boolean bShouldPass,boolean bReportError,String strBaseEndpoint,String strLinkPrefixForReplace,String strInputFile) {
		
		boolean bFailure = false;
		
		Document srcDoc = parseDocument(strInputFile);
		String href = parseSelfLink(srcDoc);
	
		// remove endpoint root prefix
		href = href.replace(strLinkPrefixForReplace,"");
	
		//find tag name of espi content
		String strEntryName = parseEntryName(srcDoc);
	
		// based on entry type replace links 
		href = ReplaceLinks(strEntryName,href);	
	
		int idx = href.lastIndexOf("/");
		href = href.substring(0,idx);
	
		log.info("POST ROOT " + strBaseEndpoint + href);		
		bFailure = doPOST(bShouldPass,strBaseEndpoint,strInputFile,href);

		if(bReportError) {
			if(bShouldPass && bFailure) {
				log.error("FAILED: POST ROOT " + strBaseEndpoint + href + " with error:" + _strError);	
			}
		}	
					
		return bFailure;
	}
	
	
	public boolean TestGetXPATH(boolean bShouldPass,boolean bReportError,String strBaseEndpoint,String strLinkPrefixForReplace,String strInputFile) {
		
		boolean bFailure = false;
		
		Document srcDoc = parseDocument(strInputFile);
		String href = parseSelfLink(srcDoc);
	
		// remove endpoint root prefix
		href = href.replace(strLinkPrefixForReplace,"");
	
		// read back xpath style resource and validate response against source
		log.info("Get XPATH " + strBaseEndpoint + href);		
		bFailure = doGET(bShouldPass,strBaseEndpoint,strInputFile,srcDoc,href);	

		if(bReportError) {
			if(bShouldPass && bFailure) {
				log.error("FAILED: Get XPATH " + strBaseEndpoint + href + " with error:" + _strError);	
			}
		}	
							
		return bFailure;
	}

	public boolean TestGetROOT(boolean bShouldPass,boolean bReportError,String strBaseEndpoint,String strLinkPrefixForReplace,String strInputFile) {
		
		boolean bFailure = false;
	
		Document srcDoc = parseDocument(strInputFile);
		String href = parseSelfLink(srcDoc);
	
		// remove endpoint root prefix
		href = href.replace(strLinkPrefixForReplace,"");
	
		//find tag name of espi content
		String strEntryName = parseEntryName(srcDoc);
	
		// based on entry type replace links 
		href = ReplaceLinks(strEntryName,href);		
	
		// read back root style resource and validate response against source
		log.info("Get ROOT " + strBaseEndpoint + href);				
		bFailure = doGET(bShouldPass,strBaseEndpoint,strInputFile,srcDoc,href);

		if(bReportError) {
			if(bShouldPass && bFailure) {
				log.error("FAILED: Get ROOT " + strBaseEndpoint + href + " with error:" + _strError);	
			}
		}	
				
		return bFailure;
	}

	public boolean TestGetSaveResponse(boolean bShouldPass,boolean bReportError,String strBaseEndpoint,String strResource,String strOutputFile) {
		
		boolean bFailure = false;
		
		// read back xpath style resource and validate response against source
		log.info("Get " + strBaseEndpoint + strResource + " save to file:" + strOutputFile);		
		bFailure = doGET(bShouldPass,strBaseEndpoint,null,null,strResource);	

		if(bReportError) {
			if(bShouldPass && bFailure) {
				log.error("FAILED: Get " + strBaseEndpoint + strResource + " with error:" + _strError);	
			}
		}	

		if(!bFailure) {
			PrintStream out = null;
			try {
			    out = new PrintStream(new FileOutputStream(strOutputFile));
			    out.print(_strResponseBody);
			} finally {
			    if (out != null) out.close();
			}			
		}
							
		return bFailure;
	}	

	public boolean TestGetROOTAndLinks(boolean bShouldPass,boolean bReportError,String strBaseEndpoint,String strLinkPrefixForReplace,String strInputFile) {
			
		Document srcDoc = parseDocument(strInputFile);
		String href = parseSelfLink(srcDoc);
	
		// remove endpoint root prefix
		href = href.replace(strLinkPrefixForReplace,"");
	
		//find tag name of espi content
		String strEntryName = parseEntryName(srcDoc);
	
		// based on entry type replace links 
		href = ReplaceLinks(strEntryName,href);		
	
		// read back root style resource and validate response against source
		log.info("Get ROOT And links " + strBaseEndpoint + href);				
		boolean bFailure = doGET(bShouldPass,strBaseEndpoint,strInputFile,srcDoc,href);

		if(bFailure)
		{
			if(bReportError) {
				if(bShouldPass && bFailure) {
					log.error("FAILED: Get ROOT And links " + strBaseEndpoint + href + " with error:" + _strError);	
				}
			}				
			return true;
		}

		
		XPath xpath = XPathFactory.newInstance().newXPath();
		
		// add namespaces
		HashMap<String, String> prefMap = new HashMap<String, String>() {{
		    put("espi", "http://naesb.org/espi");
		    put("ns3", "http://www.w3.org/2005/Atom");
		}};
		
		SimpleNamespaceContext namespaces = new SimpleNamespaceContext(prefMap);
		
		xpath.setNamespaceContext(namespaces);
		
		// find resource self link
		String strExpr = "/ns3:entry/ns3:link/@href";
		XPathExpression expr = xpath.compile(strExpr);
		NodeList nlLinks = (NodeList) expr.evaluate(_docResponse,XPathConstants.NODESET);

		boolean bFailOccurred = false;

		for (int i = 0; i < nlLinks.getLength(); i++) {
			
			String strLinkhref = getNodeValue(nlLinks.item(i));
	
			log.info("*Get resource for link: " + strLinkhref);				
			bFailure = doGET(bShouldPass,strBaseEndpoint,null,null,strLinkhref);	
			
			if(bFailure) {
				log.error(_strError);	
				bFailOccurred = true;
			}
			else
			{
				if(strLinkhref.endsWith("UsagePoint")||
					strLinkhref.endsWith("LocalTimeParameters")||
					strLinkhref.endsWith("MeterReading")||
					strLinkhref.endsWith("ReadingType")||
					strLinkhref.endsWith("ElectricPowerUsageSummary")||
					strLinkhref.endsWith("ElectricPowerQualitySummary")||
					strLinkhref.endsWith("IntervalBlock")) {
				
					// we should get back a feed
					
					String strExpr2 = "ns3:feed";
					xpath.setNamespaceContext(namespaces);
					XPathExpression expr2 = xpath.compile(strExpr2);
					NodeList nlEntries = (NodeList) expr2.evaluate(_docResponse,XPathConstants.NODESET);
					
					if(nlEntries.getLength()!=1) {
						_strError = "Response did not contain 1 'ns3:feed'";
						log.error(_strError);

						log.info("Response body: " + _strResponseBody);
						bFailOccurred = true;	
					}		
					
				} else {
					
					// we should get back an entry
					
					String strExpr2 = "ns3:entry";
					xpath.setNamespaceContext(namespaces);
					XPathExpression expr2 = xpath.compile(strExpr2);
					NodeList nlEntries = (NodeList) expr2.evaluate(_docResponse,XPathConstants.NODESET);
					
					if(nlEntries.getLength()!=1) {
						_strError = "Response did not contain 1 'ns3:entry'";
						log.error(_strError);

						log.info("Response body: " + _strResponseBody);
						bFailOccurred = true;
					}				
				}	
			}
		}

		return bFailOccurred;
	}	
	
	public boolean TestType1XPATH(Object testRunner,Object context,String strInputFile) {
	
		def project = testRunner.testCase.testSuite.project
		def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
		def projectPath = groovyUtils.projectPath	
		
		def BaseURL = project.getPropertyValue("BaseURL")
		def DataCustodianContext = project.getPropertyValue("DataCustodianContext")
		def ThirdPartyContext = project.getPropertyValue("ThirdPartyContext")
		def linkPrefixForReplace = project.getPropertyValue("linkPrefixForReplace")
		
		def ServiceEndpointDataCustodian = BaseURL + "/" + DataCustodianContext
		def ServiceEndpointThirdParty = BaseURL + "/" + ThirdPartyContext;
		
		String strBaseEndpoint = ServiceEndpointDataCustodian + "/";
		String strSourceDataFile = projectPath + "/../data/testSets/" + strInputFile;
		
	
		boolean bFailure = false;
	
		log.info("**********************************************");
		log.info("** Running test TestType1XPATH for ${strInputFile} ");
		log.info("**********************************************");
			
	//	bFailure = bFailure | TestPostXPATH(true,true,strBaseEndpoint,linkPrefixForReplace,strSourceDataFile);
		bFailure = bFailure | TestGetXPATH(true,true,strBaseEndpoint,linkPrefixForReplace,strSourceDataFile);
		bFailure = bFailure | TestGetROOT(true,true,strBaseEndpoint,linkPrefixForReplace,strSourceDataFile);
		
		bFailure = bFailure | TestPutXPATH(true,true,strBaseEndpoint,linkPrefixForReplace,strSourceDataFile);	
		bFailure = bFailure | TestGetXPATH(true,true,strBaseEndpoint,linkPrefixForReplace,strSourceDataFile);
		bFailure = bFailure | TestGetROOT(true,true,strBaseEndpoint,linkPrefixForReplace,strSourceDataFile);
		
		bFailure = bFailure | TestDeleteXPATH(true,true,strBaseEndpoint,linkPrefixForReplace,strSourceDataFile);
		bFailure = bFailure | TestGetXPATH(false,true,strBaseEndpoint,linkPrefixForReplace,strSourceDataFile); //	(should fail)
		bFailure = bFailure | TestGetROOT(false,true,strBaseEndpoint,linkPrefixForReplace,strSourceDataFile); //(should fail)
	
		if(bFailure) {
			_strError = "** FAILURE: test TestType1XPATH for ${strInputFile} ";		
		} else {
			log.info("**********************************************");
			log.info("** SUCCESS: TestType1XPATH for ${strInputFile} ");
			log.info("**********************************************");			
		}
		
		return bFailure;
	}

public boolean TestType1ROOT(Object testRunner,Object context,String strInputFile) {
	
		def project = testRunner.testCase.testSuite.project
		def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
		def projectPath = groovyUtils.projectPath	
		
		def BaseURL = project.getPropertyValue("BaseURL")
		def DataCustodianContext = project.getPropertyValue("DataCustodianContext")
		def ThirdPartyContext = project.getPropertyValue("ThirdPartyContext")
		def linkPrefixForReplace = project.getPropertyValue("linkPrefixForReplace")
		
		def ServiceEndpointDataCustodian = BaseURL + "/" + DataCustodianContext
		def ServiceEndpointThirdParty = BaseURL + "/" + ThirdPartyContext;
		
		String strBaseEndpoint = ServiceEndpointDataCustodian + "/";
		String strSourceDataFile = projectPath + "/../data/testSets/" + strInputFile;
		
	
		boolean bFailure = false;
	
		log.info("**********************************************");
		log.info("** Running test TestType1ROOT for ${strInputFile} ");
		log.info("**********************************************");
	
//		bFailure = bFailure | TestPostROOT(true,true,strBaseEndpoint,linkPrefixForReplace,strSourceDataFile);
		bFailure = bFailure | TestGetXPATH(true,true,strBaseEndpoint,linkPrefixForReplace,strSourceDataFile);
		bFailure = bFailure | TestGetROOT(true,true,strBaseEndpoint,linkPrefixForReplace,strSourceDataFile);
		
		bFailure = bFailure | TestPutROOT(true,true,strBaseEndpoint,linkPrefixForReplace,strSourceDataFile);
		bFailure = bFailure | TestGetXPATH(true,true,strBaseEndpoint,linkPrefixForReplace,strSourceDataFile);
		bFailure = bFailure | TestGetROOT(true,true,strBaseEndpoint,linkPrefixForReplace,strSourceDataFile);
		
		bFailure = bFailure | TestDeleteROOT(true,true,strBaseEndpoint,linkPrefixForReplace,strSourceDataFile);
		bFailure = bFailure | TestGetXPATH(false,true,strBaseEndpoint,linkPrefixForReplace,strSourceDataFile); //	(should fail)
		bFailure = bFailure | TestGetROOT(false,true,strBaseEndpoint,linkPrefixForReplace,strSourceDataFile); //(should fail)


		if(bFailure) {
			_strError = "** FAILURE: TestType1ROOT for ${strInputFile} ";		
		} else {
			log.info("**********************************************");
			log.info("** SUCCESS: TestType1ROOT for ${strInputFile} ");
			log.info("**********************************************");			
		}
		
		return bFailure;
	}	
	
	
	public boolean TestType2(Object testRunner,Object context,String strInputFile) {
		
	/*
	POST ROOT
	POST XPATH
	GET XPATH
	GET ROOT
	*/
		
		def project = testRunner.testCase.testSuite.project
		def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
		def projectPath = groovyUtils.projectPath	
		
		def BaseURL = project.getPropertyValue("BaseURL")
		def DataCustodianContext = project.getPropertyValue("DataCustodianContext")
		def ThirdPartyContext = project.getPropertyValue("ThirdPartyContext")
		def linkPrefixForReplace = project.getPropertyValue("linkPrefixForReplace")
		
		def ServiceEndpointDataCustodian = BaseURL + "/" + DataCustodianContext
		def ServiceEndpointThirdParty = BaseURL + "/" + ThirdPartyContext;
		
		String strBaseEndpoint = ServiceEndpointDataCustodian + "/";
		String strSourceDataFile = projectPath + "/../data/testSets/" + strInputFile;
	
		boolean bFailure = false;
	
		//log.info("**********************************************");
		//log.info("** Processing: " + strSourceDataFile);
		//log.info("**********************************************");
	
	
		bFailure = bFailure | TestPostROOT(true,strBaseEndpoint,linkPrefixForReplace,strSourceDataFile);
	
		bFailure = bFailure | TestPostXPATH(true,strBaseEndpoint,linkPrefixForReplace,strSourceDataFile);
		
		bFailure = bFailure | TestGetXPATH(true,strBaseEndpoint,linkPrefixForReplace,strSourceDataFile)
	
		bFailure = bFailure | TestGetROOT(true,strBaseEndpoint,linkPrefixForReplace,strSourceDataFile);	
		
		return bFailure;
	}
}

///////////////////////////////
// 
//	Main Body
//
///////////////////////////////
	def project = testRunner.testCase.testSuite.project
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
	def projectPath = groovyUtils.projectPath	
	
	def BaseURL = project.getPropertyValue("BaseURL")
	def DataCustodianContext = project.getPropertyValue("DataCustodianContext")
	def ThirdPartyContext = project.getPropertyValue("ThirdPartyContext")
	def linkPrefixForReplace = project.getPropertyValue("linkPrefixForReplace")
	
	def ServiceEndpointDataCustodian = BaseURL + "/" + DataCustodianContext
	def ServiceEndpointThirdParty = BaseURL + "/" + ThirdPartyContext;
	
	String strBaseEndpoint = ServiceEndpointDataCustodian + "/";
	String resourceTestFileName = testRunner.testCase.testSuite.project.testSuites["OpenEspiIntegrationTests"].testCases["Library"].getPropertyValue("resourceTestFileName");
	String resourceOutputFileName = testRunner.testCase.testSuite.project.testSuites["OpenEspiIntegrationTests"].testCases["Library"].getPropertyValue("resourceOutputFileName");
	String strResource = testRunner.testCase.testSuite.project.testSuites["OpenEspiIntegrationTests"].testCases["Library"].getPropertyValue("resource");
	String testShouldPass = testRunner.testCase.testSuite.project.testSuites["OpenEspiIntegrationTests"].testCases["Library"].getPropertyValue("testShouldPass");
	String testType = testRunner.testCase.testSuite.project.testSuites["OpenEspiIntegrationTests"].testCases["Library"].getPropertyValue("testType");
	String strSourceDataFile = projectPath + "/../data/testSets/" + resourceTestFileName;
	String strOutputDataFile = projectPath + "/../data/" + resourceOutputFileName;

	boolean bShouldPass = true;

	testShouldPass = testShouldPass.toUpperCase();
	
	if(testShouldPass.equals("FALSE")) {
		bShouldPass = false;
	}

	boolean bFailure = false;

	ResourceTester resourceTester = new ResourceTester(log);

	try{	
	
		if(testType.equals("TestType1ROOT")) {
			
			bFailure = resourceTester.TestType1ROOT(testRunner,context,resourceTestFileName);
			
		} else  if(testType.equals("TestType1XPATH")) {
			
			bFailure = resourceTester.TestType1XPATH(testRunner,context,resourceTestFileName);
			
		} else if(testType.equals("testType2")) {
			
			bFailure = resourceTester.TestType2(testRunner,context,resourceTestFileName);
			
		} else if(testType.equals("PostXPATH")) {
			
			bFailure = resourceTester.TestPostXPATH(bShouldPass,false,strBaseEndpoint,linkPrefixForReplace,strSourceDataFile);
			
		} else if(testType.equals("PostROOT")) {
			
			bFailure = resourceTester.TestPostROOT(bShouldPass,false,strBaseEndpoint,linkPrefixForReplace,strSourceDataFile);
			
		} else if(testType.equals("PutROOT")) {
			
			bFailure = resourceTester.TestPutROOT(bShouldPass,false,strBaseEndpoint,linkPrefixForReplace,strSourceDataFile);
			
		} else if(testType.equals("PutXPATH")) {
			
			bFailure = resourceTester.TestPutXPATH(bShouldPass,false,strBaseEndpoint,linkPrefixForReplace,strSourceDataFile);
			
		} else if(testType.equals("GetXPATH")) {
			
			bFailure = resourceTester.TestGetXPATH(bShouldPass,false,strBaseEndpoint,linkPrefixForReplace,strSourceDataFile)
			
		} else if(testType.equals("GetROOT")) {
			
			bFailure = resourceTester.TestGetROOT(bShouldPass,false,strBaseEndpoint,linkPrefixForReplace,strSourceDataFile);
				
		} else if(testType.equals("GetSaveResponse")) {
			
			bFailure = resourceTester.TestGetSaveResponse(bShouldPass,false,strBaseEndpoint,strResource,strOutputDataFile);
				
		} else if(testType.equals("DeleteXPATH")) {
			
			bFailure = resourceTester.TestDeleteXPATH(bShouldPass,false,strBaseEndpoint,linkPrefixForReplace,strSourceDataFile);	
					
		} else if(testType.equals("DeleteROOT")) {
			
			bFailure = resourceTester.TestDeleteROOT(bShouldPass,false,strBaseEndpoint,linkPrefixForReplace,strSourceDataFile);	
			
		} else if(testType.equals("GetROOTAndLinks")) {
			
			bFailure = resourceTester.TestGetROOTAndLinks(bShouldPass,false,strBaseEndpoint,linkPrefixForReplace,strSourceDataFile);
				
		}
		
	} catch(java.io.FileNotFoundException e) {
		resourceTester._strError = "java.io.FileNotFoundException";
		bFailure = true;
	}

	if(bFailure) {
		log.error("**********************************************");		
		testRunner.fail("Failed test '${testType}' processing resource:" + resourceTestFileName + " With error: " + resourceTester._strError)
		log.error("**********************************************");		
		testRunner.testCase.testSuite.project.testSuites["OpenEspiIntegrationTests"].testCases["Library"].setPropertyValue("testFailed", "TRUE")

	} else {
		
		testRunner.testCase.testSuite.project.testSuites["OpenEspiIntegrationTests"].testCases["Library"].setPropertyValue("testFailed", "FALSE")
	}
	
	return;


	]]></script></con:config></con:testStep><con:testStep type="groovy" name="curlUpload"><con:settings/><con:config><script>def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath

def BaseURL = project.getPropertyValue("BaseURL")
def DataCustodianContext = project.getPropertyValue("DataCustodianContext")




tc = testRunner.testCase.testSuite.project.testSuites["OpenEspiIntegrationTests"].testCases["Library"]
def UploadFile=projectPath + "/../data/" + tc.getPropertyValue("uploadFile")
def retailCustomerId = tc.getPropertyValue("retailCustomerId")

def ServiceEndpointDataCustodian = BaseURL + "/" + DataCustodianContext

def cmdPost = projectPath + "/etc/doCurlUpload.sh ${UploadFile} ${ServiceEndpointDataCustodian}/espi/1_1/resource/Batch/RetailCustomer/${retailCustomerId}/UsagePoint";

log.info("exec: " + cmdPost);

def doPost = cmdPost.execute()

doPost.waitFor()

if(doPost.exitValue()!=0) {
	log.error "return code: ${ doPost.exitValue()}"
	log.error "stderr: ${doPost.err.text}"
	log.error "stdout: ${doPost.in.text}"
} else {
	log.info "result: ${doPost.err.text}"
}</script></con:config></con:testStep><con:properties><con:property><con:name>resourceTestFileName</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>testType</con:name><con:value>GetSaveResponse</con:value></con:property><con:property><con:name>testShouldPass</con:name><con:value>TRUE</con:value></con:property><con:property><con:name>testFailed</con:name><con:value>FALSE</con:value></con:property><con:property><con:name>uploadFile</con:name><con:value>Meter_Data_01-06-2014_01-12-2014.xml</con:value></con:property><con:property><con:name>resourceOutputFileName</con:name><con:value>test_subscription.xml</con:value></con:property><con:property><con:name>resource</con:name><con:value>http://localhost:8080/DataCustodian/espi/1_1/resource/Batch/Subscription/1</con:value></con:property><con:property><con:name>retailCustomerId</con:name><con:value>1</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="50000" name="ResourceTests" searchProperties="true" id="a536dcbe-f106-47e2-9c97-93c2d78cffa9" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@max_rows">20000</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@errors_only">false</con:setting></con:settings><con:testStep type="groovy" name="InitializeDataSets"><con:settings/><con:config><script><![CDATA[import org.xml.sax.SAXException;
import org.w3c.dom.*;
import javax.xml.parsers.*;
import javax.xml.transform.stream.*;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.Transformer;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.TransformerFactory;
import java.io.IOException;

public class ConvType {
    public static final int INT_VALUE = 0;
    public static final int ENTRY = 1;
    public static final int ROOT_ENTRY= 2;
   // public static final int ENTRY_FEED = 3;
   // public static final int ROOT_ENTRY_FEED = 4;    
}

class XMLHelper {
	
	private static boolean _skipNL;

	private static String _baseEndpoint;
	private static int _retailCustomerId;
	private static int _usagePointId;
	private static int _localTimeParametersID;
	private static int _ElectricPowerUsageSummaryId;
	private static int _ElectricPowerQualitySummaryId;
	private static int _meterReadingId;
	private static int _readingTypeId;
	private static int _intervalBlockId;
	private static int _resourceId;


	public static ConvertToEntry(String strEndpoint,Element feed,String StoragePath,Object log) {
		
		NodeList list = feed.getElementsByTagName("entry");


		XMLHelper._baseEndpoint = strEndpoint;
		XMLHelper._retailCustomerId = 1;
		XMLHelper._usagePointId = 1;
		XMLHelper._localTimeParametersID = 1;
		XMLHelper._ElectricPowerUsageSummaryId = 1;
		XMLHelper._ElectricPowerQualitySummaryId = 1;		
		XMLHelper._meterReadingId = 1;
		XMLHelper._readingTypeId = 1;
		XMLHelper._intervalBlockId = 1;
		XMLHelper._resourceId = 1;
		
		for(int i = 0 ; i < list.getLength();i++) {
			
			Element entry = (Element) list.item(i);
			NodeList content = entry.getElementsByTagName("content");
			NodeList contentChildren = content.item(0).getChildNodes();

			String strEntryName = "";
			
			for(int j = 0 ; j < contentChildren.getLength();j++) {
				
				if(contentChildren.item(j).getNodeType()==Node.ELEMENT_NODE) {
					
					Element espi = (Element) contentChildren.item(j);
					log.info("Processing node: " + espi.getNodeName());
					strEntryName = espi.getNodeName();
				}
			}
			
			String strFileName = "entry_" + strEntryName + "_" + i + ".xml";

			def file = new PrintWriter (StoragePath + strFileName)

			file.print("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
			
			Convert(list.item(i),file,ConvType.ENTRY,strEntryName);

			file.flush();
			file.close();
		}
		
	}

	public static ConvertToRootEntry(String strEndpoint,Element feed,String StoragePath,Object log) {
		
		NodeList list = feed.getElementsByTagName("entry");


		XMLHelper._baseEndpoint = strEndpoint;
		XMLHelper._retailCustomerId = 1;
		XMLHelper._usagePointId = 1;
		XMLHelper._localTimeParametersID = 1;
		XMLHelper._ElectricPowerUsageSummaryId = 1;
		XMLHelper._ElectricPowerQualitySummaryId = 1;		
		XMLHelper._meterReadingId = 1;
		XMLHelper._readingTypeId = 1;
		XMLHelper._intervalBlockId = 1;
		XMLHelper._resourceId = 1;
		
		for(int i = 0 ; i < list.getLength();i++) {
			
			Element entry = (Element) list.item(i);
			NodeList content = entry.getElementsByTagName("content");
			NodeList contentChildren = content.item(0).getChildNodes();

			String strEntryName = "";
			
			for(int j = 0 ; j < contentChildren.getLength();j++) {
				if(contentChildren.item(j).getNodeType()==Node.ELEMENT_NODE)
				{
					Element espi = (Element) contentChildren.item(j);
					log.info("Processing node: " + espi.getNodeName());
					strEntryName = espi.getNodeName();
				}
			}
			
			String strFileName = "root_entry_" + strEntryName + "_" + i + ".xml";

			def file = new PrintWriter (StoragePath + strFileName)

			file.print("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
			
			Convert(list.item(i),file,ConvType.ROOT_ENTRY,strEntryName);

			file.flush();
			file.close();
		}
		
	}
	
	public static Convert(Node rootNode,PrintWriter file,int convType,String strEntryName) {
		
	    String tab = "";
	    _skipNL = false;
	    boolean bHasContents = false;
	    boolean bIsESPI = false;
	    
	    PrivConvert(rootNode, file,tab,bHasContents,bIsESPI,convType,strEntryName);
	    
	}

	private static boolean listAllAttributes(Element element,PrintWriter file,int convType,String strEntryName) {
		
		boolean bHasAttribs = false;

		NamedNodeMap attributes = element.getAttributes();
		
		int numAttrs = attributes.getLength();

		for (int i = 0; i < numAttrs; i++) 
		{
			Attr attr = (Attr) attributes.item(i);
			
			String attrName = attr.getNodeName();
			
			if(!attrName.equals("xmlns"))
			{
				String attrValue = attr.getNodeValue();

				if(attrName.equals("href"))
				{
					if(convType==ConvType.ENTRY)
					{
						attrValue = attrValue.replaceAll("/RetailCustomer\\/[0-9A-Fa-f]{1,20}","/RetailCustomer/" + _retailCustomerId);
						attrValue = attrValue.replaceAll("/UsagePoint\\/[0-9A-Fa-f]{1,20}","/UsagePoint/" + _usagePointId);
						attrValue = attrValue.replaceAll("/MeterReading\\/[0-9A-Fa-f]{1,20}","/MeterReading/" + _meterReadingId);
						attrValue = attrValue.replaceAll("/ReadingType\\/[0-9A-Fa-f]{1,20}","/ReadingType/" + _readingTypeId);
						attrValue = attrValue.replaceAll("/IntervalBlock\\/[0-9A-Fa-f]{1,20}","/IntervalBlock/" + _intervalBlockId);
						attrValue = attrValue.replaceAll("/resource\\/[0-9A-Fa-f]{1,20}","/resource/" + _resourceId);
						attrValue = attrValue.replaceAll("/ElectricPowerUsageSummary\\/[0-9A-Fa-f]{1,20}","/ElectricPowerUsageSummary/" + _ElectricPowerUsageSummaryId);
						attrValue = attrValue.replaceAll("/ElectricPowerQualitySummary\\/[0-9A-Fa-f]{1,20}","/ElectricPowerQualitySummary/" + _ElectricPowerQualitySummaryId);
						attrValue = attrValue.replaceAll("/LocalTimeParameters\\/[0-9A-Fa-f]{1,20}","/LocalTimeParameters/" + _localTimeParametersID);
						
					}
					else if(convType==ConvType.ROOT_ENTRY)
					{
						if(strEntryName.equals("IntervalBlock")) {

							attrValue = attrValue.replaceAll("/RetailCustomer\\/[0-9A-Fa-f]{1,20}/UsagePoint\\/[0-9A-Fa-f]{1,20}/MeterReading\\/[0-9A-Fa-f]{1,20}","");						
							attrValue = attrValue.replaceAll("/IntervalBlock\\/[0-9A-Fa-f]{1,20}","/IntervalBlock/" + _intervalBlockId);
						}
						else if(strEntryName.equals("UsagePoint")) {
							
							attrValue = attrValue.replaceAll("/RetailCustomer\\/[0-9A-Fa-f]{1,20}","");
							attrValue = attrValue.replaceAll("/UsagePoint\\/[0-9A-Fa-f]{1,20}","/UsagePoint/" + _usagePointId);
						}
						else if(strEntryName.equals("MeterReading")) {

							attrValue = attrValue.replaceAll("/RetailCustomer\\/[0-9A-Fa-f]{1,20}/UsagePoint\\/[0-9A-Fa-f]{1,20}","");
							attrValue = attrValue.replaceAll("/MeterReading\\/[0-9A-Fa-f]{1,20}","/MeterReading/" + _meterReadingId);
						}
						else if(strEntryName.equals("ElectricPowerUsageSummary")) {
							
							attrValue = attrValue.replaceAll("/RetailCustomer\\/[0-9A-Fa-f]{1,20}/UsagePoint\\/[0-9A-Fa-f]{1,20}","");
							attrValue = attrValue.replaceAll("/ElectricPowerUsageSummary\\/[0-9A-Fa-f]{1,20}","/ElectricPowerUsageSummary/" + _ElectricPowerUsageSummaryId);
								
						}
						else if(strEntryName.equals("ElectricPowerQualitySummary")) {
							
							attrValue = attrValue.replaceAll("/RetailCustomer\\/[0-9A-Fa-f]{1,20}/UsagePoint\\/[0-9A-Fa-f]{1,20}","");
							attrValue = attrValue.replaceAll("/ElectricPowerQualitySummary\\/[0-9A-Fa-f]{1,20}","/ElectricPowerQualitySummary/" + _ElectricPowerQualitySummaryId);					
						}
						else if(strEntryName.equals("LocalTimeParameters")) {
							
							attrValue = attrValue.replaceAll("/RetailCustomer\\/[0-9A-Fa-f]{1,20}/UsagePoint\\/[0-9A-Fa-f]{1,20}","");
							attrValue = attrValue.replaceAll("/LocalTimeParameters\\/[0-9A-Fa-f]{1,20}","/LocalTimeParameters/" + _localTimeParametersID);					
						}						
						else
						{
							
							attrValue = attrValue.replaceAll("/RetailCustomer\\/[0-9A-Fa-f]{1,20}","/RetailCustomer/" + _retailCustomerId);
							attrValue = attrValue.replaceAll("/UsagePoint\\/[0-9A-Fa-f]{1,20}","/UsagePoint/" + _usagePointId);
							attrValue = attrValue.replaceAll("/LocalTimeParameters\\/[0-9A-Fa-f]{1,20}","/LocalTimeParameters/" + _localTimeParametersID);							
							attrValue = attrValue.replaceAll("/MeterReading\\/[0-9A-Fa-f]{1,20}","/MeterReading/" + _meterReadingId);
							attrValue = attrValue.replaceAll("/ReadingType\\/[0-9A-Fa-f]{1,20}","/ReadingType/" + _readingTypeId);
							attrValue = attrValue.replaceAll("/IntervalBlock\\/[0-9A-Fa-f]{1,20}","/IntervalBlock/" + _intervalBlockId);
							attrValue = attrValue.replaceAll("/resource\\/[0-9A-Fa-f]{1,20}","/resource/" + _resourceId);							
						}					
					}

					attrValue = _baseEndpoint + attrValue;
				}
				
				file.print(" " + attrName + "=\"" + attrValue + "\"");
				
				bHasAttribs = true;
			}
		}
		
		return bHasAttribs;
		
	}
	
	private static PrivConvert(Node rootNode,PrintWriter file, String tab,boolean bHasContents,boolean bIsESPI,int convType,String strEntryName) {
		
		if(rootNode.getNodeType()==Node.ELEMENT_NODE) {

			String strNodeName = rootNode.getNodeName();

			if(bIsESPI)
			{
				strNodeName = "espi:" + strNodeName;
			}
			else
			{
				strNodeName = "ns3:" + strNodeName;	
			}
			
			file.print("\n" + tab + "<" + strNodeName);	

			if(strNodeName.equals("ns3:entry"))
			{
				file.print(" xmlns:espi=\"http://naesb.org/espi\" xmlns:ns3=\"http://www.w3.org/2005/Atom\"");
			}
			
			listAllAttributes(rootNode,file,convType,strEntryName);
		}

		if(rootNode.getNodeName().equals("content"))
		{
			bIsESPI = true;
		}

		if(rootNode.getNodeName().equals("IntervalBlock"))
		{
			_intervalBlockId++;
		}
	    
		NodeList nl = rootNode.getChildNodes();
		
		if(nl.getLength()>0) {

			bHasContents = true;
			file.print(">");
			for (int i = 0; i < nl.getLength(); i++) {
				PrivConvert(nl.item(i),file, tab + "   ",bHasContents,bIsESPI,convType,strEntryName);
			}
			
		} else {

			if(rootNode.getNodeType()!=Node.COMMENT_NODE){
				if(rootNode.getNodeValue()!=null) {
					
					file.print(rootNode.getNodeValue().trim());
		
					if(rootNode.getNodeValue().trim() !="") {
						bHasContents = true;
						_skipNL = true;
					} else {
						_skipNL = false;
					}
				} else {
					
					bHasContents = false;
					_skipNL = true;
				}				
			}

		}
	    
		if(rootNode.getNodeType()==Node.ELEMENT_NODE){
			
			if(!_skipNL) {
				file.print("\n" + tab);
			}
			
			_skipNL = false;
			
			if(bHasContents) {

				String strNodeName = rootNode.getNodeName();

				if(strNodeName.equals("content"))
				{
					bIsESPI = false;
				}
	
				if(bIsESPI)
				{
					strNodeName = "espi:" + strNodeName;
				}
				else
				{
					strNodeName = "ns3:" + strNodeName;	
				}	
				
				file.print("</"+strNodeName+">");
				
			} else {
				file.print("/>");
			}
		}
	}
}

///////////////////////////////
// 
//	Main Body
//
///////////////////////////////

	def project = testRunner.testCase.testSuite.project;
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
	def projectPath = groovyUtils.projectPath	
	
	def BaseURL = project.getPropertyValue("BaseURL")
	def DataCustodianContext = project.getPropertyValue("DataCustodianContext")
	def ThirdPartyContext = project.getPropertyValue("ThirdPartyContext")
	def ServiceEndpointDataCustodian = BaseURL + "/" + DataCustodianContext
	def ServiceEndpointThirdParty = BaseURL + "/" + ThirdPartyContext;
	
	def TestFile = projectPath + "/../data/" + project.getPropertyValue("TestFile");
	def String StoragePath = projectPath + "/../data/testSets/";

	//ServiceEndpointDataCustodian = ServiceEndpointDataCustodian.replace("http:","https:");
	
	DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
	DocumentBuilder db = dbf.newDocumentBuilder();	
	
	try {
			
		Document doc = db.parse(TestFile);
		Element feed = doc.getDocumentElement();
		
		XMLHelper.ConvertToEntry(ServiceEndpointDataCustodian,feed,StoragePath,log);
		//XMLHelper.ConvertToRootEntry(ServiceEndpointDataCustodian,feed,StoragePath,log);
		
		
	}
	catch(ParserConfigurationException pce) {
		//pce.printStackTrace();
		log.error("Parser configureation exception occurred");
	}
	catch(SAXException se) {
		//se.printStackTrace();
		log.error("SAX exception occurred");
	}
	catch(IOException ioe) {
		//ioe.printStackTrace();
		log.error("IO exception occurred");
	}
	
	return;]]></script></con:config></con:testStep><con:testStep type="groovy" name="testType1_RestVerbs after XPATH Posts"><con:settings/><con:config><script>import org.openqa.selenium.*;


public boolean ServiceTest(String strTestType,boolean bShouldPass,String strFileName)
{
	tc = testRunner.testCase.testSuite.project.testSuites["OpenEspiIntegrationTests"].testCases["Library"]
	tc.setPropertyValue("resourceTestFileName", strFileName)
	tc.setPropertyValue("testType", strTestType)
	
	if(bShouldPass) {
		tc.setPropertyValue("testShouldPass", "TRUE")
	}
	else {
		tc.setPropertyValue("testShouldPass", "FALSE")
	}
	
	testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['OpenEspiIntegrationTests'].testCases['Library'].testSteps['resourceTests']);

	String strResult = tc.getPropertyValue("testFailed");	

	boolean bResult = false;
	
	if(strResult.equals("TRUE")) {
		bResult = true;
	}

	return bResult;
}

///////////////////////////////
// 
//	Main Body
//
///////////////////////////////

	//*********************************************************
	log.info("Init DB");
	//*********************************************************
	// reset DB : run library groovy script
	testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['OpenEspiIntegrationTests'].testCases['Library'].testSteps['resetDB']);

	boolean bTestFailed =false;
	
	bTestFailed = ServiceTest("PostXPATH",true,"entry_LocalTimeParameters_1.xml");
	bTestFailed = ServiceTest("PostXPATH",true,"entry_ReadingType_3.xml");
	
	bTestFailed = ServiceTest("PostXPATH",true,"entry_UsagePoint_0.xml");
	bTestFailed = ServiceTest("PostXPATH",true,"entry_MeterReading_2.xml");	
	bTestFailed = ServiceTest("PostXPATH",true,"entry_IntervalBlock_4.xml");
	bTestFailed = ServiceTest("PostXPATH",true,"entry_ElectricPowerUsageSummary_18.xml");
	bTestFailed = ServiceTest("PostXPATH",true,"entry_ElectricPowerQualitySummary_19.xml");

	bTestFailed = ServiceTest("TestType1XPATH",true,"entry_ElectricPowerQualitySummary_19.xml");
	bTestFailed = ServiceTest("TestType1XPATH",true,"entry_ElectricPowerUsageSummary_18.xml");
	bTestFailed = ServiceTest("TestType1XPATH",true,"entry_IntervalBlock_4.xml");
	bTestFailed = ServiceTest("TestType1XPATH",true,"entry_MeterReading_2.xml");
	bTestFailed = ServiceTest("TestType1XPATH",true,"entry_UsagePoint_0.xml");

	bTestFailed = ServiceTest("TestType1XPATH",true,"entry_LocalTimeParameters_1.xml");
	bTestFailed = ServiceTest("TestType1XPATH",true,"entry_ReadingType_3.xml");


	return;
</script></con:config></con:testStep><con:testStep type="groovy" name="testType1_RestVerbs after ROOT Posts"><con:settings/><con:config><script>import org.openqa.selenium.*;


public boolean ServiceTest(String strTestType,boolean bShouldPass,String strFileName)
{
	tc = testRunner.testCase.testSuite.project.testSuites["OpenEspiIntegrationTests"].testCases["Library"]
	tc.setPropertyValue("resourceTestFileName", strFileName)
	tc.setPropertyValue("testType", strTestType)
	
	if(bShouldPass) {
		tc.setPropertyValue("testShouldPass", "TRUE")
	}
	else {
		tc.setPropertyValue("testShouldPass", "FALSE")
	}
	
	testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['OpenEspiIntegrationTests'].testCases['Library'].testSteps['resourceTests']);

	String strResult = tc.getPropertyValue("testFailed");	

	boolean bResult = false;
	
	if(strResult.equals("TRUE")) {
		bResult = true;
	}

	return bResult;
}

///////////////////////////////
// 
//	Main Body
//
///////////////////////////////

	//*********************************************************
	log.info("Init DB");
	//*********************************************************
	// reset DB : run library groovy script
	testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['OpenEspiIntegrationTests'].testCases['Library'].testSteps['resetDB']);

	bTestFailed = ServiceTest("PostROOT",true,"entry_LocalTimeParameters_1.xml");
	bTestFailed = ServiceTest("PostROOT",true,"entry_ReadingType_3.xml");
	
	bTestFailed = ServiceTest("PostROOT",true,"entry_UsagePoint_0.xml");
	bTestFailed = ServiceTest("PostROOT",true,"entry_MeterReading_2.xml");	
	bTestFailed = ServiceTest("PostROOT",true,"entry_IntervalBlock_4.xml");
	bTestFailed = ServiceTest("PostROOT",true,"entry_ElectricPowerUsageSummary_18.xml");
	bTestFailed = ServiceTest("PostROOT",true,"entry_ElectricPowerQualitySummary_19.xml");

	bTestFailed = ServiceTest("TestType1ROOT",true,"entry_ElectricPowerQualitySummary_19.xml");
	bTestFailed = ServiceTest("TestType1ROOT",true,"entry_ElectricPowerUsageSummary_18.xml");
	bTestFailed = ServiceTest("TestType1ROOT",true,"entry_IntervalBlock_4.xml");
	bTestFailed = ServiceTest("TestType1ROOT",true,"entry_MeterReading_2.xml");
	bTestFailed = ServiceTest("TestType1ROOT",true,"entry_UsagePoint_0.xml");

	bTestFailed = ServiceTest("TestType1ROOT",true,"entry_LocalTimeParameters_1.xml");
	bTestFailed = ServiceTest("TestType1ROOT",true,"entry_ReadingType_3.xml");	

	return;
</script></con:config></con:testStep><con:testStep type="groovy" name="testType2_embeddedLinkTests"><con:settings/><con:config><script>import org.openqa.selenium.*;



public boolean ServiceTest(String strTestType,boolean bShouldPass,String strFileName)
{
	tc = testRunner.testCase.testSuite.project.testSuites["OpenEspiIntegrationTests"].testCases["Library"]
	tc.setPropertyValue("resourceTestFileName", strFileName)
	tc.setPropertyValue("testType", strTestType)
	
	if(bShouldPass) {
		tc.setPropertyValue("testShouldPass", "TRUE")
	}
	else {
		tc.setPropertyValue("testShouldPass", "FALSE")
	}
	
	testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['OpenEspiIntegrationTests'].testCases['Library'].testSteps['resourceTests']);

	String strResult = tc.getPropertyValue("testFailed");	

	boolean bResult = false;
	
	if(strResult.equals("TRUE")) {
		bResult = true;
	}

	return bResult;
}


/*
def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath

def BaseURL = project.getPropertyValue("BaseURL")
def DataCustodianContext = project.getPropertyValue("DataCustodianContext")
def ThirdPartyContext = project.getPropertyValue("ThirdPartyContext")
def ServiceEndpointDataCustodian = BaseURL + "/" + DataCustodianContext
def ServiceEndpointThirdParty = BaseURL + "/" + ThirdPartyContext;
def TestManager=project.getPropertyValue("TestManager")
def TestManagerPW=project.getPropertyValue("TestManagerPW")
def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")
def TestFile=projectPath + "/../data/" + project.getPropertyValue("TestFile")
def usagePointUUID1 = project.getPropertyValue("usagePointUUID1");
def usagePointDescription1 = project.getPropertyValue("usagePointDescription1");

Object driver = this.class.classLoader.parseClass(new File(projectPath + "/etc/BaseStepUtils.groovy")).GetObj(BaseURL,DataCustodianContext,ThirdPartyContext,log);
*/

///////////////////////////////
// 
//	Main Body
//
///////////////////////////////

	//*********************************************************
	log.info("Init DB");
	//*********************************************************
	// reset DB : run library groovy script
	testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['OpenEspiIntegrationTests'].testCases['Library'].testSteps['resetDB']);

	log.info("*********************************************************");
	log.info("upload usage data using curl");
	log.info("*********************************************************");
	// reset DB : run library groovy script

	tc = testRunner.testCase.testSuite.project.testSuites["OpenEspiIntegrationTests"].testCases["Library"]
	tc.setPropertyValue("uploadFile", "test_usage_data.xml")	
	tc.setPropertyValue("retailCustomerId","1")
	testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['OpenEspiIntegrationTests'].testCases['Library'].testSteps['curlUpload']);
	
/*
	try{
		// Browser Init
		driver.Before();
		
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		driver.logStep("Link Usage Point to Retail Customer");
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		driver.login(ServiceEndpointDataCustodian,TestManager,TestManagerPW);
		driver.assertUrlEndsWith("/" + DataCustodianContext + "/custodian/home");
		
		// add usage point linkage
		driver.findElement(By.partialLinkText("Customer List")).click();
		driver.findElement(By.partialLinkText(TestRetailCustomer)).click();	
		driver.findElement(By.partialLinkText("Add Usage")).click();	
		driver.findElement(By.id("UUID")).clear();
		driver.findElement(By.id("UUID")).sendKeys(usagePointUUID1);
		driver.findElement(By.id("description")).clear();
		driver.findElement(By.id("description")).sendKeys(usagePointDescription1);
		driver.findElement(By.name("create")).click();
	
		// upload usage point file
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		driver.logStep("upload usage point file");
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	
		driver.findElement(By.partialLinkText("Upload")).click();	
		driver.findElement(By.name("file")).sendKeys(TestFile);
			
		driver.findElement(By.name("upload")).click();	
		driver.assertDoesNotContain("Unable to process file");
		
		driver.logout(ServiceEndpointDataCustodian);
	
	} catch(Exception e) {
		testRunner.fail(driver.getErrorString())
	}
	
	//Close the browser
	driver.quit();
*/

	log.info("*********************************************************");
	log.info("GETS and get links");
	log.info("*********************************************************");
	bTestFailed = ServiceTest("GetROOTAndLinks",true,"entry_UsagePoint_0.xml");
	bTestFailed = ServiceTest("GetROOTAndLinks",true,"entry_LocalTimeParameters_1.xml");
	bTestFailed = ServiceTest("GetROOTAndLinks",true,"entry_MeterReading_2.xml");
	bTestFailed = ServiceTest("GetROOTAndLinks",true,"entry_ReadingType_3.xml");
	bTestFailed = ServiceTest("GetROOTAndLinks",true,"entry_ElectricPowerUsageSummary_18.xml");
	bTestFailed = ServiceTest("GetROOTAndLinks",true,"entry_ElectricPowerQualitySummary_19.xml");
	bTestFailed = ServiceTest("GetROOTAndLinks",true,"entry_IntervalBlock_4.xml");

	return;
</script></con:config></con:testStep><con:testStep type="groovy" name="testType3_SequentialUploads"><con:settings/><con:config><script>import org.xml.sax.SAXException;
import org.w3c.dom.*;
import javax.xml.parsers.*;
import javax.xml.xpath.*;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import javax.xml.namespace.NamespaceContext;


public class SimpleNamespaceContext implements NamespaceContext {

    private final Map&lt;String, String> PREF_MAP = new HashMap&lt;String, String>();

    public SimpleNamespaceContext(final Map&lt;String, String> prefMap) {
        PREF_MAP.putAll(prefMap);       
    }

    public String getNamespaceURI(String prefix) {
        return PREF_MAP.get(prefix);
    }

    public String getPrefix(String uri) {
        throw new UnsupportedOperationException();
    }

    public Iterator getPrefixes(String uri) {
        throw new UnsupportedOperationException();
    }

}

public boolean ServiceTest(String strTestType,boolean bShouldPass,String strFileName,String strResource,String strOutputFile)
{
	tc = testRunner.testCase.testSuite.project.testSuites["OpenEspiIntegrationTests"].testCases["Library"]
	tc.setPropertyValue("resourceTestFileName", strFileName)
	tc.setPropertyValue("testType", strTestType)
	tc.setPropertyValue("resourceOutputFileName", strOutputFile)
	tc.setPropertyValue("resource", strResource)
	
	if(bShouldPass) {
		tc.setPropertyValue("testShouldPass", "TRUE")
	}
	else {
		tc.setPropertyValue("testShouldPass", "FALSE")
	}
	
	testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['OpenEspiIntegrationTests'].testCases['Library'].testSteps['resourceTests']);

	String strResult = tc.getPropertyValue("testFailed");	

	boolean bResult = false;
	
	if(strResult.equals("TRUE")) {
		bResult = true;
	}

	return bResult;
}


///////////////////////////////
// 
//	Main Body
//
///////////////////////////////

def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath


	DocumentBuilderFactory domFactory = DocumentBuilderFactory.newInstance();
	domFactory.setNamespaceAware(true); 
	DocumentBuilder builder = domFactory.newDocumentBuilder();

	XPath xpath = XPathFactory.newInstance().newXPath();
	
	// add namespaces
	HashMap&lt;String, String> prefMap = new HashMap&lt;String, String>() {{
	    put("espi", "http://naesb.org/espi");
	    put("ns3", "http://www.w3.org/2005/Atom");
	}};
	
	SimpleNamespaceContext namespaces = new SimpleNamespaceContext(prefMap);
	
	xpath.setNamespaceContext(namespaces);	

	//*********************************************************
	log.info("Init DB");
	//*********************************************************
	// reset DB : run library groovy script
	testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['OpenEspiIntegrationTests'].testCases['Library'].testSteps['resetDB']);

	log.info("*********************************************************");
	log.info("upload usage data 1 using curl");
	log.info("*********************************************************");
	tc = testRunner.testCase.testSuite.project.testSuites["OpenEspiIntegrationTests"].testCases["Library"];
	tc.setPropertyValue("uploadFile", "Meter_Data_12-30-2013_01-05-2014.xml");
	testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['OpenEspiIntegrationTests'].testCases['Library'].testSteps['curlUpload']);

	boolean bTestFailed = ServiceTest("GetSaveResponse",true,null,"espi/1_1/resource/IntervalBlock","test_get_block.xml");	
	String strOutputDataFile = projectPath + "/../data/" + "test_get_block.xml";
	String strExpr = "";
	
	if(!bTestFailed){

		Document docResponse = builder.parse(strOutputDataFile);

		strExpr = "/ns3:feed/ns3:entry";
		XPathExpression expr = xpath.compile(strExpr);
		NodeList nlNodes = (NodeList) expr.evaluate(docResponse,XPathConstants.NODESET);

		log.info("Retreived " + nlNodes.getLength() + " Entries");
		if(nlNodes.getLength()!=2)
		{
			log.error("Response did not contain the correct number of Entries.");
		}

		strExpr = "/ns3:feed/ns3:entry/ns3:content/espi:IntervalBlock";
		expr = xpath.compile(strExpr);
		nlNodes = (NodeList) expr.evaluate(docResponse,XPathConstants.NODESET);

		log.info("Retreived " + nlNodes.getLength() + " IntervalBlocks");	
		if(nlNodes.getLength()!=2)
		{
			log.error("Response did not contain the correct number of IntervalBlocks.");
		}		

		strExpr = "/ns3:feed/ns3:entry/ns3:content/espi:IntervalBlock/espi:IntervalReading";
		expr = xpath.compile(strExpr);
		nlNodes = (NodeList) expr.evaluate(docResponse,XPathConstants.NODESET);

		log.info("Retreived " + nlNodes.getLength() + " IntervalReadings");
		if(nlNodes.getLength()!=20160)
		{
			log.error("Response did not contain the correct number of IntervalReadings.");
		}	

		try{
 
	    		File file = new File(strOutputDataFile);
	 
	    		file.delete();
 
	    	} catch(Exception e) {
	 
	    		log.error("Error deleing temp file:" + e.getMessage());
	    	}
				
	}
	else
	{
		return;
	}

	log.info("*********************************************************");
	log.info("upload usage data 2 using curl");
	log.info("*********************************************************");
	tc = testRunner.testCase.testSuite.project.testSuites["OpenEspiIntegrationTests"].testCases["Library"];
	tc.setPropertyValue("uploadFile", "Meter_Data_01-06-2014_01-12-2014.xml");
	testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['OpenEspiIntegrationTests'].testCases['Library'].testSteps['curlUpload']);

	bTestFailed = ServiceTest("GetSaveResponse",true,null,"espi/1_1/resource/IntervalBlock","test_get_block2.xml");	
	strOutputDataFile = projectPath + "/../data/" + "test_get_block2.xml";
	strExpr = "";
	
	if(!bTestFailed){

		Document docResponse = builder.parse(strOutputDataFile);

		strExpr = "/ns3:feed/ns3:entry";
		XPathExpression expr = xpath.compile(strExpr);
		NodeList nlNodes = (NodeList) expr.evaluate(docResponse,XPathConstants.NODESET);

		log.info("Retreived " + nlNodes.getLength() + " Entries");
		if(nlNodes.getLength()!=4)
		{
			log.error("Response did not contain the correct number of Entries.");
		}
		
		strExpr = "/ns3:feed/ns3:entry/ns3:content/espi:IntervalBlock";
		expr = xpath.compile(strExpr);
		nlNodes = (NodeList) expr.evaluate(docResponse,XPathConstants.NODESET);

		log.info("Retreived " + nlNodes.getLength() + " IntervalBlocks");
		if(nlNodes.getLength()!=4)
		{
			log.error("Response did not contain the correct number of IntervalBlocks.");
		}				

		strExpr = "/ns3:feed/ns3:entry/ns3:content/espi:IntervalBlock/espi:IntervalReading";
		expr = xpath.compile(strExpr);
		nlNodes = (NodeList) expr.evaluate(docResponse,XPathConstants.NODESET);

		log.info("Retreived " + nlNodes.getLength() + " IntervalReadings");
		if(nlNodes.getLength()!=40320)
		{
			log.error("Response did not contain the correct number of IntervalReadings.");
		}		

		try{
 
	    		File file = new File(strOutputDataFile);
	 
	    		file.delete();
 
	    	} catch(Exception e) {
	 
	    		log.error("Error deleing temp file:" + e.getMessage());
	    	}		
	}
	else
	{
		return;
	}

	return;
</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Feature: Retail Customers" searchProperties="true" id="fa3949ff-a0a7-4274-ace9-674a8169ebd4" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="Feature: Retail Customers"><con:settings/><con:config><script>//******************************************************************************************************************
//******************************************************************************************************************
log.info("Feature: Retail Customers");
log.info("  As a Retail Customer,");
log.info("  I want to be able to view my usage point in my browser");
log.info("  So that I can see my UsagePoints");
//******************************************************************************************************************
//******************************************************************************************************************
</script></con:config></con:testStep><con:testStep type="groovy" name="Scenario: Retail Customer authorizes Usage Points access (reg UP before upload)"><con:settings/><con:config><script>import org.openqa.selenium.*;

def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath

def BaseURL = project.getPropertyValue("BaseURL")
def DataCustodianContext = project.getPropertyValue("DataCustodianContext")
def ThirdPartyContext = project.getPropertyValue("ThirdPartyContext")
def ServiceEndpointDataCustodian = BaseURL + "/" + DataCustodianContext
def ServiceEndpointThirdParty = BaseURL + "/" + ThirdPartyContext;
def TestManager=project.getPropertyValue("TestManager")
def TestManagerPW=project.getPropertyValue("TestManagerPW")
def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")
def TestFile=projectPath + "/../data/" + project.getPropertyValue("TestFile")
def usagePointUUID1 = project.getPropertyValue("usagePointUUID1");
def usagePointDescription1 = project.getPropertyValue("usagePointDescription1");

Object driver = this.class.classLoader.parseClass(new File(projectPath + "/etc/BaseStepUtils.groovy")).GetObj(BaseURL,DataCustodianContext,ThirdPartyContext,log);

driver._bLogActions = true;

try{
	//*********************************************************
	log.info("Scenario: Retail Customer authorizes Usage Points access");
	//*********************************************************
	// reset DB : run library groovy script
	testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['OpenEspiIntegrationTests'].testCases['Library'].testSteps['resetDB']);
	// Browser Init
	driver.Before();
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Given a Retail Customer with Usage Points");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.login(ServiceEndpointDataCustodian,TestManager,TestManagerPW);
	driver.assertUrlEndsWith("/" + DataCustodianContext + "/custodian/home");

	// add usage point linkage
	driver.findElement(By.partialLinkText("Customer List")).click();
	driver.findElement(By.partialLinkText(TestRetailCustomer)).click();	
	driver.findElement(By.partialLinkText("Add Usage")).click();	
	driver.findElement(By.id("UUID")).clear();
	driver.findElement(By.id("UUID")).sendKeys(usagePointUUID1);
	driver.findElement(By.id("description")).clear();
	driver.findElement(By.id("description")).sendKeys(usagePointDescription1);
	driver.findElement(By.name("create")).click();

	// upload usage point file
	driver.findElement(By.partialLinkText("Upload")).click();	
	driver.findElement(By.name("file")).sendKeys(TestFile);
		
	driver.findElement(By.name("upload")).click();	
	driver.assertDoesNotContain("Unable to process file");
	
	driver.logout(ServiceEndpointDataCustodian);
	
	driver.login(ServiceEndpointThirdParty,TestRetailCustomer,TestRetailCustomerPW);

/*
 * 	old software behaved differently- it would route the use to the DC page
 * 	Instread of showwing no authorized usage points
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("When I look at my Usage Points page");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.findElement(By.partialLinkText("Usage Points")).click();	
*/

	// Corrected to the following step
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("When I look at my Data Custodians page");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.findElement(By.partialLinkText("Data Custodians")).click();
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Then I should see Data Custodian selection page");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.assertUrlEndsWith("/DataCustodianList");
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("And I select a Data Custodian from the list");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.findElement(By.partialLinkText("Data Custodians")).click();	
	driver.findElement(By.name("Data_custodian")).click();	
	driver.findElement(By.name("next")).click();	
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("When I log into Data Custodian");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.findElement(By.name("j_username")).clear();
	driver.findElement(By.name("j_username")).sendKeys(TestRetailCustomer);	
	driver.findElement(By.name("j_password")).clear();
	driver.findElement(By.name("j_password")).sendKeys(TestRetailCustomerPW);	
	driver.findElement(By.name("submit")).click();		

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Then I should see Scope selection screen");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.assertContains("Select Scope");
	driver.assertContains("FB=4_5_15;IntervalDuration=3600;BlockDuration=monthly;HistoryLength=13");
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("When I select Scopes");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.findElement(By.className("scope")).click();	
	driver.findElement(By.xpath("(//input[@name='scope'])[2]")).click();	
	driver.findElement(By.name("next")).click();	
	        
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Then I should see authorization screen");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.assertContains("Please Confirm");
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("When I authorize Third Party");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.findElement(By.name("authorize")).click();	
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Then I should see all my authorizations");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.assertContains("Authorizations");
	driver.assertContains("data_custodian");
	driver.assertContains("DataCustodian/espi/1_1/resource/Batch/Subscription/1");
	        
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("When I look at my Usage Points page");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.findElement(By.partialLinkText("Usage Points")).click();	        
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Then I should see a Usage Point");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.assertContains(usagePointDescription1);
	
} catch(Exception e) {
	testRunner.fail(driver.getErrorString())
}

//Close the browser
driver.quit();


</script></con:config></con:testStep><con:testStep type="groovy" name="Scenario: Retail Customer authorizes Usage Points access"><con:settings/><con:config><script>import org.openqa.selenium.*;

def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath

def BaseURL = project.getPropertyValue("BaseURL")
def DataCustodianContext = project.getPropertyValue("DataCustodianContext")
def ThirdPartyContext = project.getPropertyValue("ThirdPartyContext")
def ServiceEndpointDataCustodian = BaseURL + "/" + DataCustodianContext
def ServiceEndpointThirdParty = BaseURL + "/" + ThirdPartyContext;
def TestManager=project.getPropertyValue("TestManager")
def TestManagerPW=project.getPropertyValue("TestManagerPW")
def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")
def TestFile=projectPath + "/../data/" + project.getPropertyValue("TestFile")
def usagePointUUID1 = project.getPropertyValue("usagePointUUID1");
def usagePointDescription1 = project.getPropertyValue("usagePointDescription1");

Object driver = this.class.classLoader.parseClass(new File(projectPath + "/etc/BaseStepUtils.groovy")).GetObj(BaseURL,DataCustodianContext,ThirdPartyContext,log);

driver._bLogActions = true;

try{
	//*********************************************************
	log.info("Scenario: Retail Customer authorizes Usage Points access");
	//*********************************************************
	// reset DB : run library groovy script
	testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['OpenEspiIntegrationTests'].testCases['Library'].testSteps['resetDB']);
	// Browser Init
	driver.Before();
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Given a Retail Customer with Usage Points");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.login(ServiceEndpointDataCustodian,TestManager,TestManagerPW);
	driver.assertUrlEndsWith("/" + DataCustodianContext + "/custodian/home");


	// upload usage point file
	driver.findElement(By.partialLinkText("Upload")).click();	
	driver.findElement(By.name("file")).sendKeys(TestFile);
		
	driver.findElement(By.name("upload")).click();	
	driver.assertDoesNotContain("Unable to process file");

		
	// add usage point linkage
	driver.findElement(By.partialLinkText("Customer List")).click();
	driver.findElement(By.partialLinkText(TestRetailCustomer)).click();	
	driver.findElement(By.partialLinkText("Add Usage")).click();	
	driver.findElement(By.id("UUID")).clear();
	driver.findElement(By.id("UUID")).sendKeys(usagePointUUID1);
	driver.findElement(By.id("description")).clear();
	driver.findElement(By.id("description")).sendKeys(usagePointDescription1);
	driver.findElement(By.name("create")).click();


	driver.logout(ServiceEndpointDataCustodian);
	
	driver.login(ServiceEndpointThirdParty,TestRetailCustomer,TestRetailCustomerPW);

/*
 * 	old software behaved differently- it would route the use to the DC page
 * 	Instread of showwing no authorized usage points
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("When I look at my Usage Points page");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.findElement(By.partialLinkText("Usage Points")).click();	
*/

	// Corrected to the following step
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("When I look at my Data Custodians page");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.findElement(By.partialLinkText("Data Custodians")).click();
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Then I should see Data Custodian selection page");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.assertUrlEndsWith("/DataCustodianList");
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("And I select a Data Custodian from the list");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.findElement(By.partialLinkText("Data Custodians")).click();	
	driver.findElement(By.name("Data_custodian")).click();	
	driver.findElement(By.name("next")).click();	
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("When I log into Data Custodian");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.findElement(By.name("j_username")).clear();
	driver.findElement(By.name("j_username")).sendKeys(TestRetailCustomer);	
	driver.findElement(By.name("j_password")).clear();
	driver.findElement(By.name("j_password")).sendKeys(TestRetailCustomerPW);	
	driver.findElement(By.name("submit")).click();		

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Then I should see Scope selection screen");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.assertContains("Select Scope");
	driver.assertContains("FB=4_5_15;IntervalDuration=3600;BlockDuration=monthly;HistoryLength=13");
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("When I select Scopes");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.findElement(By.className("scope")).click();	
	driver.findElement(By.xpath("(//input[@name='scope'])[2]")).click();	
	driver.findElement(By.name("next")).click();	
	        
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Then I should see authorization screen");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.assertContains("Please Confirm");
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("When I authorize Third Party");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.findElement(By.name("authorize")).click();	
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Then I should see all my authorizations");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.assertContains("Authorizations");
	driver.assertContains("data_custodian");
	driver.assertContains("DataCustodian/espi/1_1/resource/Batch/Subscription/1");
	        
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("When I look at my Usage Points page");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.findElement(By.partialLinkText("Usage Points")).click();	        
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Then I should see a Usage Point");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.assertContains(usagePointDescription1);
	
} catch(Exception e) {
	testRunner.fail(driver.getErrorString())
}

//Close the browser
driver.quit();


</script></con:config></con:testStep><con:testStep type="groovy" name="Scenario: Retail Customer views Usage Points with Meter Readings"><con:settings/><con:config><script>import org.openqa.selenium.*;

def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath
def BaseURL = project.getPropertyValue("BaseURL")
def DataCustodianContext = project.getPropertyValue("DataCustodianContext")
def ThirdPartyContext = project.getPropertyValue("ThirdPartyContext")
def ServiceEndpointDataCustodian = BaseURL + "/" + DataCustodianContext
def ServiceEndpointThirdParty = BaseURL + "/" + ThirdPartyContext;
def TestManager=project.getPropertyValue("TestManager")
def TestManagerPW=project.getPropertyValue("TestManagerPW")
def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")
def TestFile=projectPath + "/../data/" + project.getPropertyValue("TestFile")
def usagePointUUID1 = project.getPropertyValue("usagePointUUID1");
def usagePointDescription1 = project.getPropertyValue("usagePointDescription1");

Object driver = this.class.classLoader.parseClass(new File(projectPath + "/etc/BaseStepUtils.groovy")).GetObj(BaseURL,DataCustodianContext,ThirdPartyContext,log);

//driver._bLogActions = true;


try{
	//*********************************************************
	log.info("Scenario: Retail Customer views Usage Points with Meter Readings");
	//*********************************************************
	// reset DB : run library groovy script
	testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['OpenEspiIntegrationTests'].testCases['Library'].testSteps['resetDB']);
	// Browser Init
	driver.Before();
	
	///////////////////////////////////////////////////////////  
	driver.logStep("Given a Retail Customer with Usage Points");
	///////////////////////////////////////////////////////////
	driver.login(ServiceEndpointDataCustodian,TestManager,TestManagerPW);
	driver.assertUrlEndsWith("/" + DataCustodianContext + "/custodian/home");

	// upload usage point file
	driver.findElement(By.partialLinkText("Upload")).click();	
	driver.findElement(By.name("file")).sendKeys(TestFile);
		
	driver.findElement(By.name("upload")).click();	
	driver.assertDoesNotContain("Unable to process file");
		
	// add usage point linkage
	driver.findElement(By.partialLinkText("Customer List")).click();
	driver.findElement(By.partialLinkText(TestRetailCustomer)).click();	
	driver.findElement(By.partialLinkText("Add Usage")).click();	
	driver.findElement(By.id("UUID")).clear();
	driver.findElement(By.id("UUID")).sendKeys(usagePointUUID1);
	driver.findElement(By.id("description")).clear();
	driver.findElement(By.id("description")).sendKeys(usagePointDescription1);
	driver.findElement(By.name("create")).click();


	driver.logout(ServiceEndpointDataCustodian);
	
	driver.login(ServiceEndpointThirdParty,TestRetailCustomer,TestRetailCustomerPW);
	
/*
 * 	old software behaved differently- it would route the use to the DC page
 * 	Instread of showwing no authorized usage points
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("When I look at my Usage Points page");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.findElement(By.partialLinkText("Usage Points")).click();	
*/

	// Corrected to the following step
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("When I look at my Data Custodians page");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.findElement(By.partialLinkText("Data Custodians")).click();
	
	///////////////////////////////////////////////////////////
	driver.logStep("And I should see Data Custodian selection page");
	///////////////////////////////////////////////////////////
	driver.assertUrlEndsWith("/DataCustodianList");
	
	///////////////////////////////////////////////////////////
	driver.logStep("And I select a Data Custodian from the list");
	///////////////////////////////////////////////////////////
	driver.findElement(By.partialLinkText("Data Custodians")).click();	
	driver.findElement(By.name("Data_custodian")).click();	
	driver.findElement(By.name("next")).click();	
	
	///////////////////////////////////////////////////////////
	driver.logStep("When I log into Data Custodian");
	///////////////////////////////////////////////////////////
	driver.findElement(By.name("j_username")).clear();
	driver.findElement(By.name("j_username")).sendKeys(TestRetailCustomer);	
	driver.findElement(By.name("j_password")).clear();
	driver.findElement(By.name("j_password")).sendKeys(TestRetailCustomerPW);	
	driver.findElement(By.name("submit")).click();	
	
	///////////////////////////////////////////////////////////
	driver.logStep("Then I should see Scope selection screen");
	///////////////////////////////////////////////////////////
	driver.assertContains("Select Scope");
	driver.assertContains("FB=4_5_15;IntervalDuration=3600;BlockDuration=monthly;HistoryLength=13");
	
	///////////////////////////////////////////////////////////
	driver.logStep("When I select Scopes");
	///////////////////////////////////////////////////////////
	driver.findElement(By.className("scope")).click();	
	driver.findElement(By.xpath("(//input[@name='scope'])[2]")).click();	
	driver.findElement(By.name("next")).click();	
	
	///////////////////////////////////////////////////////////
	driver.logStep("Then I should see authorization screen");
	///////////////////////////////////////////////////////////
	driver.assertContains("Please Confirm");
	
	///////////////////////////////////////////////////////////
	driver.logStep("When I authorize Third Party");
	///////////////////////////////////////////////////////////
	driver.findElement(By.name("authorize")).click();
	
	///////////////////////////////////////////////////////////
	driver.logStep("Then I should see all my authorizations");
	///////////////////////////////////////////////////////////
	driver.assertContains("Authorizations");
	driver.assertContains("data_custodian");
	driver.assertContains("DataCustodian/espi/1_1/resource/Batch/Subscription/1");
	
	///////////////////////////////////////////////////////////
	driver.logStep("When I look at my Usage Points page");
	///////////////////////////////////////////////////////////
	driver.findElement(By.partialLinkText("Usage Points")).click();	
	
	///////////////////////////////////////////////////////////
	driver.logStep("Then I should see a Usage Point");
	///////////////////////////////////////////////////////////
	driver.assertContains(usagePointDescription1);
	
	///////////////////////////////////////////////////////////
	driver.logStep("When I select Usage Point");
	///////////////////////////////////////////////////////////
	driver.findElement(By.partialLinkText(usagePointDescription1)).click();	        
	
	///////////////////////////////////////////////////////////
	driver.logStep("Then I should see Usage Point details");
	///////////////////////////////////////////////////////////
	driver.assertContains("Usage Summaries");
	driver.assertContains("Quality Summaries");
	driver.assertContains("Local time zone offset from UTCTime");
	driver.assertContains("-18000");
	        
	///////////////////////////////////////////////////////////
	driver.logStep("When I select Meter Reading");
	///////////////////////////////////////////////////////////
	driver.findElement(By.partialLinkText("Fifteen Minute Electricity Consumption")).click();
		        
	///////////////////////////////////////////////////////////
	driver.logStep("Then I should see Meter Reading details");
	///////////////////////////////////////////////////////////
	driver.assertContains("Fifteen Minute Electricity Consumption");
	driver.assertContains("Type of Meter Reading Data");
	driver.assertContains("86400");
	driver.assertContains("974");
	driver.assertContains("900");
	driver.assertContains("965");
	
} catch(Exception e) {
	testRunner.fail(driver.getErrorString())
}

//Close the browser
driver.quit();
</script></con:config></con:testStep><con:testStep type="groovy" name="Scenario: Retail Customer authorizes Scope"><con:settings/><con:config><script>import org.openqa.selenium.*;

def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath
def BaseURL = project.getPropertyValue("BaseURL")
def DataCustodianContext = project.getPropertyValue("DataCustodianContext")
def ThirdPartyContext = project.getPropertyValue("ThirdPartyContext")
def ServiceEndpointDataCustodian = BaseURL + "/" + DataCustodianContext
def ServiceEndpointThirdParty = BaseURL + "/" + ThirdPartyContext;
def TestManager=project.getPropertyValue("TestManager")
def TestManagerPW=project.getPropertyValue("TestManagerPW")
def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")
def TestFile=projectPath + "/../data/" + project.getPropertyValue("TestFile")
def usagePointUUID1 = project.getPropertyValue("usagePointUUID1");
def usagePointDescription1 = project.getPropertyValue("usagePointDescription1");

Object driver = this.class.classLoader.parseClass(new File(projectPath + "/etc/BaseStepUtils.groovy")).GetObj(BaseURL,DataCustodianContext,ThirdPartyContext,log);

//driver._bLogActions = true;

try{
	//*********************************************************
	log.info("Scenario: Retail Customer authorizes Scope");
	//*********************************************************  
	// reset DB : run library groovy script
	testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['OpenEspiIntegrationTests'].testCases['Library'].testSteps['resetDB']);
	// Browser Init
	driver.Before();
	
	///////////////////////////////////////////////////////////  
	driver.logStep("Given I have a Retail Customer account");
	///////////////////////////////////////////////////////////
	// Seed Data
	
	///////////////////////////////////////////////////////////
	driver.logStep("When I log in as Alan Turing into Third Party");
	///////////////////////////////////////////////////////////
	driver.login(ServiceEndpointThirdParty,TestRetailCustomer,TestRetailCustomerPW);
	
	///////////////////////////////////////////////////////////
	driver.logStep("And I select a Data Custodian from the list");
	///////////////////////////////////////////////////////////
	driver.findElement(By.partialLinkText("Data Custodians")).click();	
	driver.findElement(By.name("Data_custodian")).click();	
	driver.findElement(By.name("next")).click();	
	
	///////////////////////////////////////////////////////////
	driver.logStep("When I log into Data Custodian");
	///////////////////////////////////////////////////////////
	driver.findElement(By.name("j_username")).clear();
	driver.findElement(By.name("j_username")).sendKeys(TestRetailCustomer);	
	driver.findElement(By.name("j_password")).clear();
	driver.findElement(By.name("j_password")).sendKeys(TestRetailCustomerPW);	
	driver.findElement(By.name("submit")).click();
	
	///////////////////////////////////////////////////////////
	driver.logStep("Then I should see Scope selection screen");
	///////////////////////////////////////////////////////////
	driver.assertContains("Select Scope");
	driver.assertContains("FB=4_5_15;IntervalDuration=3600;BlockDuration=monthly;HistoryLength=13");
	
	///////////////////////////////////////////////////////////
	driver.logStep("When I select Scopes");
	///////////////////////////////////////////////////////////
	driver.findElement(By.className("scope")).click();	
	driver.findElement(By.xpath("(//input[@name='scope'])[2]")).click();	
	driver.findElement(By.name("next")).click();	
	
	///////////////////////////////////////////////////////////
	driver.logStep("Then I should see authorization screen");
	///////////////////////////////////////////////////////////
	driver.assertContains("Please Confirm");
	
	///////////////////////////////////////////////////////////
	driver.logStep("When I authorize Third Party");
	///////////////////////////////////////////////////////////
	driver.findElement(By.name("authorize")).click();	
	
	///////////////////////////////////////////////////////////
	driver.logStep("Then I should see all my authorizations");
	///////////////////////////////////////////////////////////
	driver.assertContains("Authorizations");
	driver.assertContains("data_custodian");
	driver.assertContains("DataCustodian/espi/1_1/resource/Batch/Subscription/1");


} catch(Exception e) {
	testRunner.fail(driver.getErrorString())
}

//Close the browser
driver.quit();

</script></con:config></con:testStep><con:testStep type="groovy" name="Scenario: Retail Customer denies Scope"><con:settings/><con:config><script>import org.openqa.selenium.*;

def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath
def BaseURL = project.getPropertyValue("BaseURL")
def DataCustodianContext = project.getPropertyValue("DataCustodianContext")
def ThirdPartyContext = project.getPropertyValue("ThirdPartyContext")
def ServiceEndpointDataCustodian = BaseURL + "/" + DataCustodianContext
def ServiceEndpointThirdParty = BaseURL + "/" + ThirdPartyContext;
def TestManager=project.getPropertyValue("TestManager")
def TestManagerPW=project.getPropertyValue("TestManagerPW")
def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")
def TestFile=projectPath + "/../data/" + project.getPropertyValue("TestFile")
def usagePointUUID1 = project.getPropertyValue("usagePointUUID1");
def usagePointDescription1 = project.getPropertyValue("usagePointDescription1");

Object driver = this.class.classLoader.parseClass(new File(projectPath + "/etc/BaseStepUtils.groovy")).GetObj(BaseURL,DataCustodianContext,ThirdPartyContext,log);

//driver._bLogActions = true;

try{
	//*********************************************************
	log.info("Scenario: Retail Customer denies Scope");
	//********************************************************* 
	// reset DB : run library groovy script
	testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['OpenEspiIntegrationTests'].testCases['Library'].testSteps['resetDB']);
	// Browser Init
	driver.Before();
	
	///////////////////////////////////////////////////////////
	driver.logStep("Given I have a Retail Customer account");
	///////////////////////////////////////////////////////////
	// Seed Data
	
	///////////////////////////////////////////////////////////
	driver.logStep("When I log in as Alan Turing into Third Party");
	///////////////////////////////////////////////////////////
	driver.login(ServiceEndpointThirdParty,TestRetailCustomer,TestRetailCustomerPW);
	
	///////////////////////////////////////////////////////////
	driver.logStep("And I select a Data Custodian from the list");
	///////////////////////////////////////////////////////////
	driver.findElement(By.partialLinkText("Data Custodians")).click();	
	driver.findElement(By.name("Data_custodian")).click();	
	driver.findElement(By.name("next")).click();	
	
	///////////////////////////////////////////////////////////
	driver.logStep("When I log into Data Custodian");
	///////////////////////////////////////////////////////////
	driver.findElement(By.name("j_username")).clear();
	driver.findElement(By.name("j_username")).sendKeys(TestRetailCustomer);	
	driver.findElement(By.name("j_password")).clear();
	driver.findElement(By.name("j_password")).sendKeys(TestRetailCustomerPW);	
	driver.findElement(By.name("submit")).click();
	
	///////////////////////////////////////////////////////////
	driver.logStep("Then I should see Scope selection screen");
	///////////////////////////////////////////////////////////
	driver.assertContains("Select Scope");
	driver.assertContains("FB=4_5_15;IntervalDuration=3600;BlockDuration=monthly;HistoryLength=13");
	
	///////////////////////////////////////////////////////////
	driver.logStep("When I select Scopes");
	///////////////////////////////////////////////////////////
	driver.findElement(By.className("scope")).click();	
	driver.findElement(By.xpath("(//input[@name='scope'])[2]")).click();	
	driver.findElement(By.name("next")).click();	
	
	///////////////////////////////////////////////////////////
	driver.logStep("Then I should see authorization screen");
	///////////////////////////////////////////////////////////
	driver.assertContains("Please Confirm");
	
	///////////////////////////////////////////////////////////
	driver.logStep("When I deny Third Party");
	///////////////////////////////////////////////////////////
	driver.findElement(By.name("deny")).click();
	
	///////////////////////////////////////////////////////////
	driver.logStep("Then I should be redirected to the home page");
	///////////////////////////////////////////////////////////
	driver.assertUrlContains("RetailCustomer");
	driver.assertUrlEndsWith("/home");

} catch(Exception e) {
	testRunner.fail(driver.getErrorString())
}

//Close the browser
driver.quit();

</script></con:config></con:testStep><con:testStep type="groovy" name="Scenario: Retail Customer authorizes Scope from Data Custodian"><con:settings/><con:config><script>import org.openqa.selenium.*;

def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath
def BaseURL = project.getPropertyValue("BaseURL")
def DataCustodianContext = project.getPropertyValue("DataCustodianContext")
def ThirdPartyContext = project.getPropertyValue("ThirdPartyContext")
def ServiceEndpointDataCustodian = BaseURL + "/" + DataCustodianContext
def ServiceEndpointThirdParty = BaseURL + "/" + ThirdPartyContext;
def TestManager=project.getPropertyValue("TestManager")
def TestManagerPW=project.getPropertyValue("TestManagerPW")
def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")
def TestFile=projectPath + "/../data/" + project.getPropertyValue("TestFile")

def usagePointUUID1 = project.getPropertyValue("usagePointUUID1");
def usagePointDescription1 = project.getPropertyValue("usagePointDescription1");

Object driver = this.class.classLoader.parseClass(new File(projectPath + "/etc/BaseStepUtils.groovy")).GetObj(BaseURL,DataCustodianContext,ThirdPartyContext,log);


//driver._bLogActions = true;

try{
	//*********************************************************
	log.info("Scenario: Retail Customer authorizes Scope from Data Custodian");
	//*********************************************************
	// reset DB : run library groovy script
	testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['OpenEspiIntegrationTests'].testCases['Library'].testSteps['resetDB']);
	// Browser Init
	driver.Before();
	
	///////////////////////////////////////////////////////////
	driver.logStep("Given I have a Retail Customer account");
	///////////////////////////////////////////////////////////
	// Seed Data
	
	///////////////////////////////////////////////////////////
	driver.logStep("When I log in as Alan Turing into Data Custodian");
	///////////////////////////////////////////////////////////
	driver.login(ServiceEndpointDataCustodian,TestRetailCustomer,TestRetailCustomerPW);
	
	///////////////////////////////////////////////////////////
	driver.logStep("And I select a Third Party from the list");
	///////////////////////////////////////////////////////////
	driver.findElement(By.partialLinkText("Third Parties")).click();
	driver.findElement(By.className("third-party")).click();
	driver.findElement(By.name("next")).click();
	
	///////////////////////////////////////////////////////////
	driver.logStep("When I log into Third Party");
	///////////////////////////////////////////////////////////
	driver.findElement(By.name("j_username")).clear();
	driver.findElement(By.name("j_username")).sendKeys(TestRetailCustomer);
	driver.findElement(By.name("j_password")).clear();
	driver.findElement(By.name("j_password")).sendKeys(TestRetailCustomerPW);
	driver.findElement(By.name("submit")).click();
	
	///////////////////////////////////////////////////////////
	driver.logStep("Then I should see Scope selection screen");
	///////////////////////////////////////////////////////////
	driver.assertContains("Select Scope");
	driver.assertContains("FB=4_5_15;IntervalDuration=3600;BlockDuration=monthly;HistoryLength=13");
	
	///////////////////////////////////////////////////////////
	driver.logStep("When I select Scopes");
	///////////////////////////////////////////////////////////
	driver.findElement(By.className("scope")).click();	
	driver.findElement(By.xpath("(//input[@name='scope'])[2]")).click();	
	driver.findElement(By.name("next")).click();	
	
	///////////////////////////////////////////////////////////
	driver.logStep("Then I should see authorization screen");
	///////////////////////////////////////////////////////////
	driver.assertContains("Please Confirm");
	
	///////////////////////////////////////////////////////////
	driver.logStep("When I authorize Third Party");
	///////////////////////////////////////////////////////////
	driver.findElement(By.name("authorize")).click();	
	
	///////////////////////////////////////////////////////////
	driver.logStep("Then I should see all my authorizations");
	///////////////////////////////////////////////////////////
	driver.assertContains("Authorizations");
	driver.assertContains("data_custodian");
	driver.assertContains("DataCustodian/espi/1_1/resource/Batch/Subscription/1");

} catch(Exception e) {
	testRunner.fail(driver.getErrorString())
}

//Close the browser
driver.quit();

</script></con:config></con:testStep><con:testStep type="groovy" name="Scenario: Retail Customer denies Scope from Data Custodian"><con:settings/><con:config><script>import org.openqa.selenium.*;

def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath
def BaseURL = project.getPropertyValue("BaseURL")
def DataCustodianContext = project.getPropertyValue("DataCustodianContext")
def ThirdPartyContext = project.getPropertyValue("ThirdPartyContext")
def ServiceEndpointDataCustodian = BaseURL + "/" + DataCustodianContext
def ServiceEndpointThirdParty = BaseURL + "/" + ThirdPartyContext;
def TestManager=project.getPropertyValue("TestManager")
def TestManagerPW=project.getPropertyValue("TestManagerPW")
def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")
def TestFile=projectPath + "/../data/" + project.getPropertyValue("TestFile")
def usagePointUUID1 = project.getPropertyValue("usagePointUUID1");
def usagePointDescription1 = project.getPropertyValue("usagePointDescription1");

Object driver = this.class.classLoader.parseClass(new File(projectPath + "/etc/BaseStepUtils.groovy")).GetObj(BaseURL,DataCustodianContext,ThirdPartyContext,log);


//driver._bLogActions = true;

try{
	//*********************************************************
	log.info("Scenario: Retail Customer denies Scope from Data Custodian");
	//*********************************************************  
	// reset DB : run library groovy script
	testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['OpenEspiIntegrationTests'].testCases['Library'].testSteps['resetDB']);
	// Browser Init
	driver.Before();
	
	///////////////////////////////////////////////////////////
	driver.logStep("Given I have a Retail Customer account");
	///////////////////////////////////////////////////////////
	// Seed Data
	
	///////////////////////////////////////////////////////////
	driver.logStep("When I log in as Alan Turing into Data Custodian");
	///////////////////////////////////////////////////////////
	driver.login(ServiceEndpointDataCustodian,TestRetailCustomer,TestRetailCustomerPW);
	
	///////////////////////////////////////////////////////////
	driver.logStep("And I select a Third Party from the list");
	///////////////////////////////////////////////////////////
	driver.findElement(By.partialLinkText("Third Parties")).click();
	driver.findElement(By.className("third-party")).click();
	driver.findElement(By.name("next")).click();
	
	///////////////////////////////////////////////////////////
	driver.logStep("When I log into Third Party");
	///////////////////////////////////////////////////////////
	driver.findElement(By.name("j_username")).clear();
	driver.findElement(By.name("j_username")).sendKeys(TestRetailCustomer);
	driver.findElement(By.name("j_password")).clear();
	driver.findElement(By.name("j_password")).sendKeys(TestRetailCustomerPW);
	driver.findElement(By.name("submit")).click();
	
	///////////////////////////////////////////////////////////
	driver.logStep("Then I should see Scope selection screen");
	///////////////////////////////////////////////////////////
	driver.assertContains("Select Scope");
	driver.assertContains("FB=4_5_15;IntervalDuration=3600;BlockDuration=monthly;HistoryLength=13");
	
	///////////////////////////////////////////////////////////
	driver.logStep("When I select Scopes");
	///////////////////////////////////////////////////////////
	driver.findElement(By.className("scope")).click();	
	driver.findElement(By.xpath("(//input[@name='scope'])[2]")).click();	
	driver.findElement(By.name("next")).click();	
	
	///////////////////////////////////////////////////////////
	driver.logStep("Then I should see authorization screen");
	///////////////////////////////////////////////////////////
	driver.assertContains("Please Confirm");
	
	///////////////////////////////////////////////////////////
	driver.logStep("When I deny Third Party");
	///////////////////////////////////////////////////////////
	driver.findElement(By.name("deny")).click();		
	
	///////////////////////////////////////////////////////////
	driver.logStep("Then I should be redirected to the home page");
	///////////////////////////////////////////////////////////
	driver.assertUrlContains("RetailCustomer");
	driver.assertUrlEndsWith("/home");

} catch(Exception e) {
	testRunner.fail(driver.getErrorString())
}

//Close the browser
driver.quit();


</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Feature: Notification" searchProperties="true" id="0b86062c-c041-4957-b41a-22a9fcb7ad41" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="Feature: Notification"><con:settings/><con:config><script>//******************************************************************************************************************
//******************************************************************************************************************
log.info("Feature: Notification");
log.info("  As Data Custodian,");
log.info("  I should be able to notify Third Party about data updates,");
log.info("  So Third Party can download updated data");
//******************************************************************************************************************
//******************************************************************************************************************
</script></con:config></con:testStep><con:testStep type="groovy" name="Scenario: Data Custodian notifies Third Party of updated Subscription"><con:settings/><con:config><script>import org.openqa.selenium.*;

def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath
def BaseURL = project.getPropertyValue("BaseURL")
def DataCustodianContext = project.getPropertyValue("DataCustodianContext")
def ThirdPartyContext = project.getPropertyValue("ThirdPartyContext")
def ServiceEndpointDataCustodian = BaseURL + "/" + DataCustodianContext
def ServiceEndpointThirdParty = BaseURL + "/" + ThirdPartyContext;
def TestManager=project.getPropertyValue("TestManager")
def TestManagerPW=project.getPropertyValue("TestManagerPW")
def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")
def TestFile=projectPath + "/../data/" + project.getPropertyValue("TestFile")
def usagePointUUID1 = project.getPropertyValue("usagePointUUID1");
def usagePointDescription1 = project.getPropertyValue("usagePointDescription1");

Object driver = this.class.classLoader.parseClass(new File(projectPath + "/etc/BaseStepUtils.groovy")).GetObj(BaseURL,DataCustodianContext,ThirdPartyContext,log);


def TestFile2=projectPath + "/../data/" + project.getPropertyValue("TestFile2")
def usagePointUUID2 = project.getPropertyValue("usagePointUUID2");
def usagePointDescription2 = project.getPropertyValue("usagePointDescription2");

//driver._bLogActions = true;

try{
	//*********************************************************
	log.info("Scenario: Data Custodian notifies Third Party of updated Subscription");
	//*********************************************************
	// reset DB : run library groovy script
	testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['OpenEspiIntegrationTests'].testCases['Library'].testSteps['resetDB']);
	// Browser Init
	driver.Before();
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Given a Retail Customer with Usage Points");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.login(ServiceEndpointDataCustodian,TestManager,TestManagerPW);
	driver.assertUrlEndsWith("/" + DataCustodianContext + "/custodian/home");

	// upload usage point file
	driver.findElement(By.partialLinkText("Upload")).click();	
	driver.findElement(By.name("file")).sendKeys(TestFile);
		
	driver.findElement(By.name("upload")).click();	
	driver.assertDoesNotContain("Unable to process file");
	
	// add usage point linkage
	driver.findElement(By.partialLinkText("Customer List")).click();
	driver.findElement(By.partialLinkText(TestRetailCustomer)).click();	
	driver.findElement(By.partialLinkText("Add Usage")).click();	
	driver.findElement(By.id("UUID")).clear();
	driver.findElement(By.id("UUID")).sendKeys(usagePointUUID1);
	//driver.findElement(By.id("description")).clear();
	//driver.findElement(By.id("description")).sendKeys(usagePointDescription1);
	driver.findElement(By.name("create")).click();

	driver.logout(ServiceEndpointDataCustodian);
	
	driver.login(ServiceEndpointThirdParty,TestRetailCustomer,TestRetailCustomerPW);
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("And a Third Party with an updated subscription");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logout(ServiceEndpointThirdParty);
	
	driver.login(ServiceEndpointThirdParty,TestManager,TestManagerPW);
	
	driver.findElement(By.partialLinkText("Batch Lists")).click();
	driver.assertDoesNotContain("Whoops");

	log.info("The following step may take up to 30 seconds to complete.");
	int OriginalnumberOfSubscriptions = driver.GetNumElsByTagName("h2");
	log.info("Original number of subscriptions=" + OriginalnumberOfSubscriptions);

	driver.logout(ServiceEndpointThirdParty);
	
	driver.login(ServiceEndpointThirdParty,TestRetailCustomer,TestRetailCustomerPW);
	driver.findElement(By.partialLinkText("Data Custodians")).click();	
	driver.findElement(By.name("Data_custodian")).click();	
	driver.findElement(By.name("next")).click();
	
	driver.submitLoginForm(TestRetailCustomer,TestRetailCustomerPW);
	
	driver.findElement(By.name("scope")).click();	
	driver.findElement(By.name("next")).click();	
	driver.findElement(By.name("scope.FB=4_5_15;IntervalDuration=900;BlockDuration=monthly;HistoryLength=13")).click();
	driver.findElement(By.name("authorize")).click();	

	driver.logout(ServiceEndpointDataCustodian);

	driver.logout(ServiceEndpointThirdParty);
	
	driver.login(ServiceEndpointDataCustodian, TestManager,TestManagerPW);
	
	// upload usage point file Sweet Usage Point
	driver.findElement(By.partialLinkText("Upload")).click();		
	driver.findElement(By.name("file")).sendKeys(TestFile2);
	driver.findElement(By.name("upload")).click();	
	
	driver.assertDoesNotContain("Unable to process file");
	
	// add usage point linkage
	driver.findElement(By.partialLinkText("Customer List")).click();		
	driver.findElement(By.partialLinkText(TestRetailCustomer)).click();		
	driver.findElement(By.partialLinkText("Add Usage")).click();
	driver.findElement(By.id("UUID")).clear();
	driver.findElement(By.id("UUID")).sendKeys(usagePointUUID2);
	//driver.findElement(By.id("description")).clear();
	//driver.findElement(By.id("description")).sendKeys(usagePointDescription2);
	driver.findElement(By.name("create")).click();	
	
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("When I notify the Third Party");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logout(ServiceEndpointDataCustodian);
	driver.login(ServiceEndpointDataCustodian,TestManager,TestManagerPW);
	driver.findElement(By.partialLinkText("Notify Third Party")).click();	
        
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Then the Third Party should be notified of the update");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logout(ServiceEndpointDataCustodian);
	driver.login(ServiceEndpointThirdParty,TestManager,TestManagerPW);

	driver.assertContains("Welcome");

	driver.findElement(By.partialLinkText("Batch Lists")).click();

	int numberOfSubscriptions = driver.GetNumElsByTagName("h2");

	log.info("New number of subscriptions=" + numberOfSubscriptions);
	
	//if(numberOfSubscriptions != 1)
	if(numberOfSubscriptions != 2)
	{
		log.error("unexpected number of subscriptions");
		testRunner.fail("unexpected number of subscriptions");
	}

	driver.assertContains("/espi/1_1/resource/Batch/Subscription/");
	
} catch(Exception e) {
	testRunner.fail(driver.getErrorString())
}

//Close the browser
driver.quit();

</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Feature: Subscription" searchProperties="true" id="d7224ab1-0cfd-4bae-b06b-87490390bdc2" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="Feature: Subscription"><con:settings/><con:config><script>//******************************************************************************************************************
//******************************************************************************************************************
log.info("Feature: Subscription");
log.info("  As a Third Party");
log.info("  I want to access Retail Customer data");
log.info("  So that I can display Retail Customer data");
//******************************************************************************************************************
//******************************************************************************************************************
</script></con:config></con:testStep><con:testStep type="groovy" name="Scenario: Third Party accesses Subscription"><con:settings/><con:config><script><![CDATA[import org.openqa.selenium.*;

import org.xml.sax.SAXException;
import org.w3c.dom.*;
import javax.xml.parsers.*;
import javax.xml.xpath.*;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import javax.xml.namespace.NamespaceContext;


public class SimpleNamespaceContext implements NamespaceContext {

    private final Map<String, String> PREF_MAP = new HashMap<String, String>();

    public SimpleNamespaceContext(final Map<String, String> prefMap) {
        PREF_MAP.putAll(prefMap);       
    }

    public String getNamespaceURI(String prefix) {
        return PREF_MAP.get(prefix);
    }

    public String getPrefix(String uri) {
        throw new UnsupportedOperationException();
    }

    public Iterator getPrefixes(String uri) {
        throw new UnsupportedOperationException();
    }

}

public boolean ServiceTest(String strTestType,boolean bShouldPass,String strFileName,String strResource,String strOutputFile)
{
	tc = testRunner.testCase.testSuite.project.testSuites["OpenEspiIntegrationTests"].testCases["Library"]
	tc.setPropertyValue("resourceTestFileName", strFileName)
	tc.setPropertyValue("testType", strTestType)
	tc.setPropertyValue("resourceOutputFileName", strOutputFile)
	tc.setPropertyValue("resource", strResource)
	
	if(bShouldPass) {
		tc.setPropertyValue("testShouldPass", "TRUE")
	}
	else {
		tc.setPropertyValue("testShouldPass", "FALSE")
	}
	
	testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['OpenEspiIntegrationTests'].testCases['Library'].testSteps['resourceTests']);

	String strResult = tc.getPropertyValue("testFailed");	

	boolean bResult = false;
	
	if(strResult.equals("TRUE")) {
		bResult = true;
	}

	return bResult;
}




def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath
def BaseURL = project.getPropertyValue("BaseURL")
def DataCustodianContext = project.getPropertyValue("DataCustodianContext")
def ThirdPartyContext = project.getPropertyValue("ThirdPartyContext")
def ServiceEndpointDataCustodian = BaseURL + "/" + DataCustodianContext
def ServiceEndpointThirdParty = BaseURL + "/" + ThirdPartyContext;
def TestManager=project.getPropertyValue("TestManager")
def TestManagerPW=project.getPropertyValue("TestManagerPW")
def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")
def TestFile=projectPath + "/../data/" + project.getPropertyValue("TestFile")
def usagePointUUID1 = project.getPropertyValue("usagePointUUID1");
def usagePointDescription1 = project.getPropertyValue("usagePointDescription1");


	DocumentBuilderFactory domFactory = DocumentBuilderFactory.newInstance();
	domFactory.setNamespaceAware(true); 
	DocumentBuilder builder = domFactory.newDocumentBuilder();

	XPath xpath = XPathFactory.newInstance().newXPath();
	
	// add namespaces
	HashMap<String, String> prefMap = new HashMap<String, String>() {{
	    put("espi", "http://naesb.org/espi");
	    put("ns3", "http://www.w3.org/2005/Atom");
	}};
	
	SimpleNamespaceContext namespaces = new SimpleNamespaceContext(prefMap);
	
	xpath.setNamespaceContext(namespaces);

Object driver = this.class.classLoader.parseClass(new File(projectPath + "/etc/BaseStepUtils.groovy")).GetObj(BaseURL,DataCustodianContext,ThirdPartyContext,log);


//driver._bLogActions = true;
//driver._iSleepBetweenStepsMs = 2000;

try{
	//*********************************************************
	log.info("Scenario: Third Party accesses Subscription");
	//*********************************************************
	// reset DB : run library groovy script
	testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['OpenEspiIntegrationTests'].testCases['Library'].testSteps['resetDB']);
	// Browser Init
	driver.Before();

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Given a Retail Customer with Usage Points");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.login(ServiceEndpointDataCustodian,TestManager,TestManagerPW);
	driver.assertUrlEndsWith("/" + DataCustodianContext + "/custodian/home");


	// upload usage point file
	driver.findElement(By.partialLinkText("Upload")).click();	
	driver.findElement(By.name("file")).sendKeys(TestFile);
		
	driver.findElement(By.name("upload")).click();	
	driver.assertDoesNotContain("Unable to process file");

		
	// add usage point linkage
	driver.findElement(By.partialLinkText("Customer List")).click();
	driver.findElement(By.partialLinkText(TestRetailCustomer)).click();	
	driver.findElement(By.partialLinkText("Add Usage")).click();	
	driver.findElement(By.id("UUID")).clear();
	driver.findElement(By.id("UUID")).sendKeys(usagePointUUID1);
	//driver.findElement(By.id("description")).clear();
	//driver.findElement(By.id("description")).sendKeys(usagePointDescription1);
	driver.findElement(By.name("create")).click();


	driver.logout(ServiceEndpointDataCustodian);
	
	driver.login(ServiceEndpointThirdParty,TestRetailCustomer,TestRetailCustomerPW);
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Given an authorized Third Party");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//driver.login(ServiceEndpointThirdParty,TestRetailCustomer,TestRetailCustomerPW);
	driver.findElement(By.partialLinkText("Data Custodians")).click();	
	driver.findElement(By.name("Data_custodian")).click();	
	driver.findElement(By.name("next")).click();
	
	//driver.submitLoginForm(TestRetailCustomer,TestRetailCustomerPW);
	
	//driver.findElement(By.name("scope")).click();	
	//driver.findElement(By.name("next")).click();	
	//driver.findElement(By.name("scope.FB=4_5_15;IntervalDuration=900;BlockDuration=monthly;HistoryLength=13")).click();
	//driver.findElement(By.name("authorize")).click();	

	driver.findElement(By.name("j_username")).clear();
	driver.findElement(By.name("j_username")).sendKeys(TestRetailCustomer);
	driver.findElement(By.name("j_password")).clear();
	driver.findElement(By.name("j_password")).sendKeys(TestRetailCustomerPW);

	driver.findElement(By.name("submit")).click();
	driver.findElement(By.name("scope")).click();
	driver.findElement(By.name("next")).click();
	driver.findElement(By.name("scope.FB=4_5_15;IntervalDuration=900;BlockDuration=monthly;HistoryLength=13")).click();

	driver.findElement(By.name("authorize")).click(); 
	sleep(5000)

	// logout of Third Party	
	driver.logout(ServiceEndpointThirdParty);

	// logout of DataCustodian	
	driver.logout(ServiceEndpointDataCustodian);
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//driver.logStep("And I log in as Alan Turing into Data Custodian");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//driver.login(driver.DATA_CUSTODIAN_CONTEXT, "alan", "koala");
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("When I log in as Alan Turing");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.login(ServiceEndpointThirdParty,TestRetailCustomer,TestRetailCustomerPW);
	driver.assertContains("Welcome");
	 
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("And I request a Subscription using the REST API");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.findElement(By.partialLinkText("Authorizations")).click();	


	//From next step (which I deleted)
	List<WebElement> rows3 = driver.FindElementsByXpath("//td[@class='subscription_id']");
	String subscription2 = rows3.get(rows3.size() - 1).getText();

	driver.AssertStringNotEmpty(subscription2);
	
	List<WebElement> rows2 = driver.FindElementsByXpath("//td[@class='subscription_id']");
	String access_token = rows2.get(rows2.size() - 1).getText();	

	driver.AssertStringNotEmpty(access_token);	

	//end code copied from next step

	List<WebElement> rows = driver.FindElementsByXpath("//td[@class='subscription_id']");
		
	String subscription = rows.get(rows.size() - 1).getText();
	
//	driver.get(subscription);
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Then I should receive XML for that Subscription");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//	driver.assertXpathExists("/:feed");

	boolean bTestFailed = ServiceTest("GetSaveResponse",true,null,subscription,"test_subscription.xml");
	
	String strOutputDataFile = projectPath + "/../data/" + "test_subscription.xml";
	String strExpr = "";
	
	if(!bTestFailed){

		Document docResponse = builder.parse(strOutputDataFile);

		strExpr = "/ns3:feed/ns3:entry[ns3:id='urn:uuid:" + usagePointUUID1.toLowerCase() + "']";
	
		XPathExpression expr = xpath.compile(strExpr);
		
		NodeList nlNodes = (NodeList) expr.evaluate(docResponse,XPathConstants.NODESET);

		log.info("Retreived " + nlNodes.getLength() + " Entries");
		if(nlNodes.getLength()!=1)
		{
			log.error("Response did not contain the correct number of Entries.");
			testRunner.fail("Response did not contain the correct number of Entries.")
		}
	}
	else
	{
		log.error("Unable to GET subscription resource.");
		testRunner.fail("Unable to GET subscription resource.")		
	}
	

} catch(Exception e) {
	testRunner.fail(driver.getErrorString())
}

//Close the browser
driver.quit();

]]></script></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Feature: OAuth" searchProperties="true" id="fb28775f-2f52-4441-9dd0-0b9b7e7aba02" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="Feature: OAuth"><con:settings/><con:config><script>//******************************************************************************************************************
//******************************************************************************************************************
log.info("Feature: OAuth");
log.info("As Retail Customer, I should be able to see Data Custodian list");
//******************************************************************************************************************
//******************************************************************************************************************
</script></con:config></con:testStep><con:testStep type="groovy" name="Scenario: Retail Customer views Data Custodian list"><con:settings/><con:config><script>import org.openqa.selenium.*;

def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath
def BaseURL = project.getPropertyValue("BaseURL")
def DataCustodianContext = project.getPropertyValue("DataCustodianContext")
def ThirdPartyContext = project.getPropertyValue("ThirdPartyContext")
def ServiceEndpointDataCustodian = BaseURL + "/" + DataCustodianContext
def ServiceEndpointThirdParty = BaseURL + "/" + ThirdPartyContext;
def TestManager=project.getPropertyValue("TestManager")
def TestManagerPW=project.getPropertyValue("TestManagerPW")
def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")
def TestFile=projectPath + "/../data/" + project.getPropertyValue("TestFile")
def usagePointUUID1 = project.getPropertyValue("usagePointUUID1");
def usagePointDescription1 = project.getPropertyValue("usagePointDescription1");

Object driver = this.class.classLoader.parseClass(new File(projectPath + "/etc/BaseStepUtils.groovy")).GetObj(BaseURL,DataCustodianContext,ThirdPartyContext,log);

//driver._bLogActions = true;

try{
	
	//*********************************************************
	log.info("Scenario: Retail Customer views Data Custodian list");
	//*********************************************************
	// reset DB : run library groovy script
	testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['OpenEspiIntegrationTests'].testCases['Library'].testSteps['resetDB']);
	// Browser Init
	driver.Before();
		
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Given a Retail Customer with Usage Points");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.login(ServiceEndpointDataCustodian,TestManager,TestManagerPW);
	driver.assertUrlEndsWith("/" + DataCustodianContext + "/custodian/home");

	// upload usage point file
	driver.findElement(By.partialLinkText("Upload")).click();	
	driver.findElement(By.name("file")).sendKeys(TestFile);
		
	driver.findElement(By.name("upload")).click();	
	driver.assertDoesNotContain("Unable to process file");
	
	// add usage point linkage
	driver.findElement(By.partialLinkText("Customer List")).click();
	driver.findElement(By.partialLinkText(TestRetailCustomer)).click();	
	driver.findElement(By.partialLinkText("Add Usage")).click();	
	driver.findElement(By.id("UUID")).clear();
	driver.findElement(By.id("UUID")).sendKeys(usagePointUUID1);
	driver.findElement(By.id("description")).clear();
	driver.findElement(By.id("description")).sendKeys(usagePointDescription1);
	driver.findElement(By.name("create")).click();


	driver.logout(ServiceEndpointDataCustodian);
	
	driver.login(ServiceEndpointThirdParty,TestRetailCustomer,TestRetailCustomerPW);
		
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("When I navigate to Data Custodian list");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.findElement(By.partialLinkText("Data Custodians")).click();
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Then I should see a list of Data Custodians");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.assertContains("data_custodian");

} catch(Exception e) {
	testRunner.fail(driver.getErrorString())
}

//Close the browser
driver.quit();
</script></con:config></con:testStep><con:testStep type="groovy" name="Scenario: Retail Customer selects Data Custodian for the list"><con:settings/><con:config><script>import org.openqa.selenium.*;

def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath
def BaseURL = project.getPropertyValue("BaseURL")
def DataCustodianContext = project.getPropertyValue("DataCustodianContext")
def ThirdPartyContext = project.getPropertyValue("ThirdPartyContext")
def ServiceEndpointDataCustodian = BaseURL + "/" + DataCustodianContext
def ServiceEndpointThirdParty = BaseURL + "/" + ThirdPartyContext;
def TestManager=project.getPropertyValue("TestManager")
def TestManagerPW=project.getPropertyValue("TestManagerPW")
def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")
def TestFile=projectPath + "/../data/" + project.getPropertyValue("TestFile")
def usagePointUUID1 = project.getPropertyValue("usagePointUUID1");
def usagePointDescription1 = project.getPropertyValue("usagePointDescription1");

Object driver = this.class.classLoader.parseClass(new File(projectPath + "/etc/BaseStepUtils.groovy")).GetObj(BaseURL,DataCustodianContext,ThirdPartyContext,log);


//driver._bLogActions = true;

try{

	//*********************************************************
	log.info("Scenario: Retail Customer selects Data Custodian for the list");
	//*********************************************************
	// reset DB : run library groovy script
	testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['OpenEspiIntegrationTests'].testCases['Library'].testSteps['resetDB']);
	// Browser Init
	driver.Before();
		
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Given a Retail Customer with Usage Points");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.login(ServiceEndpointDataCustodian,TestManager,TestManagerPW);
	driver.assertUrlEndsWith("/" + DataCustodianContext + "/custodian/home");

	// upload usage point file
	driver.findElement(By.partialLinkText("Upload")).click();	
	driver.findElement(By.name("file")).sendKeys(TestFile);
		
	driver.findElement(By.name("upload")).click();	
	driver.assertDoesNotContain("Unable to process file");
	
	// add usage point linkage
	driver.findElement(By.partialLinkText("Customer List")).click();
	driver.findElement(By.partialLinkText(TestRetailCustomer)).click();	
	driver.findElement(By.partialLinkText("Add Usage")).click();	
	driver.findElement(By.id("UUID")).clear();
	driver.findElement(By.id("UUID")).sendKeys(usagePointUUID1);
	driver.findElement(By.id("description")).clear();
	driver.findElement(By.id("description")).sendKeys(usagePointDescription1);
	driver.findElement(By.name("create")).click();

	driver.logout(ServiceEndpointDataCustodian);
	
	driver.login(ServiceEndpointThirdParty,TestRetailCustomer,TestRetailCustomerPW);
		
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("When I select a Data Custodian from the list");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.findElement(By.partialLinkText("Data Custodians")).click();	
	driver.findElement(By.name("Data_custodian")).click();	
	driver.findElement(By.name("next")).click();
		
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Then I should see the Data Custodian login screen");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.assertUrlContains("/DataCustodian");
	driver.assertContains("Login");
        
} catch(Exception e) {
	testRunner.fail(driver.getErrorString())
}

//Close the browser
driver.quit();
</script></con:config></con:testStep><con:testStep type="groovy" name="Scenario: Retail Customer selects Scope"><con:settings/><con:config><script>import org.openqa.selenium.*;

def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath
def BaseURL = project.getPropertyValue("BaseURL")
def DataCustodianContext = project.getPropertyValue("DataCustodianContext")
def ThirdPartyContext = project.getPropertyValue("ThirdPartyContext")
def ServiceEndpointDataCustodian = BaseURL + "/" + DataCustodianContext
def ServiceEndpointThirdParty = BaseURL + "/" + ThirdPartyContext;
def TestManager=project.getPropertyValue("TestManager")
def TestManagerPW=project.getPropertyValue("TestManagerPW")
def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")
def TestFile=projectPath + "/../data/" + project.getPropertyValue("TestFile")
def usagePointUUID1 = project.getPropertyValue("usagePointUUID1");
def usagePointDescription1 = project.getPropertyValue("usagePointDescription1");

Object driver = this.class.classLoader.parseClass(new File(projectPath + "/etc/BaseStepUtils.groovy")).GetObj(BaseURL,DataCustodianContext,ThirdPartyContext,log);


//driver._bLogActions = true;

try{
	
	//*********************************************************
	log.info("Scenario: Retail Customer selects Scope");
	//*********************************************************
	// reset DB : run library groovy script
	testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['OpenEspiIntegrationTests'].testCases['Library'].testSteps['resetDB']);
	// Browser Init
	driver.Before();
		
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Given a Retail Customer with Usage Points");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.login(ServiceEndpointDataCustodian,TestManager,TestManagerPW);
	driver.assertUrlEndsWith("/" + DataCustodianContext + "/custodian/home");


	// upload usage point file
	driver.findElement(By.partialLinkText("Upload")).click();	
	driver.findElement(By.name("file")).sendKeys(TestFile);
		
	driver.findElement(By.name("upload")).click();	
	driver.assertDoesNotContain("Unable to process file");
		
	// add usage point linkage
	driver.findElement(By.partialLinkText("Customer List")).click();
	driver.findElement(By.partialLinkText(TestRetailCustomer)).click();	
	driver.findElement(By.partialLinkText("Add Usage")).click();	
	driver.findElement(By.id("UUID")).clear();
	driver.findElement(By.id("UUID")).sendKeys(usagePointUUID1);
	driver.findElement(By.id("description")).clear();
	driver.findElement(By.id("description")).sendKeys(usagePointDescription1);
	driver.findElement(By.name("create")).click();

	driver.logout(ServiceEndpointDataCustodian);
	
	driver.login(ServiceEndpointThirdParty,TestRetailCustomer,TestRetailCustomerPW);
		
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("When I select a Data Custodian from the list");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.findElement(By.partialLinkText("Data Custodians")).click();	
	driver.findElement(By.name("Data_custodian")).click();	
	driver.findElement(By.name("next")).click();
			
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Then I should see the Data Custodian login screen");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.assertUrlContains("/DataCustodian");
	driver.assertContains("Login");
		
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("When I log into Data Custodian");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.findElement(By.name("j_username")).clear();
	driver.findElement(By.name("j_username")).sendKeys(TestRetailCustomer);	
	driver.findElement(By.name("j_password")).clear();
	driver.findElement(By.name("j_password")).sendKeys(TestRetailCustomerPW);	
	driver.findElement(By.name("submit")).click();
		
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Then I should see Scope selection screen");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.assertContains("Select Scope");
	driver.assertContains("FB=4_5_15;IntervalDuration=3600;BlockDuration=monthly;HistoryLength=13");
	
} catch(Exception e) {
	testRunner.fail(driver.getErrorString())
}

//Close the browser
driver.quit();
</script></con:config></con:testStep><con:testStep type="groovy" name="Scenario: Retail Customer authorizes Third Party"><con:settings/><con:config><script>import org.openqa.selenium.*;

def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath
def BaseURL = project.getPropertyValue("BaseURL")
def DataCustodianContext = project.getPropertyValue("DataCustodianContext")
def ThirdPartyContext = project.getPropertyValue("ThirdPartyContext")
def ServiceEndpointDataCustodian = BaseURL + "/" + DataCustodianContext
def ServiceEndpointThirdParty = BaseURL + "/" + ThirdPartyContext;
def TestManager=project.getPropertyValue("TestManager")
def TestManagerPW=project.getPropertyValue("TestManagerPW")
def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")
def TestFile=projectPath + "/../data/" + project.getPropertyValue("TestFile")
def usagePointUUID1 = project.getPropertyValue("usagePointUUID1");
def usagePointDescription1 = project.getPropertyValue("usagePointDescription1");


Object driver = this.class.classLoader.parseClass(new File(projectPath + "/etc/BaseStepUtils.groovy")).GetObj(BaseURL,DataCustodianContext,ThirdPartyContext,log);


//driver._bLogActions = true;

try{
	
	//*********************************************************
	log.info("Scenario: Retail Customer authorizes Third Party");
	//*********************************************************
	// reset DB : run library groovy script
	testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['OpenEspiIntegrationTests'].testCases['Library'].testSteps['resetDB']);
	// Browser Init
	driver.Before();
		
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Given a Retail Customer with Usage Points");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.login(ServiceEndpointDataCustodian,TestManager,TestManagerPW);
	driver.assertUrlEndsWith("/" + DataCustodianContext + "/custodian/home");

	// upload usage point file
	driver.findElement(By.partialLinkText("Upload")).click();	
	driver.findElement(By.name("file")).sendKeys(TestFile);
		
	driver.findElement(By.name("upload")).click();	
	driver.assertDoesNotContain("Unable to process file");
	
	// add usage point linkage
	driver.findElement(By.partialLinkText("Customer List")).click();
	driver.findElement(By.partialLinkText(TestRetailCustomer)).click();	
	driver.findElement(By.partialLinkText("Add Usage")).click();	
	driver.findElement(By.id("UUID")).clear();
	driver.findElement(By.id("UUID")).sendKeys(usagePointUUID1);
	driver.findElement(By.id("description")).clear();
	driver.findElement(By.id("description")).sendKeys(usagePointDescription1);
	driver.findElement(By.name("create")).click();


	driver.logout(ServiceEndpointDataCustodian);
	
	driver.login(ServiceEndpointThirdParty,TestRetailCustomer,TestRetailCustomerPW);	
		
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("When I select a Data Custodian from the list");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.findElement(By.partialLinkText("Data Custodians")).click();
	driver.findElement(By.name("Data_custodian")).click();
	driver.findElement(By.name("next")).click();
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Then I should see the Data Custodian login screen");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.assertUrlContains("/DataCustodian");
	driver.assertContains("Login");
		
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("When I log into Data Custodian");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.findElement(By.name("j_username")).clear();
	driver.findElement(By.name("j_username")).sendKeys(TestRetailCustomer);	
	driver.findElement(By.name("j_password")).clear();
	driver.findElement(By.name("j_password")).sendKeys(TestRetailCustomerPW);	
	driver.findElement(By.name("submit")).click();
		
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Then I should see Scope selection screen");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.assertContains("Select Scope");
	driver.assertContains("FB=4_5_15;IntervalDuration=3600;BlockDuration=monthly;HistoryLength=13");
		
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("When I select Scopes");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.findElement(By.className("scope")).click();	
	driver.findElement(By.xpath("(//input[@name='scope'])[2]")).click();	
	driver.findElement(By.name("next")).click();	
		
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Then I should see authorization screen");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.assertContains("Please Confirm");
		
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("When I authorize Third Party");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.findElement(By.name("authorize")).click();
		
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Then I should see all my authorizations");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.assertContains("Authorizations");
	driver.assertContains("data_custodian");
	driver.assertContains("DataCustodian/espi/1_1/resource/Batch/Subscription/1");
	
} catch(Exception e) {
	testRunner.fail(driver.getErrorString())
}

//Close the browser
driver.quit();
	</script></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite name="RonsSandbox"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:properties/></con:testSuite><con:testSuite name="MyLHTests"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="MyLHLogin" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Login"><con:settings/><con:config><script>/////////////////////////////////////////////////////////
// Note: Generated by capture using Selenium in FF. 
// Export to Java / JUnit 4 / WebDriver
// Copy and paste into Groovy Script with minor tweaks
/////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////
// Need these imports to run tests
/////////////////////////////////////////////////////////
import org.openqa.selenium.By
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver
import org.openqa.selenium.WebElement
import org.openqa.selenium.firefox.FirefoxDriver
//import org.openqa.selenium.support.ui.ExpectedCondition
//import org.openqa.selenium.support.ui.WebDriverWait
//import org.openqa.selenium.JavascriptExecutor;
//import org.openqa.selenium.support.ui.ExpectedConditions

import java.util.concurrent.TimeUnit;
import java.util.regex.Pattern;
import java.util.concurrent.TimeUnit;
import org.junit.*;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.*;

/////////////////////////////////////////////////////////
// get variables from the project Custom Properties
/////////////////////////////////////////////////////////
def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath

def BaseURL = project.getPropertyValue("BaseURL")
def ServiceEndpoint=BaseURL+"/DataCustodian"
def TestManager=project.getPropertyValue("TestManager")
def TestManagerPW=project.getPropertyValue("TestManagerPW")
//def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
//def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")
def TestRetailCustomer="john"
def TestRetailCustomerPW="password"

def TestFile=projectPath + "/../data/" + project.getPropertyValue("TestFile")

//projectPath.replaceAll("\x5c","\x5c\x5c")

log.info("We are talking to: " + ServiceEndpoint)
log.info("Test File Path: "+ TestFile)


/////////////////////////////////////////////////////////
// Create a new instance of the Firefox driver
/////////////////////////////////////////////////////////
WebDriver driver = new FirefoxDriver()

driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);

// Open the DataCustodian Page
driver.get(ServiceEndpoint)

/////////////////////////////////////////////////////////
// Log in as Manager
/////////////////////////////////////////////////////////
driver.findElement(By.id("login")).click();
driver.findElement(By.name("j_username")).clear()
driver.findElement(By.name("j_username")).sendKeys(TestRetailCustomer)
driver.findElement(By.name("j_password")).clear()
driver.findElement(By.name("j_password")).sendKeys(TestRetailCustomerPW)
driver.findElement(By.name("submit")).click()

sleep(5000)

/////////////////////////////////////////////////////////
// Now to the upload
/////////////////////////////////////////////////////////
driver.findElement(By.partialLinkText("Upload")).click();

sleep(1000)

driver.findElement(By.id("logout")).click();

sleep(1000)

//Close the browser
driver.quit()</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="IntegrationTestwAuthorizationCheck" searchProperties="true" id="4c93cbcb-2350-4831-ae55-497ffbed4900"><con:settings/><con:testStep type="groovy" name="UploadTestUsageDataFile"><con:settings/><con:config><script>/////////////////////////////////////////////////////////
// Note: Generated by capture using Selenium in FF. 
// Export to Java / JUnit 4 / WebDriver
// Copy and paste into Groovy Script with minor tweaks
/////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////
// Need these imports to run tests
/////////////////////////////////////////////////////////
import org.openqa.selenium.By
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver
import org.openqa.selenium.WebElement
import org.openqa.selenium.firefox.FirefoxDriver
//import org.openqa.selenium.support.ui.ExpectedCondition
//import org.openqa.selenium.support.ui.WebDriverWait
//import org.openqa.selenium.JavascriptExecutor;
//import org.openqa.selenium.support.ui.ExpectedConditions

import java.util.concurrent.TimeUnit;
import java.util.regex.Pattern;
import java.util.concurrent.TimeUnit;
import org.junit.*;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.*;

/////////////////////////////////////////////////////////
// get variables from the project Custom Properties
/////////////////////////////////////////////////////////
def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath

def BaseURL = project.getPropertyValue("BaseURL")
def ServiceEndpoint=BaseURL+"/DataCustodian"
def TestManager=project.getPropertyValue("TestManager")
def TestManagerPW=project.getPropertyValue("TestManagerPW")
def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")


def TestFile=projectPath + "/../data/" + project.getPropertyValue("TestFile")

//projectPath.replaceAll("\x5c","\x5c\x5c")

log.info("We are talking to: " + ServiceEndpoint)
log.info("Test File Path: "+ TestFile)


/////////////////////////////////////////////////////////
// Create a new instance of the Firefox driver
/////////////////////////////////////////////////////////
WebDriver driver = new FirefoxDriver()

driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);

// Open the DataCustodian Page
driver.get(ServiceEndpoint)

/////////////////////////////////////////////////////////
// Log in as Manager
/////////////////////////////////////////////////////////
driver.findElement(By.id("login")).click();
driver.findElement(By.name("j_username")).clear()
driver.findElement(By.name("j_username")).sendKeys(TestManager)
driver.findElement(By.name("j_password")).clear()
driver.findElement(By.name("j_password")).sendKeys(TestManagerPW)
driver.findElement(By.name("submit")).click()

/////////////////////////////////////////////////////////
// Now to the upload
/////////////////////////////////////////////////////////
driver.findElement(By.partialLinkText("Upload")).click();
driver.findElement(By.name("file")).sendKeys(TestFile);
driver.findElement(By.name("upload")).click();
driver.findElement(By.partialLinkText("Customer List")).click();
driver.findElement(By.partialLinkText(TestRetailCustomer)).click();
driver.findElement(By.partialLinkText("Add Usage")).click();
driver.findElement(By.id("UUID")).clear();
driver.findElement(By.id("UUID")).sendKeys("48C2A019-5598-4E16-B0F9-49E4FF27F5FB");
//driver.findElement(By.id("description")).clear();
//driver.findElement(By.id("description")).sendKeys("test_usage_data");
driver.findElement(By.name("create")).click();
driver.findElement(By.id("logout")).click();

/////////////////////////////////////////////////////////
// now look at data as Retail Customer
/////////////////////////////////////////////////////////
driver.findElement(By.id("login")).click();
driver.findElement(By.name("j_username")).clear()
driver.findElement(By.name("j_username")).sendKeys(TestRetailCustomer)
driver.findElement(By.name("j_password")).clear()
driver.findElement(By.name("j_password")).sendKeys(TestRetailCustomerPW)
driver.findElement(By.name("submit")).click()
driver.findElement(By.partialLinkText("Usage Points")).click();

driver.findElement(By.partialLinkText("Front Electric Meter")).click();

sleep(5000)
driver.findElement(By.id("logout")).click();

//Close the browser
driver.quit()
</script></con:config></con:testStep><con:testStep type="groovy" name="AuthorizationFromDataCustodianStart"><con:settings/><con:config><script>///////////////////////////////////////////////////////// 
// Note: Generated by capture using Selenium in FF.
// Export to Java / JUnit 4 / WebDriver // Copy and paste into Groovy Script with minor tweaks
/////////////////////////////////////////////////////////
///////////////////////////////////////////////////////// 
// Need these imports to run tests
/////////////////////////////////////////////////////////
import org.openqa.selenium.By
import org.openqa.selenium.WebDriver
import org.openqa.selenium.WebElement
import org.openqa.selenium.firefox.FirefoxDriver
import org.openqa.selenium.support.ui.ExpectedCondition
import org.openqa.selenium.support.ui.WebDriverWait
import java.util.concurrent.TimeUnit;
import java.util.regex.Pattern;
import java.util.concurrent.TimeUnit;
import org.junit.*;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.*;
///////////////////////////////////////////////////////// 
// get variables from the project Custom Properties
/////////////////////////////////////////////////////////
def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def BaseURL = project.getPropertyValue("BaseURL")
def ServiceEndpoint=BaseURL+"/DataCustodian"
def TestManager=project.getPropertyValue("TestManager")
def TestManagerPW=project.getPropertyValue("TestManagerPW")
def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")
def TestFile=project.getPropertyValue("TestFile")
def projectPath = groovyUtils.projectPath
log.info("We are talking to: " + ServiceEndpoint) 
log.info("Test File Path: "+ TestFile)

 ///////////////////////////////////////////////////////// 
 // Create a new instance of the Firefox driver
 ///////////////////////////////////////////////////////// 
 WebDriver driver = new FirefoxDriver()

 driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
 // Open the DataCustodian Page 
 driver.get(ServiceEndpoint)

 ///////////////////////////////////////////////////////// 
 // Log in as Manager
 /////////////////////////////////////////////////////////
driver.findElement(By.id("login")).click();
driver.findElement(By.name("j_username")).clear()
driver.findElement(By.name("j_username")).sendKeys(TestManager)
driver.findElement(By.name("j_password")).clear()
driver.findElement(By.name("j_password")).sendKeys(TestManagerPW)
driver.findElement(By.name("submit")).click()
//driver.findElement(By.partialLinkText("Remove all OAuth tokens")).click();
driver.findElement(By.id("logout")).click();
///////////////////////////////////////////////////////// 
// Log in as Alan and do the OAuth thing
/////////////////////////////////////////////////////////
driver.findElement(By.id("login")).click();
driver.findElement(By.name("j_username")).clear();
driver.findElement(By.name("j_username")).sendKeys(TestRetailCustomer);
driver.findElement(By.name("j_password")).clear();
driver.findElement(By.name("j_password")).sendKeys(TestRetailCustomerPW);
driver.findElement(By.name("submit")).click();
driver.findElement(By.partialLinkText("Third Parties")).click();
driver.findElement(By.name("Third_party")).click();
driver.findElement(By.cssSelector("label")).click();
driver.findElement(By.name("next")).click();
driver.findElement(By.name("j_username")).clear();
driver.findElement(By.name("j_username")).sendKeys(TestRetailCustomer);
driver.findElement(By.name("j_password")).clear();
driver.findElement(By.name("j_password")).sendKeys(TestRetailCustomerPW);
driver.findElement(By.name("submit")).click();
driver.findElement(By.name("scope")).click();
driver.findElement(By.name("next")).click();

driver.findElement(By.name("scope.FB=4_5_15;IntervalDuration=900;BlockDuration=monthly;HistoryLength=13")).click();

driver.findElement(By.name("authorize")).click(); sleep(1000)
driver.findElement(By.partialLinkText("Usage Points")).click();
driver.findElement(By.partialLinkText("Front Electric Meter")).click();
sleep(5000)
///////////////////////////////////////////////////////// 
//Close the browser
/////////////////////////////////////////////////////////
driver.quit() </script></con:config></con:testStep><con:testStep type="groovy" name="CheckAuthorization"><con:settings/><con:config><script>/////////////////////////////////////////////////////////
// Note: Generated by capture using Selenium in FF. 
// Export to Java / JUnit 4 / WebDriver
// Copy and paste into Groovy Script with minor tweaks
/////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////
// Need these imports to run tests
/////////////////////////////////////////////////////////
import org.openqa.selenium.By
import org.openqa.selenium.WebDriver
import org.openqa.selenium.WebElement
import org.openqa.selenium.firefox.FirefoxDriver
import org.openqa.selenium.support.ui.ExpectedCondition
import org.openqa.selenium.support.ui.WebDriverWait
import java.util.concurrent.TimeUnit;
import java.util.regex.Pattern;
import java.util.concurrent.TimeUnit;
import org.junit.*;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.*;

/////////////////////////////////////////////////////////
// get variables from the project Custom Properties
/////////////////////////////////////////////////////////
def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

def BaseURL = project.getPropertyValue("BaseURL")
//def ServiceEndpoint=project.getPropertyValue("ServiceEndpoint")
def ServiceEndpoint=BaseURL
def TestManager=project.getPropertyValue("TestManager")
def TestManagerPW=project.getPropertyValue("TestManagerPW")
def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")
def TestFile=project.getPropertyValue("TestFile")
def projectPath = groovyUtils.projectPath

log.info("We are talking to: " + ServiceEndpoint)
log.info("Test File Path: "+ TestFile)


/////////////////////////////////////////////////////////
// Create a new instance of the Firefox driver
/////////////////////////////////////////////////////////
WebDriver driver = new FirefoxDriver()
    driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);


// Open the DataCustodian Page
driver.get(ServiceEndpoint+"/DataCustodian/")


/////////////////////////////////////////////////////////
// Log in as Alan and check for Authorization
/////////////////////////////////////////////////////////
driver.findElement(By.id("login")).click();
driver.findElement(By.name("j_username")).clear();
driver.findElement(By.name("j_username")).sendKeys(TestRetailCustomer);
driver.findElement(By.name("j_password")).clear();
driver.findElement(By.name("j_password")).sendKeys(TestRetailCustomerPW);
driver.findElement(By.name("submit")).click();

sleep(5000)

driver.findElement(By.partialLinkText("Authorizations")).click();
//sleep(1000)
//driver.findElement(By.partialLinkText("Front Electric Meter")).click();
driver.findElement(By.name("third_party"));

sleep(5000)

/////////////////////////////////////////////////////////
//Close the browser
/////////////////////////////////////////////////////////
driver.quit()
</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="IntegrationTestwAuthorizationCheckServer" searchProperties="true"><con:settings/><con:testStep type="groovy" name="UploadTestUsageDataFile"><con:settings/><con:config><script>/////////////////////////////////////////////////////////
// Note: Generated by capture using Selenium in FF. 
// Export to Java / JUnit 4 / WebDriver
// Copy and paste into Groovy Script with minor tweaks
/////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////
// Need these imports to run tests
/////////////////////////////////////////////////////////
import org.openqa.selenium.By
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver
import org.openqa.selenium.WebElement
import org.openqa.selenium.firefox.FirefoxDriver
//import org.openqa.selenium.support.ui.ExpectedCondition
//import org.openqa.selenium.support.ui.WebDriverWait
//import org.openqa.selenium.JavascriptExecutor;
//import org.openqa.selenium.support.ui.ExpectedConditions

import java.util.concurrent.TimeUnit;
import java.util.regex.Pattern;
import java.util.concurrent.TimeUnit;
import org.junit.*;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.*;

/////////////////////////////////////////////////////////
// get variables from the project Custom Properties
/////////////////////////////////////////////////////////
def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath

//def BaseURL = project.getPropertyValue("BaseURL")
def BaseURL = "https://apps.londonhydro.com"
def ServiceEndpoint=BaseURL+"/DataCustodian"
def TestManager=project.getPropertyValue("TestManager")
def TestManagerPW=project.getPropertyValue("TestManagerPW")
def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")


//def TestFile=projectPath + "/../data/" + project.getPropertyValue("TestFile")
def TestFile= 'C:\\Users\\799943\\Desktop\\OpenESPI-GreenButtonCMDTest\\data\\' + project.getPropertyValue("TestFile")

//projectPath.replaceAll("\x5c","\x5c\x5c")

log.info("We are talking to: " + ServiceEndpoint)
log.info("Test File Path: "+ TestFile)


/////////////////////////////////////////////////////////
// Create a new instance of the Firefox driver
/////////////////////////////////////////////////////////
WebDriver driver = new FirefoxDriver()

driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);

// Open the DataCustodian Page
driver.get(ServiceEndpoint)

/////////////////////////////////////////////////////////
// Log in as Manager
/////////////////////////////////////////////////////////
driver.findElement(By.id("login")).click();
driver.findElement(By.name("j_username")).clear()
driver.findElement(By.name("j_username")).sendKeys(TestManager)
driver.findElement(By.name("j_password")).clear()
driver.findElement(By.name("j_password")).sendKeys(TestManagerPW)
driver.findElement(By.name("submit")).click()

/////////////////////////////////////////////////////////
// Now to the upload
/////////////////////////////////////////////////////////
driver.findElement(By.partialLinkText("Upload")).click();
driver.findElement(By.name("file")).sendKeys(TestFile);
driver.findElement(By.name("upload")).click();
driver.findElement(By.partialLinkText("Customer List")).click();
driver.findElement(By.partialLinkText(TestRetailCustomer)).click();
driver.findElement(By.partialLinkText("Add Usage")).click();
driver.findElement(By.id("UUID")).clear();
driver.findElement(By.id("UUID")).sendKeys("48C2A019-5598-4E16-B0F9-49E4FF27F5FB");
//driver.findElement(By.id("description")).clear();
//driver.findElement(By.id("description")).sendKeys("test_usage_data");
driver.findElement(By.name("create")).click();
driver.findElement(By.id("logout")).click();

/////////////////////////////////////////////////////////
// now look at data as Retail Customer
/////////////////////////////////////////////////////////
driver.findElement(By.id("login")).click();
driver.findElement(By.name("j_username")).clear()
driver.findElement(By.name("j_username")).sendKeys(TestRetailCustomer)
driver.findElement(By.name("j_password")).clear()
driver.findElement(By.name("j_password")).sendKeys(TestRetailCustomerPW)
driver.findElement(By.name("submit")).click()
driver.findElement(By.partialLinkText("Usage Points")).click();

driver.findElement(By.partialLinkText("Front Electric Meter")).click();

sleep(5000)
driver.findElement(By.id("logout")).click();

//Close the browser
driver.quit()
</script></con:config></con:testStep><con:testStep type="groovy" name="AuthorizationFromDataCustodianStart"><con:settings/><con:config><script>///////////////////////////////////////////////////////// 
// Note: Generated by capture using Selenium in FF.
// Export to Java / JUnit 4 / WebDriver // Copy and paste into Groovy Script with minor tweaks
/////////////////////////////////////////////////////////
///////////////////////////////////////////////////////// 
// Need these imports to run tests
/////////////////////////////////////////////////////////
import org.openqa.selenium.By
import org.openqa.selenium.WebDriver
import org.openqa.selenium.WebElement
import org.openqa.selenium.firefox.FirefoxDriver
import org.openqa.selenium.support.ui.ExpectedCondition
import org.openqa.selenium.support.ui.WebDriverWait
import java.util.concurrent.TimeUnit;
import java.util.regex.Pattern;
import java.util.concurrent.TimeUnit;
import org.junit.*;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.*;
///////////////////////////////////////////////////////// 
// get variables from the project Custom Properties
/////////////////////////////////////////////////////////
def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
//def BaseURL = project.getPropertyValue("BaseURL")
def BaseURL = "https://apps.londonhydro.com"
def ServiceEndpoint=BaseURL+"/DataCustodian"
def TestManager=project.getPropertyValue("TestManager")
def TestManagerPW=project.getPropertyValue("TestManagerPW")
def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")
def TestFile=project.getPropertyValue("TestFile")
def projectPath = groovyUtils.projectPath
log.info("We are talking to: " + ServiceEndpoint) 
log.info("Test File Path: "+ TestFile)

 ///////////////////////////////////////////////////////// 
 // Create a new instance of the Firefox driver
 ///////////////////////////////////////////////////////// 
 WebDriver driver = new FirefoxDriver()

 driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
 // Open the DataCustodian Page 
 driver.get(ServiceEndpoint)

 ///////////////////////////////////////////////////////// 
 // Log in as Manager
 /////////////////////////////////////////////////////////
driver.findElement(By.id("login")).click();
driver.findElement(By.name("j_username")).clear()
driver.findElement(By.name("j_username")).sendKeys(TestManager)
driver.findElement(By.name("j_password")).clear()
driver.findElement(By.name("j_password")).sendKeys(TestManagerPW)
driver.findElement(By.name("submit")).click()
//driver.findElement(By.partialLinkText("Remove all OAuth tokens")).click();
driver.findElement(By.id("logout")).click();
///////////////////////////////////////////////////////// 
// Log in as Alan and do the OAuth thing
/////////////////////////////////////////////////////////
driver.findElement(By.id("login")).click();
driver.findElement(By.name("j_username")).clear();
driver.findElement(By.name("j_username")).sendKeys(TestRetailCustomer);
driver.findElement(By.name("j_password")).clear();
driver.findElement(By.name("j_password")).sendKeys(TestRetailCustomerPW);
driver.findElement(By.name("submit")).click();
driver.findElement(By.partialLinkText("Third Parties")).click();
driver.findElement(By.name("Third_party")).click();
driver.findElement(By.cssSelector("label")).click();
driver.findElement(By.name("next")).click();
driver.findElement(By.name("j_username")).clear();
driver.findElement(By.name("j_username")).sendKeys(TestRetailCustomer);
driver.findElement(By.name("j_password")).clear();
driver.findElement(By.name("j_password")).sendKeys(TestRetailCustomerPW);
driver.findElement(By.name("submit")).click();
//driver.findElement(By.name("scope")).click();
driver.findElement(By.xpath("(//input[@name='scope'])[2]")).click();
driver.findElement(By.name("next")).click();

//driver.findElement(By.name("scope.FB=4_5_15;IntervalDuration=900;BlockDuration=monthly;HistoryLength=13")).click();
driver.findElement(By.name("scope.FB=4_5_15;IntervalDuration=3600;BlockDuration=monthly;HistoryLength=13")).click();

driver.findElement(By.name("authorize")).click(); sleep(1000)
driver.findElement(By.partialLinkText("Usage Points")).click();
driver.findElement(By.partialLinkText("Front Electric Meter")).click();
sleep(5000)
///////////////////////////////////////////////////////// 
//Close the browser
/////////////////////////////////////////////////////////
driver.quit() </script></con:config></con:testStep><con:testStep type="groovy" name="CheckAuthorization"><con:settings/><con:config><script>/////////////////////////////////////////////////////////
// Note: Generated by capture using Selenium in FF. 
// Export to Java / JUnit 4 / WebDriver
// Copy and paste into Groovy Script with minor tweaks
/////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////
// Need these imports to run tests
/////////////////////////////////////////////////////////
import org.openqa.selenium.By
import org.openqa.selenium.WebDriver
import org.openqa.selenium.WebElement
import org.openqa.selenium.firefox.FirefoxDriver
import org.openqa.selenium.support.ui.ExpectedCondition
import org.openqa.selenium.support.ui.WebDriverWait
import java.util.concurrent.TimeUnit;
import java.util.regex.Pattern;
import java.util.concurrent.TimeUnit;
import org.junit.*;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.*;

/////////////////////////////////////////////////////////
// get variables from the project Custom Properties
/////////////////////////////////////////////////////////
def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

//def BaseURL = project.getPropertyValue("BaseURL")
def BaseURL = "https://apps.londonhydro.com"
//def ServiceEndpoint=project.getPropertyValue("ServiceEndpoint")
def ServiceEndpoint=BaseURL
def TestManager=project.getPropertyValue("TestManager")
def TestManagerPW=project.getPropertyValue("TestManagerPW")
def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")
def TestFile=project.getPropertyValue("TestFile")
def projectPath = groovyUtils.projectPath

log.info("We are talking to: " + ServiceEndpoint)
log.info("Test File Path: "+ TestFile)


/////////////////////////////////////////////////////////
// Create a new instance of the Firefox driver
/////////////////////////////////////////////////////////
WebDriver driver = new FirefoxDriver()
    driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);


// Open the DataCustodian Page
driver.get(ServiceEndpoint+"/DataCustodian/")


/////////////////////////////////////////////////////////
// Log in as Alan and check for Authorization
/////////////////////////////////////////////////////////
driver.findElement(By.id("login")).click();
driver.findElement(By.name("j_username")).clear();
driver.findElement(By.name("j_username")).sendKeys(TestRetailCustomer);
driver.findElement(By.name("j_password")).clear();
driver.findElement(By.name("j_password")).sendKeys(TestRetailCustomerPW);
driver.findElement(By.name("submit")).click();

sleep(5000)

driver.findElement(By.partialLinkText("Authorizations")).click();
//sleep(1000)
//driver.findElement(By.partialLinkText("Front Electric Meter")).click();
driver.findElement(By.name("third_party"));

sleep(5000)

/////////////////////////////////////////////////////////
//Close the browser
/////////////////////////////////////////////////////////
driver.quit()
</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="IntegrationTestwZFPServer" searchProperties="true"><con:settings/><con:testStep type="groovy" name="UploadTestUsageDataFile"><con:settings/><con:config><script>/////////////////////////////////////////////////////////
// Note: Generated by capture using Selenium in FF. 
// Export to Java / JUnit 4 / WebDriver
// Copy and paste into Groovy Script with minor tweaks
/////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////
// Need these imports to run tests
/////////////////////////////////////////////////////////
import org.openqa.selenium.By
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver
import org.openqa.selenium.WebElement
import org.openqa.selenium.firefox.FirefoxDriver
//import org.openqa.selenium.support.ui.ExpectedCondition
//import org.openqa.selenium.support.ui.WebDriverWait
//import org.openqa.selenium.JavascriptExecutor;
//import org.openqa.selenium.support.ui.ExpectedConditions

import java.util.concurrent.TimeUnit;
import java.util.regex.Pattern;
import java.util.concurrent.TimeUnit;
import org.junit.*;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.*;

/////////////////////////////////////////////////////////
// get variables from the project Custom Properties
/////////////////////////////////////////////////////////
def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath

//def BaseURL = project.getPropertyValue("BaseURL")
def BaseURL = "https://apps.londonhydro.com"
def ServiceEndpoint=BaseURL+"/DataCustodian"
def TestManager=project.getPropertyValue("TestManager")
def TestManagerPW=project.getPropertyValue("TestManagerPW")
//def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
//def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")
def TestRetailCustomer="charles"
def TestRetailCustomerPW="koala"


//def TestFile=projectPath + "/../data/" + project.getPropertyValue("TestFile")
def TestFile= 'C:\\Users\\799943\\Desktop\\OpenESPI-GreenButtonCMDTest\\data\\' + project.getPropertyValue("TestFile")

//projectPath.replaceAll("\x5c","\x5c\x5c")

log.info("We are talking to: " + ServiceEndpoint)
log.info("Test File Path: "+ TestFile)


/////////////////////////////////////////////////////////
// Create a new instance of the Firefox driver
/////////////////////////////////////////////////////////
WebDriver driver = new FirefoxDriver()

driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);

// Open the DataCustodian Page
driver.get(ServiceEndpoint)

/////////////////////////////////////////////////////////
// Log in as Manager
/////////////////////////////////////////////////////////
driver.findElement(By.id("login")).click();
driver.findElement(By.name("j_username")).clear()
driver.findElement(By.name("j_username")).sendKeys(TestManager)
driver.findElement(By.name("j_password")).clear()
driver.findElement(By.name("j_password")).sendKeys(TestManagerPW)
driver.findElement(By.name("submit")).click()

/////////////////////////////////////////////////////////
// Now to the upload
/////////////////////////////////////////////////////////
driver.findElement(By.partialLinkText("Upload")).click();
driver.findElement(By.name("file")).sendKeys(TestFile);
driver.findElement(By.name("upload")).click();
driver.findElement(By.partialLinkText("Customer List")).click();
driver.findElement(By.partialLinkText(TestRetailCustomer)).click();
driver.findElement(By.partialLinkText("Add Usage")).click();
driver.findElement(By.id("UUID")).clear();
driver.findElement(By.id("UUID")).sendKeys("48C2A019-5598-4E16-B0F9-49E4FF27F5FB");
//driver.findElement(By.id("description")).clear();
//driver.findElement(By.id("description")).sendKeys("test_usage_data");
driver.findElement(By.name("create")).click();
driver.findElement(By.id("logout")).click();

/////////////////////////////////////////////////////////
// now look at data as Retail Customer
/////////////////////////////////////////////////////////
driver.findElement(By.id("login")).click();
driver.findElement(By.name("j_username")).clear()
driver.findElement(By.name("j_username")).sendKeys(TestRetailCustomer)
driver.findElement(By.name("j_password")).clear()
driver.findElement(By.name("j_password")).sendKeys(TestRetailCustomerPW)
driver.findElement(By.name("submit")).click()
driver.findElement(By.partialLinkText("Usage Points")).click();

driver.findElement(By.partialLinkText("Front Electric Meter")).click();

sleep(5000)
driver.findElement(By.id("logout")).click();

//Close the browser
driver.quit()
</script></con:config></con:testStep><con:testStep type="groovy" name="AuthorizationFromDataCustodianStart"><con:settings/><con:config><script>///////////////////////////////////////////////////////// 
// Note: Generated by capture using Selenium in FF.
// Export to Java / JUnit 4 / WebDriver // Copy and paste into Groovy Script with minor tweaks
/////////////////////////////////////////////////////////
///////////////////////////////////////////////////////// 
// Need these imports to run tests
/////////////////////////////////////////////////////////
import org.openqa.selenium.By
import org.openqa.selenium.WebDriver
import org.openqa.selenium.WebElement
import org.openqa.selenium.firefox.FirefoxDriver
import org.openqa.selenium.support.ui.ExpectedCondition
import org.openqa.selenium.support.ui.WebDriverWait
import java.util.concurrent.TimeUnit;
import java.util.regex.Pattern;
import java.util.concurrent.TimeUnit;
import org.junit.*;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.*;
///////////////////////////////////////////////////////// 
// get variables from the project Custom Properties
/////////////////////////////////////////////////////////
def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
//def BaseURL = project.getPropertyValue("BaseURL")
def BaseURL = "https://apps.londonhydro.com"
def ServiceEndpoint=BaseURL+"/DataCustodian"
def TestManager=project.getPropertyValue("TestManager")
def TestManagerPW=project.getPropertyValue("TestManagerPW")
//def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
//def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")
def TestRetailCustomerDC="charles"
def TestRetailCustomerPWDC="koala"
def TestRetailCustomer="chris.sivalingam@zerofootprint.net"
def TestRetailCustomerPW="123456"
def TestFile=project.getPropertyValue("TestFile")
def projectPath = groovyUtils.projectPath
log.info("We are talking to: " + ServiceEndpoint) 
log.info("Test File Path: "+ TestFile)

 ///////////////////////////////////////////////////////// 
 // Create a new instance of the Firefox driver
 ///////////////////////////////////////////////////////// 
 WebDriver driver = new FirefoxDriver()

 driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
 // Open the DataCustodian Page 
 driver.get(ServiceEndpoint)

 ///////////////////////////////////////////////////////// 
 // Log in as Manager
 /////////////////////////////////////////////////////////
driver.findElement(By.id("login")).click();
driver.findElement(By.name("j_username")).clear()
driver.findElement(By.name("j_username")).sendKeys(TestManager)
driver.findElement(By.name("j_password")).clear()
driver.findElement(By.name("j_password")).sendKeys(TestManagerPW)
driver.findElement(By.name("submit")).click()
//driver.findElement(By.partialLinkText("Remove all OAuth tokens")).click();
driver.findElement(By.id("logout")).click();
///////////////////////////////////////////////////////// 
// Log in as Alan and do the OAuth thing
/////////////////////////////////////////////////////////
driver.findElement(By.id("login")).click();
driver.findElement(By.name("j_username")).clear();
driver.findElement(By.name("j_username")).sendKeys(TestRetailCustomerDC);
driver.findElement(By.name("j_password")).clear();
driver.findElement(By.name("j_password")).sendKeys(TestRetailCustomerPWDC);
driver.findElement(By.name("submit")).click();
driver.findElement(By.partialLinkText("Third Parties")).click();
//driver.findElement(By.name("Third_party")).click();
driver.findElement(By.xpath("(//input[@name='Third_party'])[2]")).click();
//driver.findElement(By.cssSelector("label")).click();
driver.findElement(By.name("next")).click();
sleep(5000)
driver.findElement(By.id("popupname")).clear();
driver.findElement(By.id("popupname")).sendKeys(TestRetailCustomer);
driver.findElement(By.id("popuppassword")).clear();
driver.findElement(By.id("popuppassword")).sendKeys(TestRetailCustomerPW);
//driver.findElement(By.id("signin_submit")).click();
sleep(3000)
driver.findElement(By.partialLinkText("Continue")).click();

/*
driver.findElement(By.name("scope")).click();
driver.findElement(By.name("next")).click();

driver.findElement(By.name("scope.FB=4_5_15;IntervalDuration=900;BlockDuration=monthly;HistoryLength=13")).click();

driver.findElement(By.name("authorize")).click(); sleep(1000)
driver.findElement(By.partialLinkText("Usage Points")).click();
driver.findElement(By.partialLinkText("Front Electric Meter")).click();
sleep(5000)
///////////////////////////////////////////////////////// 
//Close the browser
/////////////////////////////////////////////////////////

*/

sleep(10000)

driver.quit() </script></con:config></con:testStep><con:testStep type="groovy" name="CheckAuthorization"><con:settings/><con:config><script>/////////////////////////////////////////////////////////
// Note: Generated by capture using Selenium in FF. 
// Export to Java / JUnit 4 / WebDriver
// Copy and paste into Groovy Script with minor tweaks
/////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////
// Need these imports to run tests
/////////////////////////////////////////////////////////
import org.openqa.selenium.By
import org.openqa.selenium.WebDriver
import org.openqa.selenium.WebElement
import org.openqa.selenium.firefox.FirefoxDriver
import org.openqa.selenium.support.ui.ExpectedCondition
import org.openqa.selenium.support.ui.WebDriverWait
import java.util.concurrent.TimeUnit;
import java.util.regex.Pattern;
import java.util.concurrent.TimeUnit;
import org.junit.*;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.*;

/////////////////////////////////////////////////////////
// get variables from the project Custom Properties
/////////////////////////////////////////////////////////
def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

//def BaseURL = project.getPropertyValue("BaseURL")
def baseURL = "https://apps.londonhydro.com"
//def ServiceEndpoint=project.getPropertyValue("ServiceEndpoint")
def ServiceEndpoint=BaseURL
def TestManager=project.getPropertyValue("TestManager")
def TestManagerPW=project.getPropertyValue("TestManagerPW")
def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")
def TestFile=project.getPropertyValue("TestFile")
def projectPath = groovyUtils.projectPath

log.info("We are talking to: " + ServiceEndpoint)
log.info("Test File Path: "+ TestFile)


/////////////////////////////////////////////////////////
// Create a new instance of the Firefox driver
/////////////////////////////////////////////////////////
WebDriver driver = new FirefoxDriver()
    driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);


// Open the DataCustodian Page
driver.get(ServiceEndpoint+"/DataCustodian/")


/////////////////////////////////////////////////////////
// Log in as Alan and check for Authorization
/////////////////////////////////////////////////////////
driver.findElement(By.id("login")).click();
driver.findElement(By.name("j_username")).clear();
driver.findElement(By.name("j_username")).sendKeys(TestRetailCustomer);
driver.findElement(By.name("j_password")).clear();
driver.findElement(By.name("j_password")).sendKeys(TestRetailCustomerPW);
driver.findElement(By.name("submit")).click();

sleep(5000)

driver.findElement(By.partialLinkText("Authorizations")).click();
//sleep(1000)
//driver.findElement(By.partialLinkText("Front Electric Meter")).click();
driver.findElement(By.name("third_party"));

sleep(5000)

/////////////////////////////////////////////////////////
//Close the browser
/////////////////////////////////////////////////////////
driver.quit()
</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Feature: Notification Server" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="Feature: Notification"><con:settings/><con:config><script>//******************************************************************************************************************
//******************************************************************************************************************
log.info("Feature: Notification");
log.info("  As Data Custodian,");
log.info("  I should be able to notify Third Party about data updates,");
log.info("  So Third Party can download updated data");
//******************************************************************************************************************
//******************************************************************************************************************
</script></con:config></con:testStep><con:testStep type="groovy" name="Scenario: Data Custodian notifies Third Party of updated Subscription"><con:settings/><con:config><script>import org.openqa.selenium.*;

def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath
//def BaseURL = project.getPropertyValue("BaseURL")
def BaseURL = "https://apps.londonhydro.com"
def DataCustodianContext = project.getPropertyValue("DataCustodianContext")
def ThirdPartyContext = project.getPropertyValue("ThirdPartyContext")
def ServiceEndpointDataCustodian = BaseURL + "/" + DataCustodianContext
def ServiceEndpointThirdParty = BaseURL + "/" + ThirdPartyContext;
def TestManager=project.getPropertyValue("TestManager")
def TestManagerPW=project.getPropertyValue("TestManagerPW")
def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")
//def TestFile=projectPath + "/../data/" + project.getPropertyValue("TestFile")
def TestFile= 'C:\\Users\\799943\\Desktop\\OpenESPI-GreenButtonCMDTest\\data\\' + project.getPropertyValue("TestFile")
def usagePointUUID1 = project.getPropertyValue("usagePointUUID1");
def usagePointDescription1 = project.getPropertyValue("usagePointDescription1");

Object driver = this.class.classLoader.parseClass(new File(projectPath + "/etc/BaseStepUtils.groovy")).GetObj(BaseURL,DataCustodianContext,ThirdPartyContext,log);


//def TestFile2=projectPath + "/../data/" + project.getPropertyValue("TestFile2")
def TestFile2= 'C:\\Users\\799943\\Desktop\\OpenESPI-GreenButtonCMDTest\\data\\' + project.getPropertyValue("TestFile2");
def usagePointUUID2 = project.getPropertyValue("usagePointUUID2");
def usagePointDescription2 = project.getPropertyValue("usagePointDescription2");

//driver._bLogActions = true;

try{
	//*********************************************************
	log.info("Scenario: Data Custodian notifies Third Party of updated Subscription");
	//*********************************************************
	// reset DB : run library groovy script
	testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['OpenEspiIntegrationTests'].testCases['Library'].testSteps['resetDB']);
	// Browser Init
	driver.Before();
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Given a Retail Customer with Usage Points");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.login(ServiceEndpointDataCustodian,TestManager,TestManagerPW);
	driver.assertUrlEndsWith("/" + DataCustodianContext + "/custodian/home");

	// upload usage point file
	driver.findElement(By.partialLinkText("Upload")).click();	
	driver.findElement(By.name("file")).sendKeys(TestFile);
		
	driver.findElement(By.name("upload")).click();	
	driver.assertDoesNotContain("Unable to process file");
	
	// add usage point linkage
	driver.findElement(By.partialLinkText("Customer List")).click();
	driver.findElement(By.partialLinkText(TestRetailCustomer)).click();	
	driver.findElement(By.partialLinkText("Add Usage")).click();	
	driver.findElement(By.id("UUID")).clear();
	driver.findElement(By.id("UUID")).sendKeys(usagePointUUID1);
	//driver.findElement(By.id("description")).clear();
	//driver.findElement(By.id("description")).sendKeys(usagePointDescription1);
	driver.findElement(By.name("create")).click();

	driver.logout(ServiceEndpointDataCustodian);
	
	driver.login(ServiceEndpointThirdParty,TestRetailCustomer,TestRetailCustomerPW);
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("And a Third Party with an updated subscription");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logout(ServiceEndpointThirdParty);
	
	driver.login(ServiceEndpointThirdParty,TestManager,TestManagerPW);
	
	driver.findElement(By.partialLinkText("Batch Lists")).click();
	driver.assertDoesNotContain("Whoops");

	log.info("The following step may take up to 30 seconds to complete.");
	int OriginalnumberOfSubscriptions = driver.GetNumElsByTagName("h2");
	log.info("Original number of subscriptions=" + OriginalnumberOfSubscriptions);

	driver.logout(ServiceEndpointThirdParty);
	
	driver.login(ServiceEndpointThirdParty,TestRetailCustomer,TestRetailCustomerPW);
	driver.findElement(By.partialLinkText("Data Custodians")).click();	
	driver.findElement(By.name("Data_custodian")).click();	
	driver.findElement(By.name("next")).click();
	
	driver.submitLoginForm(TestRetailCustomer,TestRetailCustomerPW);
	
	driver.findElement(By.name("scope")).click();	
	driver.findElement(By.name("next")).click();	
	//driver.findElement(By.name("scope.FB=4_5_15;IntervalDuration=900;BlockDuration=monthly;HistoryLength=13")).click();
	//driver.findElement(By.name("authorize")).click();	

	driver.logout(ServiceEndpointDataCustodian);

	driver.logout(ServiceEndpointThirdParty);
	
	driver.login(ServiceEndpointDataCustodian, TestManager,TestManagerPW);
	
	// upload usage point file Sweet Usage Point
	driver.findElement(By.partialLinkText("Upload")).click();		
	driver.findElement(By.name("file")).sendKeys(TestFile2);
	driver.findElement(By.name("upload")).click();	
	
	driver.assertDoesNotContain("Unable to process file");
	
	// add usage point linkage
	driver.findElement(By.partialLinkText("Customer List")).click();		
	driver.findElement(By.partialLinkText(TestRetailCustomer)).click();		
	driver.findElement(By.partialLinkText("Add Usage")).click();
	driver.findElement(By.id("UUID")).clear();
	driver.findElement(By.id("UUID")).sendKeys(usagePointUUID2);
	//driver.findElement(By.id("description")).clear();
	//driver.findElement(By.id("description")).sendKeys(usagePointDescription2);
	driver.findElement(By.name("create")).click();	
	
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("When I notify the Third Party");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logout(ServiceEndpointDataCustodian);
	driver.login(ServiceEndpointDataCustodian,TestManager,TestManagerPW);
	driver.findElement(By.partialLinkText("Notify Third Party")).click();	
        
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Then the Third Party should be notified of the update");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logout(ServiceEndpointDataCustodian);
	driver.login(ServiceEndpointThirdParty,TestManager,TestManagerPW);

	driver.assertContains("Welcome");

	driver.findElement(By.partialLinkText("Batch Lists")).click();

	int numberOfSubscriptions = driver.GetNumElsByTagName("h2");

	log.info("New number of subscriptions=" + numberOfSubscriptions);
	
	//if(numberOfSubscriptions != 1)
	if(numberOfSubscriptions &lt; OriginalnumberOfSubscriptions)
	{
		log.error("unexpected number of subscriptions");
		testRunner.fail("unexpected number of subscriptions");
	}

	driver.assertContains("/espi/1_1/resource/Batch/Subscription/");
	
} catch(Exception e) {
	testRunner.fail(driver.getErrorString())
}

//Close the browser
driver.quit();

</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Feature: Subscription Server" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="Feature: Subscription"><con:settings/><con:config><script>//******************************************************************************************************************
//******************************************************************************************************************
log.info("Feature: Subscription");
log.info("  As a Third Party");
log.info("  I want to access Retail Customer data");
log.info("  So that I can display Retail Customer data");
//******************************************************************************************************************
//******************************************************************************************************************
</script></con:config></con:testStep><con:testStep type="groovy" name="Scenario: Third Party accesses Subscription"><con:settings/><con:config><script><![CDATA[import org.openqa.selenium.*;

import org.xml.sax.SAXException;
import org.w3c.dom.*;
import javax.xml.parsers.*;
import javax.xml.xpath.*;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import javax.xml.namespace.NamespaceContext;


public class SimpleNamespaceContext implements NamespaceContext {

    private final Map<String, String> PREF_MAP = new HashMap<String, String>();

    public SimpleNamespaceContext(final Map<String, String> prefMap) {
        PREF_MAP.putAll(prefMap);       
    }

    public String getNamespaceURI(String prefix) {
        return PREF_MAP.get(prefix);
    }

    public String getPrefix(String uri) {
        throw new UnsupportedOperationException();
    }

    public Iterator getPrefixes(String uri) {
        throw new UnsupportedOperationException();
    }

}

public boolean ServiceTest(String strTestType,boolean bShouldPass,String strFileName,String strResource,String strOutputFile)
{
	tc = testRunner.testCase.testSuite.project.testSuites["OpenEspiIntegrationTests"].testCases["Library"]
	tc.setPropertyValue("resourceTestFileName", strFileName)
	tc.setPropertyValue("testType", strTestType)
	tc.setPropertyValue("resourceOutputFileName", strOutputFile)
	tc.setPropertyValue("resource", strResource)
	
	if(bShouldPass) {
		tc.setPropertyValue("testShouldPass", "TRUE")
	}
	else {
		tc.setPropertyValue("testShouldPass", "FALSE")
	}
	
	testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['OpenEspiIntegrationTests'].testCases['Library'].testSteps['resourceTests']);

	String strResult = tc.getPropertyValue("testFailed");	

	boolean bResult = false;
	
	if(strResult.equals("TRUE")) {
		bResult = true;
	}

	return bResult;
}




def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath
def BaseURL = "https://apps.londonhydro.com";
def DataCustodianContext = project.getPropertyValue("DataCustodianContext")
def ThirdPartyContext = project.getPropertyValue("ThirdPartyContext")
def ServiceEndpointDataCustodian = BaseURL + "/" + DataCustodianContext
def ServiceEndpointThirdParty = BaseURL + "/" + ThirdPartyContext;
def TestManager=project.getPropertyValue("TestManager")
def TestManagerPW=project.getPropertyValue("TestManagerPW")
def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")
def TestFile='C:\\Users\\799943\\Desktop\\OpenESPI-GreenButtonCMDTest\\data\\' + project.getPropertyValue("TestFile")
def usagePointUUID1 = project.getPropertyValue("usagePointUUID1");
def usagePointDescription1 = project.getPropertyValue("usagePointDescription1");


	DocumentBuilderFactory domFactory = DocumentBuilderFactory.newInstance();
	domFactory.setNamespaceAware(true); 
	DocumentBuilder builder = domFactory.newDocumentBuilder();

	XPath xpath = XPathFactory.newInstance().newXPath();
	
	// add namespaces
	HashMap<String, String> prefMap = new HashMap<String, String>() {{
	    put("espi", "http://naesb.org/espi");
	    put("ns3", "http://www.w3.org/2005/Atom");
	}};
	
	SimpleNamespaceContext namespaces = new SimpleNamespaceContext(prefMap);
	
	xpath.setNamespaceContext(namespaces);

Object driver = this.class.classLoader.parseClass(new File("C:\\Users\\799943\\Desktop\\OpenESPI-GreenButtonCMDTest\\SOAPUI\\etc\\BaseStepUtils.groovy")).GetObj(BaseURL,DataCustodianContext,ThirdPartyContext,log);


//driver._bLogActions = true;
//driver._iSleepBetweenStepsMs = 2000;

try{
	//*********************************************************
	log.info("Scenario: Third Party accesses Subscription");
	//*********************************************************
	// reset DB : run library groovy script
	//testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['OpenEspiIntegrationTests'].testCases['Library'].testSteps['resetDB']);
	// Browser Init
	driver.Before();

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Given a Retail Customer with Usage Points");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.login(ServiceEndpointDataCustodian,TestManager,TestManagerPW);
	driver.assertUrlEndsWith("/" + DataCustodianContext + "/custodian/home");


	// upload usage point file
	driver.findElement(By.partialLinkText("Upload")).click();	
	driver.findElement(By.name("file")).sendKeys(TestFile);
		
	driver.findElement(By.name("upload")).click();	
	driver.assertDoesNotContain("Unable to process file");

		
	// add usage point linkage
	driver.findElement(By.partialLinkText("Customer List")).click();
	driver.findElement(By.partialLinkText(TestRetailCustomer)).click();	
	driver.findElement(By.partialLinkText("Add Usage")).click();	
	driver.findElement(By.id("UUID")).clear();
	driver.findElement(By.id("UUID")).sendKeys(usagePointUUID1);
	//driver.findElement(By.id("description")).clear();
	//driver.findElement(By.id("description")).sendKeys(usagePointDescription1);
	driver.findElement(By.name("create")).click();


	driver.logout(ServiceEndpointDataCustodian);
	
	driver.login(ServiceEndpointThirdParty,TestRetailCustomer,TestRetailCustomerPW);
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Given an authorized Third Party");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//driver.login(ServiceEndpointThirdParty,TestRetailCustomer,TestRetailCustomerPW);
	driver.findElement(By.partialLinkText("Data Custodians")).click();	
	driver.findElement(By.name("Data_custodian")).click();	
	driver.findElement(By.name("next")).click();
	
	//driver.submitLoginForm(TestRetailCustomer,TestRetailCustomerPW);
	
	//driver.findElement(By.name("scope")).click();	
	//driver.findElement(By.name("next")).click();	
	//driver.findElement(By.name("scope.FB=4_5_15;IntervalDuration=900;BlockDuration=monthly;HistoryLength=13")).click();
	//driver.findElement(By.name("authorize")).click();	

	driver.findElement(By.name("j_username")).clear();
	driver.findElement(By.name("j_username")).sendKeys(TestRetailCustomer);
	driver.findElement(By.name("j_password")).clear();
	driver.findElement(By.name("j_password")).sendKeys(TestRetailCustomerPW);

	driver.findElement(By.name("submit")).click();
	driver.findElement(By.name("scope")).click();
	driver.findElement(By.name("next")).click();
	//driver.findElement(By.name("scope.FB=4_5_15;IntervalDuration=900;BlockDuration=monthly;HistoryLength=13")).click();

	//driver.findElement(By.name("authorize")).click(); 
	sleep(5000)

	// logout of Third Party	
	driver.logout(ServiceEndpointThirdParty);

	// logout of DataCustodian	
	driver.logout(ServiceEndpointDataCustodian);
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//driver.logStep("And I log in as Alan Turing into Data Custodian");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//driver.login(driver.DATA_CUSTODIAN_CONTEXT, "alan", "koala");
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("When I log in as Alan Turing");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.login(ServiceEndpointThirdParty,TestRetailCustomer,TestRetailCustomerPW);
	driver.assertContains("Welcome");
	 
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("And I request a Subscription using the REST API");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.findElement(By.partialLinkText("Authorizations")).click();	


	//From next step (which I deleted)
	List<WebElement> rows3 = driver.FindElementsByXpath("//td[@class='subscription_id']");
	String subscription2 = rows3.get(rows3.size() - 1).getText();

	driver.AssertStringNotEmpty(subscription2);
	
	List<WebElement> rows2 = driver.FindElementsByXpath("//td[@class='subscription_id']");
	String access_token = rows2.get(rows2.size() - 1).getText();	

	driver.AssertStringNotEmpty(access_token);	

	//end code copied from next step

	List<WebElement> rows = driver.FindElementsByXpath("//td[@class='subscription_id']");
		
	String subscription = rows.get(rows.size() - 1).getText();
	
//	driver.get(subscription);
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Then I should receive XML for that Subscription");
	//driver.logStep(subscription);
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//	driver.assertXpathExists("/:feed");

	boolean bTestFailed = ServiceTest("GetSaveResponse",true,null,subscription,"test_subscription.xml");
	
	String strOutputDataFile = "C:\\Users\\799943\\Desktop\\OpenESPI-GreenButtonCMDTest\\data\\" + "test_subscription.xml";
	String strExpr = "";
	
	if(!bTestFailed){

		Document docResponse = builder.parse(strOutputDataFile);

		strExpr = "/ns3:feed/ns3:entry[ns3:id='urn:uuid:" + usagePointUUID1.toLowerCase() + "']";
	
		XPathExpression expr = xpath.compile(strExpr);
		
		NodeList nlNodes = (NodeList) expr.evaluate(docResponse,XPathConstants.NODESET);

		log.info("Retreived " + nlNodes.getLength() + " Entries");
		if(nlNodes.getLength()!=1)
		{
			log.error("Response did not contain the correct number of Entries.");
			testRunner.fail("Response did not contain the correct number of Entries.")
		}
	}
	else
	{
		log.error("Unable to GET subscription resource.");
		testRunner.fail("Unable to GET subscription resource.")		
	}
	

} catch(Exception e) {
	testRunner.fail(driver.getErrorString())
}

//Close the browser
driver.quit();

]]></script></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Feature: OAuth Server" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="Feature: OAuth"><con:settings/><con:config><script>//******************************************************************************************************************
//******************************************************************************************************************
log.info("Feature: OAuth");
log.info("As Retail Customer, I should be able to see Data Custodian list");
//******************************************************************************************************************
//******************************************************************************************************************
</script></con:config></con:testStep><con:testStep type="groovy" name="Scenario: Retail Customer views Data Custodian list"><con:settings/><con:config><script>import org.openqa.selenium.*;

def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath
//def BaseURL = project.getPropertyValue("BaseURL")
def BaseURL = "https://apps.londonhydro.com"
def DataCustodianContext = project.getPropertyValue("DataCustodianContext")
def ThirdPartyContext = project.getPropertyValue("ThirdPartyContext")
def ServiceEndpointDataCustodian = BaseURL + "/" + DataCustodianContext
def ServiceEndpointThirdParty = BaseURL + "/" + ThirdPartyContext;
def TestManager=project.getPropertyValue("TestManager")
def TestManagerPW=project.getPropertyValue("TestManagerPW")
def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")
//def TestFile=projectPath + "/../data/" + project.getPropertyValue("TestFile")
def TestFile= 'C:\\Users\\799943\\Desktop\\OpenESPI-GreenButtonCMDTest\\data\\' + project.getPropertyValue("TestFile")
def usagePointUUID1 = project.getPropertyValue("usagePointUUID1");
def usagePointDescription1 = project.getPropertyValue("usagePointDescription1");

Object driver = this.class.classLoader.parseClass(new File(projectPath + "/etc/BaseStepUtils.groovy")).GetObj(BaseURL,DataCustodianContext,ThirdPartyContext,log);

//driver._bLogActions = true;

try{
	
	//*********************************************************
	log.info("Scenario: Retail Customer views Data Custodian list");
	//*********************************************************
	// reset DB : run library groovy script
	//testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['OpenEspiIntegrationTests'].testCases['Library'].testSteps['resetDB']);
	// Browser Init
	driver.Before();
		
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Given a Retail Customer with Usage Points");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.login(ServiceEndpointDataCustodian,TestManager,TestManagerPW);
	driver.assertUrlEndsWith("/" + DataCustodianContext + "/custodian/home");

	// upload usage point file
	driver.findElement(By.partialLinkText("Upload")).click();	
	driver.findElement(By.name("file")).sendKeys(TestFile);
		
	driver.findElement(By.name("upload")).click();	
	driver.assertDoesNotContain("Unable to process file");
	
	// add usage point linkage
	driver.findElement(By.partialLinkText("Customer List")).click();
	driver.findElement(By.partialLinkText(TestRetailCustomer)).click();	
	driver.findElement(By.partialLinkText("Add Usage")).click();	
	driver.findElement(By.id("UUID")).clear();
	driver.findElement(By.id("UUID")).sendKeys(usagePointUUID1);
	//driver.findElement(By.id("description")).clear();
	//driver.findElement(By.id("description")).sendKeys(usagePointDescription1);
	driver.findElement(By.name("create")).click();


	driver.logout(ServiceEndpointDataCustodian);
	
	driver.login(ServiceEndpointThirdParty,TestRetailCustomer,TestRetailCustomerPW);
		
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("When I navigate to Data Custodian list");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.findElement(By.partialLinkText("Data Custodians")).click();
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Then I should see a list of Data Custodians");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.assertContains("data_custodian");

} catch(Exception e) {
	testRunner.fail(driver.getErrorString())
}

//Close the browser
driver.quit();
</script></con:config></con:testStep><con:testStep type="groovy" name="Scenario: Retail Customer selects Data Custodian for the list"><con:settings/><con:config><script>import org.openqa.selenium.*;

def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath
//def BaseURL = project.getPropertyValue("BaseURL")
def BaseURL = "https://apps.londonhydro.com"
def DataCustodianContext = project.getPropertyValue("DataCustodianContext")
def ThirdPartyContext = project.getPropertyValue("ThirdPartyContext")
def ServiceEndpointDataCustodian = BaseURL + "/" + DataCustodianContext
def ServiceEndpointThirdParty = BaseURL + "/" + ThirdPartyContext;
def TestManager=project.getPropertyValue("TestManager")
def TestManagerPW=project.getPropertyValue("TestManagerPW")
def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")
//def TestFile=projectPath + "/../data/" + project.getPropertyValue("TestFile")
def TestFile= 'C:\\Users\\799943\\Desktop\\OpenESPI-GreenButtonCMDTest\\data\\' + project.getPropertyValue("TestFile")
def usagePointUUID1 = project.getPropertyValue("usagePointUUID1");
def usagePointDescription1 = project.getPropertyValue("usagePointDescription1");

Object driver = this.class.classLoader.parseClass(new File(projectPath + "/etc/BaseStepUtils.groovy")).GetObj(BaseURL,DataCustodianContext,ThirdPartyContext,log);


//driver._bLogActions = true;

try{

	//*********************************************************
	log.info("Scenario: Retail Customer selects Data Custodian for the list");
	//*********************************************************
	// reset DB : run library groovy script
	//testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['OpenEspiIntegrationTests'].testCases['Library'].testSteps['resetDB']);
	// Browser Init
	driver.Before();
		
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Given a Retail Customer with Usage Points");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.login(ServiceEndpointDataCustodian,TestManager,TestManagerPW);
	driver.assertUrlEndsWith("/" + DataCustodianContext + "/custodian/home");

	// upload usage point file
	driver.findElement(By.partialLinkText("Upload")).click();	
	driver.findElement(By.name("file")).sendKeys(TestFile);
		
	driver.findElement(By.name("upload")).click();	
	driver.assertDoesNotContain("Unable to process file");
	
	// add usage point linkage
	driver.findElement(By.partialLinkText("Customer List")).click();
	driver.findElement(By.partialLinkText(TestRetailCustomer)).click();	
	driver.findElement(By.partialLinkText("Add Usage")).click();	
	driver.findElement(By.id("UUID")).clear();
	driver.findElement(By.id("UUID")).sendKeys(usagePointUUID1);
	//driver.findElement(By.id("description")).clear();
	//driver.findElement(By.id("description")).sendKeys(usagePointDescription1);
	driver.findElement(By.name("create")).click();

	driver.logout(ServiceEndpointDataCustodian);
	
	driver.login(ServiceEndpointThirdParty,TestRetailCustomer,TestRetailCustomerPW);
		
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("When I select a Data Custodian from the list");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.findElement(By.partialLinkText("Data Custodians")).click();	
	driver.findElement(By.name("Data_custodian")).click();
	//driver.findElement(By.name("LondonHydro")).click();		
	driver.findElement(By.name("next")).click();
		
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Then I should see the Data Custodian login screen");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.assertUrlContains("/DataCustodian");
	driver.assertContains("Login");
        
} catch(Exception e) {
	testRunner.fail(driver.getErrorString())
}

//Close the browser
driver.quit();
</script></con:config></con:testStep><con:testStep type="groovy" name="Scenario: Retail Customer selects Scope"><con:settings/><con:config><script>import org.openqa.selenium.*;

def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath
//def BaseURL = project.getPropertyValue("BaseURL")
def BaseURL = "https://apps.londonhydro.com"
def DataCustodianContext = project.getPropertyValue("DataCustodianContext")
def ThirdPartyContext = project.getPropertyValue("ThirdPartyContext")
def ServiceEndpointDataCustodian = BaseURL + "/" + DataCustodianContext
def ServiceEndpointThirdParty = BaseURL + "/" + ThirdPartyContext;
def TestManager=project.getPropertyValue("TestManager")
def TestManagerPW=project.getPropertyValue("TestManagerPW")
def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")
//def TestFile=projectPath + "/../data/" + project.getPropertyValue("TestFile")
def TestFile= 'C:\\Users\\799943\\Desktop\\OpenESPI-GreenButtonCMDTest\\data\\' + project.getPropertyValue("TestFile")
def usagePointUUID1 = project.getPropertyValue("usagePointUUID1");
def usagePointDescription1 = project.getPropertyValue("usagePointDescription1");

Object driver = this.class.classLoader.parseClass(new File(projectPath + "/etc/BaseStepUtils.groovy")).GetObj(BaseURL,DataCustodianContext,ThirdPartyContext,log);


//driver._bLogActions = true;

try{
	
	//*********************************************************
	log.info("Scenario: Retail Customer selects Scope");
	//*********************************************************
	// reset DB : run library groovy script
	//testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['OpenEspiIntegrationTests'].testCases['Library'].testSteps['resetDB']);
	// Browser Init
	driver.Before();
		
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Given a Retail Customer with Usage Points");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.login(ServiceEndpointDataCustodian,TestManager,TestManagerPW);
	driver.assertUrlEndsWith("/" + DataCustodianContext + "/custodian/home");


	// upload usage point file
	driver.findElement(By.partialLinkText("Upload")).click();	
	driver.findElement(By.name("file")).sendKeys(TestFile);
		
	driver.findElement(By.name("upload")).click();	
	driver.assertDoesNotContain("Unable to process file");
		
	// add usage point linkage
	driver.findElement(By.partialLinkText("Customer List")).click();
	driver.findElement(By.partialLinkText(TestRetailCustomer)).click();	
	driver.findElement(By.partialLinkText("Add Usage")).click();	
	driver.findElement(By.id("UUID")).clear();
	driver.findElement(By.id("UUID")).sendKeys(usagePointUUID1);
	//driver.findElement(By.id("description")).clear();
	//driver.findElement(By.id("description")).sendKeys(usagePointDescription1);
	driver.findElement(By.name("create")).click();

	driver.logout(ServiceEndpointDataCustodian);
	
	driver.login(ServiceEndpointThirdParty,TestRetailCustomer,TestRetailCustomerPW);
		
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("When I select a Data Custodian from the list");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.findElement(By.partialLinkText("Data Custodians")).click();	
	driver.findElement(By.name("Data_custodian")).click();	
	//driver.findElement(By.name("LondonHydro")).click();
	driver.findElement(By.name("next")).click();
			
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Then I should see the Data Custodian login screen");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.assertUrlContains("/DataCustodian");
	driver.assertContains("Login");
		
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("When I log into Data Custodian");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.findElement(By.name("j_username")).clear();
	driver.findElement(By.name("j_username")).sendKeys(TestRetailCustomer);	
	driver.findElement(By.name("j_password")).clear();
	driver.findElement(By.name("j_password")).sendKeys(TestRetailCustomerPW);	
	driver.findElement(By.name("submit")).click();
		
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Then I should see Scope selection screen");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.assertContains("Select Scope");
	driver.assertContains("FB=4_5_15;IntervalDuration=3600;BlockDuration=monthly;HistoryLength=13");
	
} catch(Exception e) {
	testRunner.fail(driver.getErrorString())
}

//Close the browser
driver.quit();
</script></con:config></con:testStep><con:testStep type="groovy" name="Scenario: Retail Customer authorizes Third Party"><con:settings/><con:config><script>import org.openqa.selenium.*;

def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath
//def BaseURL = project.getPropertyValue("BaseURL")
def BaseURL = "https://apps.londonhydro.com"
def DataCustodianContext = project.getPropertyValue("DataCustodianContext")
def ThirdPartyContext = project.getPropertyValue("ThirdPartyContext")
def ServiceEndpointDataCustodian = BaseURL + "/" + DataCustodianContext
def ServiceEndpointThirdParty = BaseURL + "/" + ThirdPartyContext;
def TestManager=project.getPropertyValue("TestManager")
def TestManagerPW=project.getPropertyValue("TestManagerPW")
def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")
//def TestFile=projectPath + "/../data/" + project.getPropertyValue("TestFile")
def TestFile= 'C:\\Users\\799943\\Desktop\\OpenESPI-GreenButtonCMDTest\\data\\' + project.getPropertyValue("TestFile")
def usagePointUUID1 = project.getPropertyValue("usagePointUUID1");
def usagePointDescription1 = project.getPropertyValue("usagePointDescription1");


Object driver = this.class.classLoader.parseClass(new File(projectPath + "/etc/BaseStepUtils.groovy")).GetObj(BaseURL,DataCustodianContext,ThirdPartyContext,log);


//driver._bLogActions = true;

try{
	
	//*********************************************************
	log.info("Scenario: Retail Customer authorizes Third Party");
	//*********************************************************
	// reset DB : run library groovy script
	//testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['OpenEspiIntegrationTests'].testCases['Library'].testSteps['resetDB']);
	// Browser Init
	driver.Before();
		
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Given a Retail Customer with Usage Points");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.login(ServiceEndpointDataCustodian,TestManager,TestManagerPW);
	driver.assertUrlEndsWith("/" + DataCustodianContext + "/custodian/home");

	// upload usage point file
	driver.findElement(By.partialLinkText("Upload")).click();	
	driver.findElement(By.name("file")).sendKeys(TestFile);
		
	driver.findElement(By.name("upload")).click();	
	driver.assertDoesNotContain("Unable to process file");
	
	// add usage point linkage
	driver.findElement(By.partialLinkText("Customer List")).click();
	driver.findElement(By.partialLinkText(TestRetailCustomer)).click();	
	driver.findElement(By.partialLinkText("Add Usage")).click();	
	driver.findElement(By.id("UUID")).clear();
	driver.findElement(By.id("UUID")).sendKeys(usagePointUUID1);
	//driver.findElement(By.id("description")).clear();
	//driver.findElement(By.id("description")).sendKeys(usagePointDescription1);
	driver.findElement(By.name("create")).click();


	driver.logout(ServiceEndpointDataCustodian);
	
	driver.login(ServiceEndpointThirdParty,TestRetailCustomer,TestRetailCustomerPW);	
		
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("When I select a Data Custodian from the list");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.findElement(By.partialLinkText("Data Custodians")).click();
	driver.findElement(By.name("Data_custodian")).click();
	//driver.findElement(By.name("LondonHydro")).click();
	driver.findElement(By.name("next")).click();
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Then I should see the Data Custodian login screen");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.assertUrlContains("/DataCustodian");
	driver.assertContains("Login");
		
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("When I log into Data Custodian");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.findElement(By.name("j_username")).clear();
	driver.findElement(By.name("j_username")).sendKeys(TestRetailCustomer);	
	driver.findElement(By.name("j_password")).clear();
	driver.findElement(By.name("j_password")).sendKeys(TestRetailCustomerPW);	
	driver.findElement(By.name("submit")).click();
		
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Then I should see Scope selection screen");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.assertContains("Select Scope");
	driver.assertContains("FB=4_5_15;IntervalDuration=3600;BlockDuration=monthly;HistoryLength=13");
		
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("When I select Scopes");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.findElement(By.className("scope")).click();	
	driver.findElement(By.xpath("(//input[@name='scope'])[2]")).click();	
	driver.findElement(By.name("next")).click();	
		
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Then I should see authorization screen");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//driver.assertContains("Please Confirm");
		
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("When I authorize Third Party");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//driver.findElement(By.name("authorize")).click();
		
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Then I should see all my authorizations");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.assertContains("Authorizations");
	//driver.assertContains("data_custodian");
	//driver.assertContains("DataCustodian/espi/1_1/resource/Batch/Subscription/");
	driver.assertContains("LondonHydro");
	driver.assertContains("DataCustodian/espi/1_1/resource/Batch/Subscription/");
	
} catch(Exception e) {
	testRunner.fail(driver.getErrorString())
}

//Close the browser
driver.quit();
	</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DCLogsIntoLHDC Server" searchProperties="true"><con:settings/><con:testStep type="groovy" name="DCLogsIn"><con:settings/><con:config><script>///////////////////////////////////////////////////////// 
// Note: Generated by capture using Selenium in FF.
// Export to Java / JUnit 4 / WebDriver // Copy and paste into Groovy Script with minor tweaks
/////////////////////////////////////////////////////////
///////////////////////////////////////////////////////// 
// Need these imports to run tests
/////////////////////////////////////////////////////////
import org.openqa.selenium.By
import org.openqa.selenium.WebDriver
import org.openqa.selenium.WebElement
import org.openqa.selenium.firefox.FirefoxDriver
import org.openqa.selenium.support.ui.ExpectedCondition
import org.openqa.selenium.support.ui.WebDriverWait
import java.util.concurrent.TimeUnit;
import java.util.regex.Pattern;
import java.util.concurrent.TimeUnit;
import org.junit.*;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.*;
///////////////////////////////////////////////////////// 
// get variables from the project Custom Properties
/////////////////////////////////////////////////////////
def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
//def BaseURL = project.getPropertyValue("BaseURL")
def BaseURL = "https://apps.londonhydro.com"
def ServiceEndpoint=BaseURL+"/DataCustodian"
def TestManager=project.getPropertyValue("TestManager")
def TestManagerPW=project.getPropertyValue("TestManagerPW")
def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")
def TestFile=project.getPropertyValue("TestFile")
def projectPath = groovyUtils.projectPath
log.info("We are talking to: " + ServiceEndpoint) 
log.info("Test File Path: "+ TestFile)

 ///////////////////////////////////////////////////////// 
 // Create a new instance of the Firefox driver
 ///////////////////////////////////////////////////////// 
 WebDriver driver = new FirefoxDriver()

 driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
 // Open the DataCustodian Page 
 driver.get(ServiceEndpoint)

 ///////////////////////////////////////////////////////// 
 // Log in as Manager
 /////////////////////////////////////////////////////////
driver.findElement(By.id("login")).click();
driver.findElement(By.name("j_username")).clear()
driver.findElement(By.name("j_username")).sendKeys(TestManager)
driver.findElement(By.name("j_password")).clear()
driver.findElement(By.name("j_password")).sendKeys(TestManagerPW)
driver.findElement(By.name("submit")).click()
//driver.findElement(By.partialLinkText("Remove all OAuth tokens")).click();
driver.findElement(By.partialLinkText("Customer List")).click()
driver.findElement(By.id("logout")).click();
driver.quit() </script></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RCLogsIntoLHDC Server" searchProperties="true"><con:settings/><con:testStep type="groovy" name="RCLogsIn"><con:settings/><con:config><script>///////////////////////////////////////////////////////// 
// Note: Generated by capture using Selenium in FF.
// Export to Java / JUnit 4 / WebDriver // Copy and paste into Groovy Script with minor tweaks
/////////////////////////////////////////////////////////
///////////////////////////////////////////////////////// 
// Need these imports to run tests
/////////////////////////////////////////////////////////
import org.openqa.selenium.By
import org.openqa.selenium.WebDriver
import org.openqa.selenium.WebElement
import org.openqa.selenium.firefox.FirefoxDriver
import org.openqa.selenium.support.ui.ExpectedCondition
import org.openqa.selenium.support.ui.WebDriverWait
import java.util.concurrent.TimeUnit;
import java.util.regex.Pattern;
import java.util.concurrent.TimeUnit;
import org.junit.*;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.*;
///////////////////////////////////////////////////////// 
// get variables from the project Custom Properties
/////////////////////////////////////////////////////////
def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
//def BaseURL = project.getPropertyValue("BaseURL")
def BaseURL = "https://apps.londonhydro.com"
def ServiceEndpoint=BaseURL+"/DataCustodian"
def TestManager=project.getPropertyValue("TestManager")
def TestManagerPW=project.getPropertyValue("TestManagerPW")
def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")
def TestFile=project.getPropertyValue("TestFile")
def projectPath = groovyUtils.projectPath
log.info("We are talking to: " + ServiceEndpoint) 
log.info("Test File Path: "+ TestFile)

 ///////////////////////////////////////////////////////// 
 // Create a new instance of the Firefox driver
 ///////////////////////////////////////////////////////// 
 WebDriver driver = new FirefoxDriver()

 driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
 // Open the DataCustodian Page 
 driver.get(ServiceEndpoint)

 ///////////////////////////////////////////////////////// 
 // Log in as Manager
 /////////////////////////////////////////////////////////
driver.findElement(By.id("login")).click();
driver.findElement(By.name("j_username")).clear()
driver.findElement(By.name("j_username")).sendKeys(TestRetailCustomer)
driver.findElement(By.name("j_password")).clear()
driver.findElement(By.name("j_password")).sendKeys(TestRetailCustomerPW)
driver.findElement(By.name("submit")).click()
//driver.findElement(By.partialLinkText("Remove all OAuth tokens")).click();
driver.findElement(By.partialLinkText("Third Parties")).click()
driver.findElement(By.id("logout")).click();
driver.quit() </script></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DCLogsIntoTP Server" searchProperties="true"><con:settings/><con:testStep type="groovy" name="DCLogsIn"><con:settings/><con:config><script>///////////////////////////////////////////////////////// 
// Note: Generated by capture using Selenium in FF.
// Export to Java / JUnit 4 / WebDriver // Copy and paste into Groovy Script with minor tweaks
/////////////////////////////////////////////////////////
///////////////////////////////////////////////////////// 
// Need these imports to run tests
/////////////////////////////////////////////////////////
import org.openqa.selenium.By
import org.openqa.selenium.WebDriver
import org.openqa.selenium.WebElement
import org.openqa.selenium.firefox.FirefoxDriver
import org.openqa.selenium.support.ui.ExpectedCondition
import org.openqa.selenium.support.ui.WebDriverWait
import java.util.concurrent.TimeUnit;
import java.util.regex.Pattern;
import java.util.concurrent.TimeUnit;
import org.junit.*;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.*;
///////////////////////////////////////////////////////// 
// get variables from the project Custom Properties
/////////////////////////////////////////////////////////
def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
//def BaseURL = project.getPropertyValue("BaseURL")
def BaseURL = "https://apps.londonhydro.com"
def ServiceEndpoint=BaseURL+"/ThirdParty"
def TestManager=project.getPropertyValue("TestManager")
def TestManagerPW=project.getPropertyValue("TestManagerPW")
def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")
def TestFile=project.getPropertyValue("TestFile")
def projectPath = groovyUtils.projectPath
log.info("We are talking to: " + ServiceEndpoint) 
log.info("Test File Path: "+ TestFile)

 ///////////////////////////////////////////////////////// 
 // Create a new instance of the Firefox driver
 ///////////////////////////////////////////////////////// 
 WebDriver driver = new FirefoxDriver()

 driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
 // Open the DataCustodian Page 
 driver.get(ServiceEndpoint)

 ///////////////////////////////////////////////////////// 
 // Log in as Manager
 /////////////////////////////////////////////////////////
driver.findElement(By.id("login")).click();
driver.findElement(By.name("j_username")).clear()
driver.findElement(By.name("j_username")).sendKeys(TestManager)
driver.findElement(By.name("j_password")).clear()
driver.findElement(By.name("j_password")).sendKeys(TestManagerPW)
driver.findElement(By.name("submit")).click()
//driver.findElement(By.partialLinkText("Remove all OAuth tokens")).click();
driver.findElement(By.partialLinkText("Customer List")).click()
driver.findElement(By.id("logout")).click();
driver.quit() </script></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RCLogsIntoTP Server" searchProperties="true"><con:settings/><con:testStep type="groovy" name="RCLogsIn"><con:settings/><con:config><script>///////////////////////////////////////////////////////// 
// Note: Generated by capture using Selenium in FF.
// Export to Java / JUnit 4 / WebDriver // Copy and paste into Groovy Script with minor tweaks
/////////////////////////////////////////////////////////
///////////////////////////////////////////////////////// 
// Need these imports to run tests
/////////////////////////////////////////////////////////
import org.openqa.selenium.By
import org.openqa.selenium.WebDriver
import org.openqa.selenium.WebElement
import org.openqa.selenium.firefox.FirefoxDriver
import org.openqa.selenium.support.ui.ExpectedCondition
import org.openqa.selenium.support.ui.WebDriverWait
import java.util.concurrent.TimeUnit;
import java.util.regex.Pattern;
import java.util.concurrent.TimeUnit;
import org.junit.*;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.*;
///////////////////////////////////////////////////////// 
// get variables from the project Custom Properties
/////////////////////////////////////////////////////////
def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
//def BaseURL = project.getPropertyValue("BaseURL")
def BaseURL = "https://apps.londonhydro.com"
def ServiceEndpoint=BaseURL+"/ThirdParty"
def TestManager=project.getPropertyValue("TestManager")
def TestManagerPW=project.getPropertyValue("TestManagerPW")
def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")
def TestFile=project.getPropertyValue("TestFile")
def projectPath = groovyUtils.projectPath
log.info("We are talking to: " + ServiceEndpoint) 
log.info("Test File Path: "+ TestFile)

 ///////////////////////////////////////////////////////// 
 // Create a new instance of the Firefox driver
 ///////////////////////////////////////////////////////// 
 WebDriver driver = new FirefoxDriver()

 driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
 // Open the DataCustodian Page 
 driver.get(ServiceEndpoint)

 ///////////////////////////////////////////////////////// 
 // Log in as Manager
 /////////////////////////////////////////////////////////
driver.findElement(By.id("login")).click();
driver.findElement(By.name("j_username")).clear()
driver.findElement(By.name("j_username")).sendKeys(TestRetailCustomer)
driver.findElement(By.name("j_password")).clear()
driver.findElement(By.name("j_password")).sendKeys(TestRetailCustomerPW)
driver.findElement(By.name("submit")).click()
//driver.findElement(By.partialLinkText("Remove all OAuth tokens")).click();
driver.findElement(By.partialLinkText("Data Custodians")).click()
driver.findElement(By.id("logout")).click();
driver.quit() </script></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TestOAuthAccessToken Server" searchProperties="true"><con:settings/><con:testStep type="groovy" name="resetDB" disabled="true"><con:settings/><con:config><script>def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath

def mysqlCmd=project.getPropertyValue("mysqlCmd")
def DBprepopulateScriptName = project.getPropertyValue("DBprepopulateScriptName")


def cmdClean = projectPath + "/etc/doMysql.sh " + mysqlCmd + " " + projectPath + "/etc/cleantables.sql"

log.info("exec: " + cmdClean);

def doClean = cmdClean.execute()

doClean.waitFor()

if(doClean.exitValue()!=0)
{
	log.error "return code: ${ doClean.exitValue()}"
	log.error "stderr: ${doClean.err.text}"
	log.error "stdout: ${doClean.in.text}"
}


def cmdPopulate = projectPath + "/etc/doMysql.sh " + mysqlCmd + " " + projectPath + "/etc/" + DBprepopulateScriptName

log.info("exec: " + cmdPopulate);

def doPopulate = cmdPopulate.execute()

doPopulate.waitFor()

if(doPopulate.exitValue()!=0)
{
	log.error "return code: ${ doPopulate.exitValue()}"
	log.error "stderr: ${doPopulate.err.text}"
	log.error "stdout: ${doPopulate.in.text}"
}
</script></con:config></con:testStep><con:testStep type="groovy" name="StartDriver"><con:settings/><con:config><script>/////////////////////////////////////////////////////////
// Note: Generated by capture using Selenium in FF. 
// Export to Java / JUnit 4 / WebDriver
// Copy and paste into Groovy Script with minor tweaks
/////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////
// Need these imports to run tests
/////////////////////////////////////////////////////////
import org.openqa.selenium.By
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver
import org.openqa.selenium.WebElement
import org.openqa.selenium.firefox.FirefoxDriver

import java.util.concurrent.TimeUnit;
import java.util.regex.Pattern;
import java.util.concurrent.TimeUnit;
import org.junit.*;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.*;

/////////////////////////////////////////////////////////
// get variables from the project Custom Properties
/////////////////////////////////////////////////////////
def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath
def BaseURL = project.getPropertyValue("BaseURL")
def DataCustodianContext = project.getPropertyValue("DataCustodianContext")
def ThirdPartyContext = project.getPropertyValue("ThirdPartyContext")
def TestManager=project.getPropertyValue("TestManager")
def TestManagerPW=project.getPropertyValue("TestManagerPW")

/////////////////////////////////////////////////////////
// Create a new instance of the Firefox driver
/////////////////////////////////////////////////////////
Object driver = this.class.classLoader.parseClass(new File(projectPath + "/etc/BaseStepUtils.groovy")).GetObj(BaseURL,DataCustodianContext,ThirdPartyContext,log);
driver._bLogActions = true;

if( context["driver"] == null )
context["driver"] = driver

// Browser Init
	driver.Before();
/*
WebDriver driver = new FirefoxDriver()
driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);

driver.get(BaseURL + "/" + ThirdPartyContext + "/j_spring_security_logout");
driver.get(BaseURL + "/" + DataCustodianContext + "/logout.do");
		driver.get(BaseURL + "/" + DataCustodianContext);
		driver.findElement(By.id("login")).click();
		driver.findElement(By.name("j_username")).clear();
		driver.findElement(By.name("j_username")).sendKeys(TestManager);
		driver.findElement(By.name("j_password")).clear();
		driver.findElement(By.name("j_password")).sendKeys(TestManagerPW);
		driver.findElement(By.name("submit")).click();    
//    _driver.get(_strBaseUrl + "/" + _strDataCustodianContext + "/custodian/removealltokens");
driver.get(BaseURL + "/" + DataCustodianContext + "/logout.do");	     	
*/



return
//Then in later steps you can retrieve it as context["driverInstance"] 
</script></con:config></con:testStep><con:testStep type="groovy" name="LoginManager"><con:settings/><con:config><script>/////////////////////////////////////////////////////////
// Need these imports to run tests
/////////////////////////////////////////////////////////
import org.openqa.selenium.By
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver
import org.openqa.selenium.WebElement
import org.openqa.selenium.firefox.FirefoxDriver

import java.util.concurrent.TimeUnit;
import java.util.regex.Pattern;
import java.util.concurrent.TimeUnit;
import org.junit.*;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.*;

/////////////////////////////////////////////////////////
// define some variables
/////////////////////////////////////////////////////////

def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath

def BaseURL = project.getPropertyValue("BaseURL")
def ServiceEndpoint=BaseURL+"/DataCustodian"
def TestManager=project.getPropertyValue("TestManager")
def TestManagerPW=project.getPropertyValue("TestManagerPW")

log.info( TestManager + "  " + TestManagerPW)
/////////////////////////////////////////////////////////
// fetch driver from context
/////////////////////////////////////////////////////////
Object driver = context["driver"]

try{
	/////////////////////////////////////////////////////////
	// Open the DataCustodian Page
	/////////////////////////////////////////////////////////
	driver.get(ServiceEndpoint)
	
	
	/////////////////////////////////////////////////////////
	// Log in as Manager
	/////////////////////////////////////////////////////////
	driver.findElement(By.id("login")).click();
	driver.findElement(By.name("j_username")).clear()
	driver.findElement(By.name("j_username")).sendKeys(TestManager)
	driver.findElement(By.name("j_password")).clear()
	driver.findElement(By.name("j_password")).sendKeys(TestManagerPW)
	driver.findElement(By.name("submit")).click()

} catch(Exception e) {
	testRunner.fail(driver.getErrorString())
	driver.quit();
}</script></con:config></con:testStep><con:testStep type="groovy" name="UploadTwoFilesViaGui"><con:settings/><con:config><script>/////////////////////////////////////////////////////////
// Need these imports to run tests
/////////////////////////////////////////////////////////
import org.openqa.selenium.By
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver
import org.openqa.selenium.WebElement
import org.openqa.selenium.firefox.FirefoxDriver

import java.util.concurrent.TimeUnit;
import java.util.regex.Pattern;
import java.util.concurrent.TimeUnit;
import org.junit.*;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.*;

/////////////////////////////////////////////////////////
// define some variables
/////////////////////////////////////////////////////////

def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath

//def TestFile=projectPath + "/../data/" + project.getPropertyValue("TestFile")
def TestFile= 'C:\\Users\\799943\\Desktop\\OpenESPI-GreenButtonCMDTest\\data\\' + project.getPropertyValue("TestFile")
def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")


/////////////////////////////////////////////////////////
// fetch driver from context
/////////////////////////////////////////////////////////
Object driver = context["driver"]
try {
	/////////////////////////////////////////////////////////
	// Open the DataCustodian Page
	/////////////////////////////////////////////////////////
	
	
	/////////////////////////////////////////////////////////
	// Now to the upload
	/////////////////////////////////////////////////////////
	// Alan id=1
	driver.findElement(By.partialLinkText("Upload")).click();
	driver.findElement(By.name("file")).sendKeys(TestFile);
	driver.findElement(By.name("upload")).click();
	driver.findElement(By.partialLinkText("Customer List")).click();
	driver.findElement(By.partialLinkText(TestRetailCustomer)).click();
	driver.findElement(By.partialLinkText("Add Usage")).click();
	driver.findElement(By.id("UUID")).clear();
	driver.findElement(By.id("UUID")).sendKeys("48C2A019-5598-4E16-B0F9-49E4FF27F5FB");
	driver.findElement(By.name("create")).click();
	
	// Charles id=5
	//TestFile=projectPath + "/../data/" + "Gas.xml"
	TestFile= 'C:\\Users\\799943\\Desktop\\OpenESPI-GreenButtonCMDTest\\data\\' + project.getPropertyValue("TestFile2")
	driver.findElement(By.partialLinkText("Upload")).click();
	driver.findElement(By.name("file")).sendKeys(TestFile);
	driver.findElement(By.name("upload")).click();
	driver.findElement(By.partialLinkText("Customer List")).click();
	driver.findElement(By.partialLinkText("charles")).click();
	driver.findElement(By.partialLinkText("Add Usage")).click();
	driver.findElement(By.id("UUID")).clear();
	driver.findElement(By.id("UUID")).sendKeys("0642EABA-8E42-4D1A-A375-AF54993C007B");
	driver.findElement(By.name("create")).click();
	
	driver.findElement(By.id("logout")).click();

} catch(Exception e) {
	testRunner.fail(driver.getErrorString())
	driver.quit();
}</script></con:config></con:testStep><con:testStep type="groovy" name="AuthorizeTwoCustomer"><con:settings/><con:config><script>/////////////////////////////////////////////////////////
//	WebDriverTestStepTemplate
//
// This template allows for interactions with a web browser
// based on the previous initialization of a webdriver 
// stored in the context of the test.
//
// Previous to this step, include a copy of the StartDriver
// script. You can then use the driver in this test step or
// others like it.

// Also note that steps created this way can only be run as 
// part of the complete test and not as inidividual steps
// run in isolation
/////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////
// Need these imports to run tests
/////////////////////////////////////////////////////////
import org.openqa.selenium.By
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver
import org.openqa.selenium.WebElement
import org.openqa.selenium.firefox.FirefoxDriver

import java.util.concurrent.TimeUnit;
import java.util.regex.Pattern;
import java.util.concurrent.TimeUnit;
import org.junit.*;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.*;
import com.eviware.soapui.support.types.StringToStringMap;

/////////////////////////////////////////////////////////
// define some variables
/////////////////////////////////////////////////////////
def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath

def BaseURL = project.getPropertyValue("BaseURL")
def ServiceEndpoint=BaseURL+"/DataCustodian/home"

/////////////////////////////////////////////////////////
// fetch driver from context
/////////////////////////////////////////////////////////
Object driver = context["driver"]

try {
	/////////////////////////////////////////////////////////
	// run test step details
	/////////////////////////////////////////////////////////
	// open Data Custodian
	driver.get(ServiceEndpoint)
	
	
	///////////////////////////////////////////////////////// 
	// Log in as Alan and do the OAuth thing
	/////////////////////////////////////////////////////////
	
	driver.findElement(By.id("login")).click();
	driver.findElement(By.name("j_username")).clear();
	driver.findElement(By.name("j_username")).sendKeys("alan");
	driver.findElement(By.name("j_password")).clear();
	driver.findElement(By.name("j_password")).sendKeys("koala");
	driver.findElement(By.name("submit")).click();
	driver.findElement(By.partialLinkText("Third Parties")).click();
	driver.findElement(By.name("Third_party")).click();
	driver.findElement(By.cssSelector("label")).click();
	driver.findElement(By.name("next")).click();
	driver.findElement(By.name("j_username")).clear();
	driver.findElement(By.name("j_username")).sendKeys("alan");
	driver.findElement(By.name("j_password")).clear();
	driver.findElement(By.name("j_password")).sendKeys("koala");
	driver.findElement(By.name("submit")).click();
	driver.findElement(By.name("scope")).click();
	driver.findElement(By.name("next")).click();
	//driver.findElement(By.name("scope.FB=4_5_15;IntervalDuration=900;BlockDuration=monthly;HistoryLength=13")).click();
	//driver.findElement(By.name("authorize")).click(); 
	sleep(1000);
	
	List&lt;WebElement> rows = driver.FindElementsByXpath("//td[@class='access_token']");
		
	String accessToken1 = rows.get(rows.size() - 1).getText();
	log.info("accessToken1:" +  accessToken1);
	
	def headers = new StringToStringMap();
	headers.put("Authorization","Bearer " + accessToken1);
	testRunner.testCase.getTestStepByName("GET Subscription 1").testRequest.setRequestHeaders(headers);
	testRunner.testCase.getTestStepByName("GET Subscription 2").testRequest.setRequestHeaders(headers);
	
	project.setPropertyValue("subscriptionID","1");
	
	
	driver.findElement(By.id("logout")).click();
	
	ServiceEndpoint=BaseURL+"/DataCustodian/home"
	driver.get(ServiceEndpoint)
	driver.findElement(By.id("logout")).click();
	
	driver.findElement(By.id("login")).click();
	driver.findElement(By.name("j_username")).clear();
	driver.findElement(By.name("j_username")).sendKeys("charles");
	driver.findElement(By.name("j_password")).clear();
	driver.findElement(By.name("j_password")).sendKeys("koala");
	driver.findElement(By.name("submit")).click();
	driver.findElement(By.partialLinkText("Third Parties")).click();
	driver.findElement(By.name("Third_party")).click();
	driver.findElement(By.cssSelector("label")).click();
	driver.findElement(By.name("next")).click();
	driver.findElement(By.name("j_username")).clear();
	driver.findElement(By.name("j_username")).sendKeys("charles");
	driver.findElement(By.name("j_password")).clear();
	driver.findElement(By.name("j_password")).sendKeys("koala");
	driver.findElement(By.name("submit")).click();
	driver.findElement(By.name("scope")).click();
	driver.findElement(By.name("next")).click();
	//driver.findElement(By.name("scope.FB=4_5_15;IntervalDuration=900;BlockDuration=monthly;HistoryLength=13")).click();
	//driver.findElement(By.name("authorize")).click(); sleep(1000)
	
	driver.findElement(By.id("logout")).click();
	
	
	//ServiceEndpoint=BaseURL+"/DataCustodian/home"
	//driver.get(ServiceEndpoint)
	//driver.findElement(By.id("logout")).click();
} catch(Exception e) {
	testRunner.fail(driver.getErrorString())
	driver.quit();
}</script></con:config></con:testStep><con:testStep type="groovy" name="LogoutManager"><con:settings/><con:config><script>/////////////////////////////////////////////////////////
// Need these imports to run tests
/////////////////////////////////////////////////////////
import org.openqa.selenium.By
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver
import org.openqa.selenium.WebElement
import org.openqa.selenium.firefox.FirefoxDriver

import java.util.concurrent.TimeUnit;
import java.util.regex.Pattern;
import java.util.concurrent.TimeUnit;
import org.junit.*;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.*;

/////////////////////////////////////////////////////////
// define some variables
/////////////////////////////////////////////////////////

def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath

def BaseURL = project.getPropertyValue("BaseURL")
def ServiceEndpoint=BaseURL+"/DataCustodian"
def TestManager=project.getPropertyValue("TestManager")
def TestManagerPW=project.getPropertyValue("TestManagerPW")

/////////////////////////////////////////////////////////
// fetch driver from context
/////////////////////////////////////////////////////////
Object driver = context["driver"]
try {
	/////////////////////////////////////////////////////////
	// Logout Manager
	/////////////////////////////////////////////////////////
	driver.get(ServiceEndpoint)
	driver.findElement(By.id("logout")).click();

} catch(Exception e) {
	testRunner.fail(driver.getErrorString())
	driver.quit();
}</script></con:config></con:testStep><con:testStep type="groovy" name="StopDriver"><con:settings/><con:config><script>/////////////////////////////////////////////////////////
// Note: Generated by capture using Selenium in FF. 
// Export to Java / JUnit 4 / WebDriver
// Copy and paste into Groovy Script with minor tweaks
/////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////
// Need these imports to run tests
/////////////////////////////////////////////////////////
import org.openqa.selenium.By
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver
import org.openqa.selenium.WebElement
import org.openqa.selenium.firefox.FirefoxDriver

import java.util.concurrent.TimeUnit;
import java.util.regex.Pattern;
import java.util.concurrent.TimeUnit;
import org.junit.*;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.*;



/////////////////////////////////////////////////////////
// Create a new instance of the Firefox driver
/////////////////////////////////////////////////////////
Object driver = context["driver"]

//Close the browser
driver.quit();

//Then in later steps you can retrieve it as context["driverInstance"] 
</script></con:config></con:testStep><con:testStep type="groovy" name="A Set subsription ID = 1"><con:settings/><con:config><script>def project = testRunner.testCase.testSuite.project
project.setPropertyValue("subscriptionID","1");</script></con:config></con:testStep><con:testStep type="restrequest" name="GET Subscription 1"><con:settings/><con:config service="ESPI Resources" resourcePath="/espi/1_1/resource/Batch/Subscription/${#Project#subscriptionID}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET Subscription 1" mediaType="application/json"><con:endpoint>${#Project#ServiceEndpoint}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>assert messageExchange.responseStatusCode == 200</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer 5cbe9cdf-345a-49f1-a819-cf37796316b8" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Set subsription ID = 2"><con:settings/><con:config><script>def project = testRunner.testCase.testSuite.project
project.setPropertyValue("subscriptionID","2");</script></con:config></con:testStep><con:testStep type="restrequest" name="GET Subscription 2"><con:settings/><con:config service="ESPI Resources" resourcePath="/espi/1_1/resource/Batch/Subscription/${#Project#subscriptionID}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET Subscription 2" mediaType="application/json"><con:endpoint>${#Project#ServiceEndpoint}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>assert messageExchange.responseStatusCode != 200</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer 5cbe9cdf-345a-49f1-a819-cf37796316b8" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Set subsription ID = 1"><con:settings/><con:config><script>def project = testRunner.testCase.testSuite.project
project.setPropertyValue("subscriptionID","1");</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TestDMD Server" searchProperties="true"><con:settings/><con:testStep type="groovy" name="TestDMD"><con:settings/><con:config><script>///////////////////////////////////////////////////////// 
// Note: Generated by capture using Selenium in FF.
// Export to Java / JUnit 4 / WebDriver // Copy and paste into Groovy Script with minor tweaks
/////////////////////////////////////////////////////////
///////////////////////////////////////////////////////// 
// Need these imports to run tests
/////////////////////////////////////////////////////////
import org.openqa.selenium.By
import org.openqa.selenium.WebDriver
import org.openqa.selenium.WebElement
import org.openqa.selenium.firefox.FirefoxDriver
import org.openqa.selenium.support.ui.ExpectedCondition
import org.openqa.selenium.support.ui.WebDriverWait
import java.util.concurrent.TimeUnit;
import java.util.regex.Pattern;
import java.util.concurrent.TimeUnit;
import org.junit.*;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.*;
///////////////////////////////////////////////////////// 
// get variables from the project Custom Properties
/////////////////////////////////////////////////////////
def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
//def BaseURL = project.getPropertyValue("BaseURL")
def BaseURL = "https://apps.londonhydro.com"
def ServiceEndpoint=BaseURL+"/DataCustodian"
def TestManager=project.getPropertyValue("TestManager")
def TestManagerPW=project.getPropertyValue("TestManagerPW")
def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")
def TestFile=project.getPropertyValue("TestFile")
def projectPath = groovyUtils.projectPath
log.info("We are talking to: " + ServiceEndpoint) 
log.info("Test File Path: "+ TestFile)

 ///////////////////////////////////////////////////////// 
 // Create a new instance of the Firefox driver
 ///////////////////////////////////////////////////////// 
 WebDriver driver = new FirefoxDriver()

 driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
 // Open the DataCustodian Page 
 driver.get(ServiceEndpoint)

 ///////////////////////////////////////////////////////// 
 // Log in as Manager
 /////////////////////////////////////////////////////////
driver.findElement(By.id("login")).click();
driver.findElement(By.name("j_username")).clear()
driver.findElement(By.name("j_username")).sendKeys(TestRetailCustomer)
driver.findElement(By.name("j_password")).clear()
driver.findElement(By.name("j_password")).sendKeys(TestRetailCustomerPW)
driver.findElement(By.name("submit")).click()
//driver.findElement(By.partialLinkText("Remove all OAuth tokens")).click();
driver.findElement(By.partialLinkText("Usage Points")).click()

driver.findElement(By.id("startTime")).clear()
driver.findElement(By.id("startTime")).sendKeys("2012-02-01 T10:31:59 Z")

driver.findElement(By.id("endTime")).clear()
driver.findElement(By.id("endTime")).sendKeys("2012-12-31 T10:31:59 Z")

driver.findElement(By.id("downloadMyData")).click();
driver.findElement(By.id("logout")).click();
driver.quit() </script></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="ShowMeterReading Server" searchProperties="true"><con:settings/><con:testStep type="groovy" name="ShowMeterReading"><con:settings/><con:config><script>///////////////////////////////////////////////////////// 
// Note: Generated by capture using Selenium in FF.
// Export to Java / JUnit 4 / WebDriver // Copy and paste into Groovy Script with minor tweaks
/////////////////////////////////////////////////////////
///////////////////////////////////////////////////////// 
// Need these imports to run tests
/////////////////////////////////////////////////////////
import org.openqa.selenium.By
import org.openqa.selenium.WebDriver
import org.openqa.selenium.WebElement
import org.openqa.selenium.firefox.FirefoxDriver
import org.openqa.selenium.support.ui.ExpectedCondition
import org.openqa.selenium.support.ui.WebDriverWait
import java.util.concurrent.TimeUnit;
import java.util.regex.Pattern;
import java.util.concurrent.TimeUnit;
import org.junit.*;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.*;
///////////////////////////////////////////////////////// 
// get variables from the project Custom Properties
/////////////////////////////////////////////////////////
def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
//def BaseURL = project.getPropertyValue("BaseURL")
def BaseURL = "https://apps.londonhydro.com"
def ServiceEndpoint=BaseURL+"/DataCustodian"
def TestManager=project.getPropertyValue("TestManager")
def TestManagerPW=project.getPropertyValue("TestManagerPW")
def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")
def TestFile=project.getPropertyValue("TestFile")
def projectPath = groovyUtils.projectPath
log.info("We are talking to: " + ServiceEndpoint) 
log.info("Test File Path: "+ TestFile)

 ///////////////////////////////////////////////////////// 
 // Create a new instance of the Firefox driver
 ///////////////////////////////////////////////////////// 
 WebDriver driver = new FirefoxDriver()

 driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
 // Open the DataCustodian Page 
 driver.get(ServiceEndpoint)

 ///////////////////////////////////////////////////////// 
 // Log in as Manager
 /////////////////////////////////////////////////////////
driver.findElement(By.id("login")).click();
driver.findElement(By.name("j_username")).clear()
driver.findElement(By.name("j_username")).sendKeys(TestRetailCustomer)
driver.findElement(By.name("j_password")).clear()
driver.findElement(By.name("j_password")).sendKeys(TestRetailCustomerPW)
driver.findElement(By.name("submit")).click()
driver.findElement(By.partialLinkText("Usage Points")).click()
driver.findElement(By.partialLinkText("Front Electric Meter")).click()
driver.findElement(By.partialLinkText("Fifteen Minute Electricity Consumption")).click()
driver.findElementByTagName("h2")
//driver.assertContains("Meter Reading: Fifteen Minute Electricity Consumption")

//log.info("Scenario: Third Party accesses Subscription");

driver.findElement(By.id("logout")).click();
driver.quit() 
</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Feature: Notification EnergyOS" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="Feature: Notification"><con:settings/><con:config><script>//******************************************************************************************************************
//******************************************************************************************************************
log.info("Feature: Notification");
log.info("  As Data Custodian,");
log.info("  I should be able to notify Third Party about data updates,");
log.info("  So Third Party can download updated data");
//******************************************************************************************************************
//******************************************************************************************************************
</script></con:config></con:testStep><con:testStep type="groovy" name="Scenario: Data Custodian notifies Third Party of updated Subscription"><con:settings/><con:config><script>import org.openqa.selenium.*;

def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath
def BaseURL = project.getPropertyValue("BaseURL")
def DataCustodianContext = project.getPropertyValue("DataCustodianContext")
def ThirdPartyContext = project.getPropertyValue("ThirdPartyContext")
def ServiceEndpointDataCustodian = BaseURL + "/" + DataCustodianContext
def ServiceEndpointThirdParty = BaseURL + "/" + ThirdPartyContext;
def TestManager=project.getPropertyValue("TestManager")
def TestManagerPW=project.getPropertyValue("TestManagerPW")
def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")
def TestFile=projectPath + "/../data/" + project.getPropertyValue("TestFile")
def usagePointUUID1 = project.getPropertyValue("usagePointUUID1");
def usagePointDescription1 = project.getPropertyValue("usagePointDescription1");

Object driver = this.class.classLoader.parseClass(new File(projectPath + "/etc/BaseStepUtils.groovy")).GetObj(BaseURL,DataCustodianContext,ThirdPartyContext,log);


def TestFile2=projectPath + "/../data/" + project.getPropertyValue("TestFile2")
def usagePointUUID2 = project.getPropertyValue("usagePointUUID2");
def usagePointDescription2 = project.getPropertyValue("usagePointDescription2");

//driver._bLogActions = true;
// how long to wait between each execution step
//driver._iSleepBetweenStepsMs = 3000;

try{
	//*********************************************************
	log.info("Scenario: Data Custodian notifies Third Party of updated Subscription");
	//*********************************************************
	// reset DB : run library groovy script
	testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['OpenEspiIntegrationTests'].testCases['Library'].testSteps['resetDB']);
	// Browser Init
	driver.Before();
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Given a Retail Customer with Usage Points");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.login(ServiceEndpointDataCustodian,TestManager,TestManagerPW);
	driver.assertUrlEndsWith("/" + DataCustodianContext + "/custodian/home");

	// upload usage point file
	driver.findElement(By.partialLinkText("Upload")).click();	
	driver.findElement(By.name("file")).sendKeys(TestFile);
		
	driver.findElement(By.name("upload")).click();	
	driver.assertDoesNotContain("Unable to process file");
	
	// add usage point linkage
	driver.findElement(By.partialLinkText("Customer List")).click();
	driver.findElement(By.partialLinkText(TestRetailCustomer)).click();	
	driver.findElement(By.partialLinkText("Add Usage")).click();	
	driver.findElement(By.id("UUID")).clear();
	driver.findElement(By.id("UUID")).sendKeys(usagePointUUID1);
	driver.findElement(By.name("create")).click();

	driver.logout(ServiceEndpointDataCustodian);
	
	driver.login(ServiceEndpointThirdParty,TestRetailCustomer,TestRetailCustomerPW);
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("And a Third Party with an updated subscription");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logout(ServiceEndpointThirdParty);
	
	driver.login(ServiceEndpointThirdParty,TestManager,TestManagerPW);
	
	driver.findElement(By.partialLinkText("Batch Lists")).click();
	driver.assertDoesNotContain("Whoops");

	log.info("The following step may take up to 30 seconds to complete.");
	int OriginalnumberOfSubscriptions = driver.GetNumElsByTagName("h2");
	log.info("Original number of subscriptions=" + OriginalnumberOfSubscriptions);

	driver.logout(ServiceEndpointThirdParty);
	
	driver.login(ServiceEndpointThirdParty,TestRetailCustomer,TestRetailCustomerPW);
	driver.findElement(By.partialLinkText("Data Custodians")).click();	
	driver.findElement(By.name("Data_custodian")).click();	
	driver.findElement(By.name("next")).click();

	driver.submitLoginForm(TestRetailCustomer,TestRetailCustomerPW);
	
	driver.findElement(By.name("scope")).click();	
	driver.findElement(By.name("next")).click();	
	//driver.findElement(By.name("authorize")).click();	
	driver.findElement(By.name("scope.FB=4_5_15;IntervalDuration=900;BlockDuration=monthly;HistoryLength=13")).click();
	driver.findElement(By.name("authorize")).click();
	
	driver.logout(ServiceEndpointDataCustodian);

	driver.logout(ServiceEndpointThirdParty);
	
	driver.login(ServiceEndpointDataCustodian, TestManager,TestManagerPW);
	
	// upload usage point file Sweet Usage Point
	driver.findElement(By.partialLinkText("Upload")).click();		
	driver.findElement(By.name("file")).sendKeys(TestFile2);
	driver.findElement(By.name("upload")).click();	
	
	driver.assertDoesNotContain("Unable to process file");
	
	// add usage point linkage
	driver.findElement(By.partialLinkText("Customer List")).click();		
	driver.findElement(By.partialLinkText(TestRetailCustomer)).click();		
	driver.findElement(By.partialLinkText("Add Usage")).click();
	driver.findElement(By.id("UUID")).clear();
	driver.findElement(By.id("UUID")).sendKeys(usagePointUUID2);
	driver.findElement(By.name("create")).click();	

	driver.logout(ServiceEndpointDataCustodian);


	// Check for Notifications
	driver.login(ServiceEndpointThirdParty,TestManager,TestManagerPW);
	
	driver.findElement(By.partialLinkText("Batch Lists")).click();
	driver.assertDoesNotContain("Whoops");

	log.info("The following step may take up to 30 seconds to complete.");
	OriginalnumberOfSubscriptions = driver.GetNumElsByTagName("h2");
	log.info("Original number of subscriptions=" + OriginalnumberOfSubscriptions);

	if(OriginalnumberOfSubscriptions != 1)
	{
		log.error("did not see autogenerated notification from subscription creation");
		testRunner.fail("unexpected number of subscriptions");
	}

	driver.logout(ServiceEndpointThirdParty);



	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("When I notify the Third Party");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.login(ServiceEndpointDataCustodian,TestManager,TestManagerPW);
	driver.findElement(By.partialLinkText("Notify Third Party")).click();	
        
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Then the Third Party should be notified of the update");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logout(ServiceEndpointDataCustodian);
	driver.login(ServiceEndpointThirdParty,TestManager,TestManagerPW);

	driver.assertContains("Welcome");

	driver.findElement(By.partialLinkText("Batch Lists")).click();

	int numberOfSubscriptions = driver.GetNumElsByTagName("h2");

	log.info("New number of subscriptions=" + numberOfSubscriptions);
	
	if( (numberOfSubscriptions-OriginalnumberOfSubscriptions) != 1)
	{
		log.error("unexpected number of subscriptions");
		testRunner.fail("unexpected number of subscriptions");
	}

	driver.assertContains("/espi/1_1/resource/Batch/Subscription/1");
	
} catch(Exception e) {
	testRunner.fail(driver.getErrorString())
}

//Close the browser
driver.quit();

</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Feature: Subscription EnergyOS" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="Feature: Subscription"><con:settings/><con:config><script>//******************************************************************************************************************
//******************************************************************************************************************
log.info("Feature: Subscription");
log.info("  As a Third Party");
log.info("  I want to access Retail Customer data");
log.info("  So that I can display Retail Customer data");
//******************************************************************************************************************
//******************************************************************************************************************
</script></con:config></con:testStep><con:testStep type="groovy" name="Scenario: Third Party accesses Subscription"><con:settings/><con:config><script><![CDATA[import org.openqa.selenium.*;

import org.xml.sax.SAXException;
import org.w3c.dom.*;
import javax.xml.parsers.*;
import javax.xml.xpath.*;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import javax.xml.namespace.NamespaceContext;


public class SimpleNamespaceContext implements NamespaceContext {

    private final Map<String, String> PREF_MAP = new HashMap<String, String>();

    public SimpleNamespaceContext(final Map<String, String> prefMap) {
        PREF_MAP.putAll(prefMap);       
    }

    public String getNamespaceURI(String prefix) {
        return PREF_MAP.get(prefix);
    }

    public String getPrefix(String uri) {
        throw new UnsupportedOperationException();
    }

    public Iterator getPrefixes(String uri) {
        throw new UnsupportedOperationException();
    }

}

public boolean ServiceTest(String strTestType,boolean bShouldPass,String strFileName,String strResource,String strOutputFile)
{
	tc = testRunner.testCase.testSuite.project.testSuites["OpenEspiIntegrationTests"].testCases["Library"]
	tc.setPropertyValue("resourceTestFileName", strFileName)
	tc.setPropertyValue("testType", strTestType)
	tc.setPropertyValue("resourceOutputFileName", strOutputFile)
	tc.setPropertyValue("resource", strResource)
	
	if(bShouldPass) {
		tc.setPropertyValue("testShouldPass", "TRUE")
	}
	else {
		tc.setPropertyValue("testShouldPass", "FALSE")
	}
	
	testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['OpenEspiIntegrationTests'].testCases['Library'].testSteps['resourceTests']);

	String strResult = tc.getPropertyValue("testFailed");	

	boolean bResult = false;
	
	if(strResult.equals("TRUE")) {
		bResult = true;
	}

	return bResult;
}




def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath
def BaseURL = project.getPropertyValue("BaseURL")
def DataCustodianContext = project.getPropertyValue("DataCustodianContext")
def ThirdPartyContext = project.getPropertyValue("ThirdPartyContext")
def ServiceEndpointDataCustodian = BaseURL + "/" + DataCustodianContext
def ServiceEndpointThirdParty = BaseURL + "/" + ThirdPartyContext;
def TestManager=project.getPropertyValue("TestManager")
def TestManagerPW=project.getPropertyValue("TestManagerPW")
def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")
def TestFile=projectPath + "/../data/" + project.getPropertyValue("TestFile")
def usagePointUUID1 = project.getPropertyValue("usagePointUUID1");
def usagePointDescription1 = project.getPropertyValue("usagePointDescription1");


	DocumentBuilderFactory domFactory = DocumentBuilderFactory.newInstance();
	domFactory.setNamespaceAware(true); 
	DocumentBuilder builder = domFactory.newDocumentBuilder();

	XPath xpath = XPathFactory.newInstance().newXPath();
	
	// add namespaces
	HashMap<String, String> prefMap = new HashMap<String, String>() {{
	    put("espi", "http://naesb.org/espi");
	    put("ns3", "http://www.w3.org/2005/Atom");
	}};
	
	SimpleNamespaceContext namespaces = new SimpleNamespaceContext(prefMap);
	
	xpath.setNamespaceContext(namespaces);

Object driver = this.class.classLoader.parseClass(new File(projectPath + "/etc/BaseStepUtils.groovy")).GetObj(BaseURL,DataCustodianContext,ThirdPartyContext,log);


//driver._bLogActions = true;
//driver._iSleepBetweenStepsMs = 2000;

try{
	//*********************************************************
	log.info("Scenario: Third Party accesses Subscription");
	//*********************************************************
	// reset DB : run library groovy script
	testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['OpenEspiIntegrationTests'].testCases['Library'].testSteps['resetDB']);
	// Browser Init
	driver.Before();

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Given a Retail Customer with Usage Points");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.login(ServiceEndpointDataCustodian,TestManager,TestManagerPW);
	driver.assertUrlEndsWith("/" + DataCustodianContext + "/custodian/home");


	// upload usage point file
	driver.findElement(By.partialLinkText("Upload")).click();	
	driver.findElement(By.name("file")).sendKeys(TestFile);
		
	driver.findElement(By.name("upload")).click();	
	driver.assertDoesNotContain("Unable to process file");

		
	// add usage point linkage
	driver.findElement(By.partialLinkText("Customer List")).click();
	driver.findElement(By.partialLinkText(TestRetailCustomer)).click();	
	driver.findElement(By.partialLinkText("Add Usage")).click();	
	driver.findElement(By.id("UUID")).clear();
	driver.findElement(By.id("UUID")).sendKeys(usagePointUUID1);
	driver.findElement(By.name("create")).click();


	driver.logout(ServiceEndpointDataCustodian);
	
	driver.login(ServiceEndpointThirdParty,TestRetailCustomer,TestRetailCustomerPW);

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Given an authorized Third Party");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//driver.login(ServiceEndpointThirdParty,TestRetailCustomer,TestRetailCustomerPW);
	driver.findElement(By.partialLinkText("Data Custodians")).click();	
	driver.findElement(By.name("Data_custodian")).click();	
	driver.findElement(By.name("next")).click();
	
	driver.submitLoginForm(TestRetailCustomer,TestRetailCustomerPW);
	
	driver.findElement(By.name("scope")).click();	
	driver.findElement(By.name("next")).click();	

	driver.findElement(By.name("scope.FB=4_5_15;IntervalDuration=900;BlockDuration=monthly;HistoryLength=13")).click();
	driver.findElement(By.name("authorize")).click();

	// logout of Third Party	
	driver.logout(ServiceEndpointThirdParty);

	// logout of DataCustodian	
	driver.logout(ServiceEndpointDataCustodian);
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//driver.logStep("And I log in as Alan Turing into Data Custodian");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//driver.login(driver.DATA_CUSTODIAN_CONTEXT, "alan", "koala");
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("When I log in as Alan Turing");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.login(ServiceEndpointThirdParty,TestRetailCustomer,TestRetailCustomerPW);
	driver.assertContains("Welcome");
	 
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("And I request a Subscription using the REST API");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.findElement(By.partialLinkText("Authorizations")).click();	

	List<WebElement> rows = driver.FindElementsByXpath("//td[@class='subscription_id']");
		
	String subscription = rows.get(rows.size() - 1).getText();
	
//	driver.get(subscription);
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Then I should receive XML for that Subscription");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//	driver.assertXpathExists("/:feed");

	boolean bTestFailed = ServiceTest("GetSaveResponse",true,null,subscription,"test_subscription.xml");
	
	String strOutputDataFile = projectPath + "/../data/" + "test_subscription.xml";
	String strExpr = "";
	
	if(!bTestFailed){

		Document docResponse = builder.parse(strOutputDataFile);

		strExpr = "/ns3:feed/ns3:entry[ns3:id='urn:uuid:" + usagePointUUID1.toLowerCase() + "']";
	
		XPathExpression expr = xpath.compile(strExpr);
		
		NodeList nlNodes = (NodeList) expr.evaluate(docResponse,XPathConstants.NODESET);

		log.info("Retreived " + nlNodes.getLength() + " Entries");
		if(nlNodes.getLength()!=1)
		{
			log.error("Response did not contain the correct number of Entries.");
			testRunner.fail("Response did not contain the correct number of Entries.")
		}
	}
	else
	{
		log.error("Unable to GET subscription resource.");
		testRunner.fail("Unable to GET subscription resource.")		
	}
	

} catch(Exception e) {
	testRunner.fail(driver.getErrorString())
}

//Close the browser
driver.quit();

]]></script></con:config></con:testStep><con:testStep type="groovy" name="Scenario: Third Party customer accesses Authorizations page"><con:settings/><con:config><script>import org.openqa.selenium.*;

def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath
def BaseURL = project.getPropertyValue("BaseURL")
def DataCustodianContext = project.getPropertyValue("DataCustodianContext")
def ThirdPartyContext = project.getPropertyValue("ThirdPartyContext")
def ServiceEndpointDataCustodian = BaseURL + "/" + DataCustodianContext
def ServiceEndpointThirdParty = BaseURL + "/" + ThirdPartyContext;
def TestManager=project.getPropertyValue("TestManager")
def TestManagerPW=project.getPropertyValue("TestManagerPW")
def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")
def TestFile=projectPath + "/../data/" + project.getPropertyValue("TestFile")
def usagePointUUID1 = project.getPropertyValue("usagePointUUID1");
def usagePointDescription1 = project.getPropertyValue("usagePointDescription1");

Object driver = this.class.classLoader.parseClass(new File(projectPath + "/etc/BaseStepUtils.groovy")).GetObj(BaseURL,DataCustodianContext,ThirdPartyContext,log);


//driver._bLogActions = true;

try{
	//*********************************************************
	log.info("Scenario: Third Party customer accesses Authorizations page");
	//*********************************************************
	// reset DB : run library groovy script
	testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['OpenEspiIntegrationTests'].testCases['Library'].testSteps['resetDB']);
	// Browser Init
	driver.Before();

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Given a Retail Customer with Usage Points");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.login(ServiceEndpointDataCustodian,TestManager,TestManagerPW);
	driver.assertUrlEndsWith("/" + DataCustodianContext + "/custodian/home");

	// upload usage point file
	driver.findElement(By.partialLinkText("Upload")).click();	
	driver.findElement(By.name("file")).sendKeys(TestFile);
		
	driver.findElement(By.name("upload")).click();	
	driver.assertDoesNotContain("Unable to process file");
	
	// add usage point linkage
	driver.findElement(By.partialLinkText("Customer List")).click();
	driver.findElement(By.partialLinkText(TestRetailCustomer)).click();	
	driver.findElement(By.partialLinkText("Add Usage")).click();	
	driver.findElement(By.id("UUID")).clear();
	driver.findElement(By.id("UUID")).sendKeys(usagePointUUID1);
	driver.findElement(By.name("create")).click();

	driver.logout(ServiceEndpointDataCustodian);
	
	driver.login(ServiceEndpointThirdParty,TestRetailCustomer,TestRetailCustomerPW);
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Given an authorized Third Party");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//driver.login(ServiceEndpointThirdParty,TestRetailCustomer,TestRetailCustomerPW);
	driver.findElement(By.partialLinkText("Data Custodians")).click();	
	driver.findElement(By.name("Data_custodian")).click();	
	driver.findElement(By.name("next")).click();
	
	driver.submitLoginForm(TestRetailCustomer,TestRetailCustomerPW);
	
	driver.findElement(By.name("scope")).click();	
	driver.findElement(By.name("next")).click();	

	driver.findElement(By.name("scope.FB=4_5_15;IntervalDuration=900;BlockDuration=monthly;HistoryLength=13")).click();	
	driver.findElement(By.name("authorize")).click();	

	// logout of Third Party	
	driver.logout(ServiceEndpointThirdParty);

	// logout of DataCustodian	
	driver.logout(ServiceEndpointDataCustodian);

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("When I log in as Alan Turing");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.login(ServiceEndpointThirdParty,TestRetailCustomer,TestRetailCustomerPW);
	driver.assertContains("Welcome");
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("And I navigate to the Authorizations page");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.findElement(By.partialLinkText("Authorizations")).click();

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Then I should see a list of Authorizations");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.assertContains("Authorizations");

	List&lt;WebElement> rows = driver.FindElementsByXpath("//td[@class='subscription_id']");
	String subscription = rows.get(rows.size() - 1).getText();

	driver.AssertStringNotEmpty(subscription);
	
	List&lt;WebElement> rows2 = driver.FindElementsByXpath("//td[@class='subscription_id']");
	String access_token = rows2.get(rows2.size() - 1).getText();	

	driver.AssertStringNotEmpty(access_token);	

} catch(Exception e) {
	testRunner.fail(driver.getErrorString())
}

//Close the browser
driver.quit();
</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Feature: OAuth EnergyOS" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="Feature: OAuth"><con:settings/><con:config><script>//******************************************************************************************************************
//******************************************************************************************************************
log.info("Feature: OAuth");
log.info("As Retail Customer, I should be able to see Data Custodian list");
//******************************************************************************************************************
//******************************************************************************************************************
</script></con:config></con:testStep><con:testStep type="groovy" name="Scenario: Retail Customer views Data Custodian list"><con:settings/><con:config><script>import org.openqa.selenium.*;

def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath
def BaseURL = project.getPropertyValue("BaseURL")
def DataCustodianContext = project.getPropertyValue("DataCustodianContext")
def ThirdPartyContext = project.getPropertyValue("ThirdPartyContext")
def ServiceEndpointDataCustodian = BaseURL + "/" + DataCustodianContext
def ServiceEndpointThirdParty = BaseURL + "/" + ThirdPartyContext;
def TestManager=project.getPropertyValue("TestManager")
def TestManagerPW=project.getPropertyValue("TestManagerPW")
def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")
def TestFile=projectPath + "/../data/" + project.getPropertyValue("TestFile")
def usagePointUUID1 = project.getPropertyValue("usagePointUUID1");
def usagePointDescription1 = project.getPropertyValue("usagePointDescription1");

Object driver = this.class.classLoader.parseClass(new File(projectPath + "/etc/BaseStepUtils.groovy")).GetObj(BaseURL,DataCustodianContext,ThirdPartyContext,log);

//driver._bLogActions = true;

try{
	
	//*********************************************************
	log.info("Scenario: Retail Customer views Data Custodian list");
	//*********************************************************
	// reset DB : run library groovy script
	testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['OpenEspiIntegrationTests'].testCases['Library'].testSteps['resetDB']);
	// Browser Init
	driver.Before();
		
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Given a Retail Customer with Usage Points");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.login(ServiceEndpointDataCustodian,TestManager,TestManagerPW);
	driver.assertUrlEndsWith("/" + DataCustodianContext + "/custodian/home");

	// upload usage point file
	driver.findElement(By.partialLinkText("Upload")).click();	
	driver.findElement(By.name("file")).sendKeys(TestFile);
		
	driver.findElement(By.name("upload")).click();	
	driver.assertDoesNotContain("Unable to process file");
	
	// add usage point linkage
	driver.findElement(By.partialLinkText("Customer List")).click();
	driver.findElement(By.partialLinkText(TestRetailCustomer)).click();	
	driver.findElement(By.partialLinkText("Add Usage")).click();	
	driver.findElement(By.id("UUID")).clear();
	driver.findElement(By.id("UUID")).sendKeys(usagePointUUID1);
	driver.findElement(By.name("create")).click();


	driver.logout(ServiceEndpointDataCustodian);
	
	driver.login(ServiceEndpointThirdParty,TestRetailCustomer,TestRetailCustomerPW);
		
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("When I navigate to Data Custodian list");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.findElement(By.partialLinkText("Data Custodians")).click();
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Then I should see a list of Data Custodians");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.assertContains("data_custodian");

} catch(Exception e) {
	testRunner.fail(driver.getErrorString())
}

//Close the browser
driver.quit();
</script></con:config></con:testStep><con:testStep type="groovy" name="Scenario: Retail Customer selects Data Custodian for the list"><con:settings/><con:config><script>import org.openqa.selenium.*;

def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath
def BaseURL = project.getPropertyValue("BaseURL")
def DataCustodianContext = project.getPropertyValue("DataCustodianContext")
def ThirdPartyContext = project.getPropertyValue("ThirdPartyContext")
def ServiceEndpointDataCustodian = BaseURL + "/" + DataCustodianContext
def ServiceEndpointThirdParty = BaseURL + "/" + ThirdPartyContext;
def TestManager=project.getPropertyValue("TestManager")
def TestManagerPW=project.getPropertyValue("TestManagerPW")
def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")
def TestFile=projectPath + "/../data/" + project.getPropertyValue("TestFile")
def usagePointUUID1 = project.getPropertyValue("usagePointUUID1");
def usagePointDescription1 = project.getPropertyValue("usagePointDescription1");

Object driver = this.class.classLoader.parseClass(new File(projectPath + "/etc/BaseStepUtils.groovy")).GetObj(BaseURL,DataCustodianContext,ThirdPartyContext,log);


//driver._bLogActions = true;

try{

	//*********************************************************
	log.info("Scenario: Retail Customer selects Data Custodian for the list");
	//*********************************************************
	// reset DB : run library groovy script
	testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['OpenEspiIntegrationTests'].testCases['Library'].testSteps['resetDB']);
	// Browser Init
	driver.Before();
		
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Given a Retail Customer with Usage Points");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.login(ServiceEndpointDataCustodian,TestManager,TestManagerPW);
	driver.assertUrlEndsWith("/" + DataCustodianContext + "/custodian/home");

	// upload usage point file
	driver.findElement(By.partialLinkText("Upload")).click();	
	driver.findElement(By.name("file")).sendKeys(TestFile);
		
	driver.findElement(By.name("upload")).click();	
	driver.assertDoesNotContain("Unable to process file");
	
	// add usage point linkage
	driver.findElement(By.partialLinkText("Customer List")).click();
	driver.findElement(By.partialLinkText(TestRetailCustomer)).click();	
	driver.findElement(By.partialLinkText("Add Usage")).click();	
	driver.findElement(By.id("UUID")).clear();
	driver.findElement(By.id("UUID")).sendKeys(usagePointUUID1);
	driver.findElement(By.name("create")).click();

	driver.logout(ServiceEndpointDataCustodian);
	
	driver.login(ServiceEndpointThirdParty,TestRetailCustomer,TestRetailCustomerPW);
		
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("When I select a Data Custodian from the list");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.findElement(By.partialLinkText("Data Custodians")).click();	
	driver.findElement(By.name("Data_custodian")).click();	
	driver.findElement(By.name("next")).click();
		
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Then I should see the Data Custodian login screen");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.assertUrlContains("/DataCustodian");
	driver.assertContains("Login");
        
} catch(Exception e) {
	testRunner.fail(driver.getErrorString())
}

//Close the browser
driver.quit();
</script></con:config></con:testStep><con:testStep type="groovy" name="Scenario: Retail Customer selects Scope"><con:settings/><con:config><script>import org.openqa.selenium.*;

def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath
def BaseURL = project.getPropertyValue("BaseURL")
def DataCustodianContext = project.getPropertyValue("DataCustodianContext")
def ThirdPartyContext = project.getPropertyValue("ThirdPartyContext")
def ServiceEndpointDataCustodian = BaseURL + "/" + DataCustodianContext
def ServiceEndpointThirdParty = BaseURL + "/" + ThirdPartyContext;
def TestManager=project.getPropertyValue("TestManager")
def TestManagerPW=project.getPropertyValue("TestManagerPW")
def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")
def TestFile=projectPath + "/../data/" + project.getPropertyValue("TestFile")
def usagePointUUID1 = project.getPropertyValue("usagePointUUID1");
def usagePointDescription1 = project.getPropertyValue("usagePointDescription1");

Object driver = this.class.classLoader.parseClass(new File(projectPath + "/etc/BaseStepUtils.groovy")).GetObj(BaseURL,DataCustodianContext,ThirdPartyContext,log);


//driver._bLogActions = true;

try{
	
	//*********************************************************
	log.info("Scenario: Retail Customer selects Scope");
	//*********************************************************
	// reset DB : run library groovy script
	testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['OpenEspiIntegrationTests'].testCases['Library'].testSteps['resetDB']);
	// Browser Init
	driver.Before();
		
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Given a Retail Customer with Usage Points");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.login(ServiceEndpointDataCustodian,TestManager,TestManagerPW);
	driver.assertUrlEndsWith("/" + DataCustodianContext + "/custodian/home");


	// upload usage point file
	driver.findElement(By.partialLinkText("Upload")).click();	
	driver.findElement(By.name("file")).sendKeys(TestFile);
		
	driver.findElement(By.name("upload")).click();	
	driver.assertDoesNotContain("Unable to process file");
		
	// add usage point linkage
	driver.findElement(By.partialLinkText("Customer List")).click();
	driver.findElement(By.partialLinkText(TestRetailCustomer)).click();	
	driver.findElement(By.partialLinkText("Add Usage")).click();	
	driver.findElement(By.id("UUID")).clear();
	driver.findElement(By.id("UUID")).sendKeys(usagePointUUID1);
	driver.findElement(By.name("create")).click();

	driver.logout(ServiceEndpointDataCustodian);
	
	driver.login(ServiceEndpointThirdParty,TestRetailCustomer,TestRetailCustomerPW);
		
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("When I select a Data Custodian from the list");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.findElement(By.partialLinkText("Data Custodians")).click();	
	driver.findElement(By.name("Data_custodian")).click();	
	driver.findElement(By.name("next")).click();
			
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Then I should see the Data Custodian login screen");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.assertUrlContains("/DataCustodian");
	driver.assertContains("Login");
		
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("When I log into Data Custodian");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.findElement(By.name("j_username")).clear();
	driver.findElement(By.name("j_username")).sendKeys(TestRetailCustomer);	
	driver.findElement(By.name("j_password")).clear();
	driver.findElement(By.name("j_password")).sendKeys(TestRetailCustomerPW);	
	driver.findElement(By.name("submit")).click();
		
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Then I should see Scope selection screen");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.assertContains("Select Scope");
	driver.assertContains("FB=4_5_15;IntervalDuration=3600;BlockDuration=monthly;HistoryLength=13");
	
} catch(Exception e) {
	testRunner.fail(driver.getErrorString())
}

//Close the browser
driver.quit();
</script></con:config></con:testStep><con:testStep type="groovy" name="Scenario: Retail Customer authorizes Third Party"><con:settings/><con:config><script>import org.openqa.selenium.*;

def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath
def BaseURL = project.getPropertyValue("BaseURL")
def DataCustodianContext = project.getPropertyValue("DataCustodianContext")
def ThirdPartyContext = project.getPropertyValue("ThirdPartyContext")
def ServiceEndpointDataCustodian = BaseURL + "/" + DataCustodianContext
def ServiceEndpointThirdParty = BaseURL + "/" + ThirdPartyContext;
def TestManager=project.getPropertyValue("TestManager")
def TestManagerPW=project.getPropertyValue("TestManagerPW")
def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")
def TestFile=projectPath + "/../data/" + project.getPropertyValue("TestFile")
def usagePointUUID1 = project.getPropertyValue("usagePointUUID1");
def usagePointDescription1 = project.getPropertyValue("usagePointDescription1");


Object driver = this.class.classLoader.parseClass(new File(projectPath + "/etc/BaseStepUtils.groovy")).GetObj(BaseURL,DataCustodianContext,ThirdPartyContext,log);


//driver._bLogActions = true;

try{
	
	//*********************************************************
	log.info("Scenario: Retail Customer authorizes Third Party");
	//*********************************************************
	// reset DB : run library groovy script
	testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['OpenEspiIntegrationTests'].testCases['Library'].testSteps['resetDB']);
	// Browser Init
	driver.Before();
		
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Given a Retail Customer with Usage Points");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.login(ServiceEndpointDataCustodian,TestManager,TestManagerPW);
	driver.assertUrlEndsWith("/" + DataCustodianContext + "/custodian/home");

	// upload usage point file
	driver.findElement(By.partialLinkText("Upload")).click();	
	driver.findElement(By.name("file")).sendKeys(TestFile);
		
	driver.findElement(By.name("upload")).click();	
	driver.assertDoesNotContain("Unable to process file");
	
	// add usage point linkage
	driver.findElement(By.partialLinkText("Customer List")).click();
	driver.findElement(By.partialLinkText(TestRetailCustomer)).click();	
	driver.findElement(By.partialLinkText("Add Usage")).click();	
	driver.findElement(By.id("UUID")).clear();
	driver.findElement(By.id("UUID")).sendKeys(usagePointUUID1);
	driver.findElement(By.name("create")).click();


	driver.logout(ServiceEndpointDataCustodian);
	
	driver.login(ServiceEndpointThirdParty,TestRetailCustomer,TestRetailCustomerPW);	
		
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("When I select a Data Custodian from the list");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.findElement(By.partialLinkText("Data Custodians")).click();
	driver.findElement(By.name("Data_custodian")).click();
	driver.findElement(By.name("next")).click();
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Then I should see the Data Custodian login screen");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.assertUrlContains("/DataCustodian");
	driver.assertContains("Login");
		
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("When I log into Data Custodian");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.findElement(By.name("j_username")).clear();
	driver.findElement(By.name("j_username")).sendKeys(TestRetailCustomer);	
	driver.findElement(By.name("j_password")).clear();
	driver.findElement(By.name("j_password")).sendKeys(TestRetailCustomerPW);	
	driver.findElement(By.name("submit")).click();
		
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Then I should see Scope selection screen");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.assertContains("Select Scope");
	driver.assertContains("FB=4_5_15;IntervalDuration=3600;BlockDuration=monthly;HistoryLength=13");
		
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("When I select Scopes");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.findElement(By.className("scope")).click();	
	driver.findElement(By.xpath("(//input[@name='scope'])[2]")).click();	
	driver.findElement(By.name("next")).click();	
		
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Then I should see authorization screen");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.assertContains("Please Confirm");
		
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("When I authorize Third Party");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//driver.findElement(By.name("authorize")).click();
	driver.findElement(By.name("scope.FB=4_5_15;IntervalDuration=3600;BlockDuration=monthly;HistoryLength=13")).click();
	driver.findElement(By.name("authorize")).click();
			
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Then I should see all my authorizations");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.assertContains("Authorizations");
	driver.assertContains("data_custodian");
	driver.assertContains("DataCustodian/espi/1_1/resource/Batch/Subscription/1");
	
} catch(Exception e) {
	testRunner.fail(driver.getErrorString())
}

//Close the browser
driver.quit();
</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DeleteAuthorization" searchProperties="true" id="75fbfd18-5abd-4e69-bc55-e0df6f62853f"><con:settings/><con:testStep type="groovy" name="CreateAuthorization"><con:settings/><con:config><script>import org.openqa.selenium.*;

import org.xml.sax.SAXException;
import org.w3c.dom.*;
import javax.xml.parsers.*;
import javax.xml.xpath.*;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import javax.xml.namespace.NamespaceContext;


public class SimpleNamespaceContext implements NamespaceContext {

    private final Map&lt;String, String> PREF_MAP = new HashMap&lt;String, String>();

    public SimpleNamespaceContext(final Map&lt;String, String> prefMap) {
        PREF_MAP.putAll(prefMap);       
    }

    public String getNamespaceURI(String prefix) {
        return PREF_MAP.get(prefix);
    }

    public String getPrefix(String uri) {
        throw new UnsupportedOperationException();
    }

    public Iterator getPrefixes(String uri) {
        throw new UnsupportedOperationException();
    }

}

public boolean ServiceTest(String strTestType,boolean bShouldPass,String strFileName,String strResource,String strOutputFile)
{
	tc = testRunner.testCase.testSuite.project.testSuites["OpenEspiIntegrationTests"].testCases["Library"]
	tc.setPropertyValue("resourceTestFileName", strFileName)
	tc.setPropertyValue("testType", strTestType)
	tc.setPropertyValue("resourceOutputFileName", strOutputFile)
	tc.setPropertyValue("resource", strResource)
	
	if(bShouldPass) {
		tc.setPropertyValue("testShouldPass", "TRUE")
	}
	else {
		tc.setPropertyValue("testShouldPass", "FALSE")
	}
	
	testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['OpenEspiIntegrationTests'].testCases['Library'].testSteps['resourceTests']);

	String strResult = tc.getPropertyValue("testFailed");	

	boolean bResult = false;
	
	if(strResult.equals("TRUE")) {
		bResult = true;
	}

	return bResult;
}




def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath
def BaseURL = project.getPropertyValue("BaseURL")
def DataCustodianContext = project.getPropertyValue("DataCustodianContext")
def ThirdPartyContext = project.getPropertyValue("ThirdPartyContext")
def ServiceEndpointDataCustodian = BaseURL + "/" + DataCustodianContext
def ServiceEndpointThirdParty = BaseURL + "/" + ThirdPartyContext;
def TestManager=project.getPropertyValue("TestManager")
def TestManagerPW=project.getPropertyValue("TestManagerPW")
def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")
def TestFile=projectPath + "/../data/" + project.getPropertyValue("TestFile")
def usagePointUUID1 = project.getPropertyValue("usagePointUUID1");
def usagePointDescription1 = project.getPropertyValue("usagePointDescription1");


	DocumentBuilderFactory domFactory = DocumentBuilderFactory.newInstance();
	domFactory.setNamespaceAware(true); 
	DocumentBuilder builder = domFactory.newDocumentBuilder();

	XPath xpath = XPathFactory.newInstance().newXPath();
	
	// add namespaces
	HashMap&lt;String, String> prefMap = new HashMap&lt;String, String>() {{
	    put("espi", "http://naesb.org/espi");
	    put("ns3", "http://www.w3.org/2005/Atom");
	}};
	
	SimpleNamespaceContext namespaces = new SimpleNamespaceContext(prefMap);
	
	xpath.setNamespaceContext(namespaces);

Object driver = this.class.classLoader.parseClass(new File(projectPath + "/etc/BaseStepUtils.groovy")).GetObj(BaseURL,DataCustodianContext,ThirdPartyContext,log);


//driver._bLogActions = true;
//driver._iSleepBetweenStepsMs = 2000;

try{
	//*********************************************************
	log.info("Scenario: Third Party accesses Subscription");
	//*********************************************************
	// reset DB : run library groovy script
	//testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['OpenEspiIntegrationTests'].testCases['Library'].testSteps['resetDB']);
	// Browser Init
	driver.Before();

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Given a Retail Customer with Usage Points");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.login(ServiceEndpointDataCustodian,TestManager,TestManagerPW);
	driver.assertUrlEndsWith("/" + DataCustodianContext + "/custodian/home");


	// upload usage point file
	driver.findElement(By.partialLinkText("Upload")).click();	
	driver.findElement(By.name("file")).sendKeys(TestFile);
		
	driver.findElement(By.name("upload")).click();	
	driver.assertDoesNotContain("Unable to process file");

		
	// add usage point linkage
	driver.findElement(By.partialLinkText("Customer List")).click();
	driver.findElement(By.partialLinkText(TestRetailCustomer)).click();	
	driver.findElement(By.partialLinkText("Add Usage")).click();	
	driver.findElement(By.id("UUID")).clear();
	driver.findElement(By.id("UUID")).sendKeys(usagePointUUID1);
	driver.findElement(By.name("create")).click();


	driver.logout(ServiceEndpointDataCustodian);
	
	driver.login(ServiceEndpointThirdParty,TestRetailCustomer,TestRetailCustomerPW);

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Given an authorized Third Party");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//driver.login(ServiceEndpointThirdParty,TestRetailCustomer,TestRetailCustomerPW);
	driver.findElement(By.partialLinkText("Data Custodians")).click();	
	driver.findElement(By.name("Data_custodian")).click();	
	driver.findElement(By.name("next")).click();
	
	driver.submitLoginForm(TestRetailCustomer,TestRetailCustomerPW);
	
	driver.findElement(By.name("scope")).click();	
	driver.findElement(By.name("next")).click();	

	driver.findElement(By.name("scope.FB=4_5_15;IntervalDuration=900;BlockDuration=monthly;HistoryLength=13")).click();
	driver.findElement(By.name("authorize")).click();

	// logout of Third Party	
	driver.logout(ServiceEndpointThirdParty);

	// logout of DataCustodian	
	driver.logout(ServiceEndpointDataCustodian);
	
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//driver.logStep("And I log in as Alan Turing into Data Custodian");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//driver.login(driver.DATA_CUSTODIAN_CONTEXT, "alan", "koala");
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("When I log in as Alan Turing");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.login(ServiceEndpointDataCustodian,TestRetailCustomer,TestRetailCustomerPW);
	//driver.login(ServiceEndpointThirdParty,TestRetailCustomer,TestRetailCustomerPW);
	//driver.assertContains("Welcome");
	 
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("And I request a Subscription using the REST API");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.findElement(By.partialLinkText("Authorizations")).click();
	//Revoke Authorization
	driver.findElement(By.id("revoke")).click();
	//wait for revoke to occur and page to reload
	sleep(3000)
	//Check to make sure that authorization has been removed
	driver.assertDoesNotContain("Third Party (localhost)");

	} catch(Exception e) {
	testRunner.fail(driver.getErrorString())
}
	//close driver
	driver.quit()</script></con:config></con:testStep><con:testStep type="groovy" name="DeleteAuthorization"><con:settings/><con:config><script>import org.openqa.selenium.*;

import org.openqa.selenium.WebDriver
import org.openqa.selenium.WebElement
import org.openqa.selenium.firefox.FirefoxDriver
import org.openqa.selenium.support.ui.ExpectedCondition
import org.openqa.selenium.support.ui.WebDriverWait
import java.util.concurrent.TimeUnit;
import org.xml.sax.SAXException;
import org.w3c.dom.*;
import javax.xml.parsers.*;
import javax.xml.xpath.*;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import javax.xml.namespace.NamespaceContext;


public class SimpleNamespaceContext implements NamespaceContext {

    private final Map&lt;String, String> PREF_MAP = new HashMap&lt;String, String>();

    public SimpleNamespaceContext(final Map&lt;String, String> prefMap) {
        PREF_MAP.putAll(prefMap);       
    }

    public String getNamespaceURI(String prefix) {
        return PREF_MAP.get(prefix);
    }

    public String getPrefix(String uri) {
        throw new UnsupportedOperationException();
    }

    public Iterator getPrefixes(String uri) {
        throw new UnsupportedOperationException();
    }

}

public boolean ServiceTest(String strTestType,boolean bShouldPass,String strFileName,String strResource,String strOutputFile)
{
	tc = testRunner.testCase.testSuite.project.testSuites["OpenEspiIntegrationTests"].testCases["Library"]
	tc.setPropertyValue("resourceTestFileName", strFileName)
	tc.setPropertyValue("testType", strTestType)
	tc.setPropertyValue("resourceOutputFileName", strOutputFile)
	tc.setPropertyValue("resource", strResource)
	
	if(bShouldPass) {
		tc.setPropertyValue("testShouldPass", "TRUE")
	}
	else {
		tc.setPropertyValue("testShouldPass", "FALSE")
	}
	
	testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['OpenEspiIntegrationTests'].testCases['Library'].testSteps['resourceTests']);

	String strResult = tc.getPropertyValue("testFailed");	

	boolean bResult = false;
	
	if(strResult.equals("TRUE")) {
		bResult = true;
	}

	return bResult;
}




def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath
def BaseURL = project.getPropertyValue("BaseURL")
def DataCustodianContext = project.getPropertyValue("DataCustodianContext")
def ThirdPartyContext = project.getPropertyValue("ThirdPartyContext")
def ServiceEndpoint=BaseURL+"/DataCustodian"
def ServiceEndpointDataCustodian = BaseURL + "/" + DataCustodianContext
def ServiceEndpointThirdParty = BaseURL + "/" + ThirdPartyContext;
def TestManager=project.getPropertyValue("TestManager")
def TestManagerPW=project.getPropertyValue("TestManagerPW")
def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")
def TestFile=projectPath + "/../data/" + project.getPropertyValue("TestFile")
def usagePointUUID1 = project.getPropertyValue("usagePointUUID1");
def usagePointDescription1 = project.getPropertyValue("usagePointDescription1");


	DocumentBuilderFactory domFactory = DocumentBuilderFactory.newInstance();
	domFactory.setNamespaceAware(true); 
	DocumentBuilder builder = domFactory.newDocumentBuilder();

	XPath xpath = XPathFactory.newInstance().newXPath();
	
	// add namespaces
	HashMap&lt;String, String> prefMap = new HashMap&lt;String, String>() {{
	    put("espi", "http://naesb.org/espi");
	    put("ns3", "http://www.w3.org/2005/Atom");
	}};
	
	SimpleNamespaceContext namespaces = new SimpleNamespaceContext(prefMap);
	
	xpath.setNamespaceContext(namespaces);

Object driver = this.class.classLoader.parseClass(new File(projectPath + "/etc/BaseStepUtils.groovy")).GetObj(BaseURL,DataCustodianContext,ThirdPartyContext,log);
 //WebDriver driver = new FirefoxDriver()

 //driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
 // Open the DataCustodian Page 
// driver.get(ServiceEndpoint)

//driver._bLogActions = true;
//driver._iSleepBetweenStepsMs = 2000;

try{
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("When I log in as Alan Turing");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//driver.login(ServiceEndpointDataCustodian,TestRetailCustomer,TestRetailCustomerPW);
	driver.Before();
	driver.findElement(By.id("login")).click();
	driver.findElement(By.name("j_username")).clear()
	driver.findElement(By.name("j_username")).sendKeys(TestRetailCustomer)
	driver.findElement(By.name("j_password")).clear()
	driver.findElement(By.name("j_password")).sendKeys(TestRetailCustomerPW)
	driver.findElement(By.name("submit")).click()
	//driver.assertContains("Welcome");
	 
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("And I request a Subscription using the REST API");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.findElement(By.partialpartialLinkText("Authorizations")).click();
	//Revoke Authorization
	driver.findElement(By.id("revoke")).click();
	//wait for revoke to occur and page to reload
	sleep(3000)
	//Check to make sure that authorization has been removed
	driver.assertDoesNotContain("Third Party (localhost)");

	} catch(Exception e) {
	testRunner.fail(driver.getErrorString())
}
	//close driver
	driver.quit()</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="ShowMeterReadingTP Server" searchProperties="true"><con:settings/><con:testStep type="groovy" name="ShowMeterReadingTP"><con:settings/><con:config><script>///////////////////////////////////////////////////////// 
// Note: Generated by capture using Selenium in FF.
// Export to Java / JUnit 4 / WebDriver // Copy and paste into Groovy Script with minor tweaks
/////////////////////////////////////////////////////////
///////////////////////////////////////////////////////// 
// Need these imports to run tests
/////////////////////////////////////////////////////////
import org.openqa.selenium.By
import org.openqa.selenium.WebDriver
import org.openqa.selenium.WebElement
import org.openqa.selenium.firefox.FirefoxDriver
import org.openqa.selenium.support.ui.ExpectedCondition
import org.openqa.selenium.support.ui.WebDriverWait
import java.util.concurrent.TimeUnit;
import java.util.regex.Pattern;
import java.util.concurrent.TimeUnit;
import org.junit.*;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.*;
///////////////////////////////////////////////////////// 
// get variables from the project Custom Properties
/////////////////////////////////////////////////////////
def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
//def BaseURL = project.getPropertyValue("BaseURL")
def BaseURL = "https://apps.londonhydro.com"
def ServiceEndpoint=BaseURL+"/ThirdParty"
def TestManager=project.getPropertyValue("TestManager")
def TestManagerPW=project.getPropertyValue("TestManagerPW")
def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")
def TestFile=project.getPropertyValue("TestFile")
def projectPath = groovyUtils.projectPath
log.info("We are talking to: " + ServiceEndpoint) 
log.info("Test File Path: "+ TestFile)

 ///////////////////////////////////////////////////////// 
 // Create a new instance of the Firefox driver
 ///////////////////////////////////////////////////////// 
 WebDriver driver = new FirefoxDriver()

 driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
 // Open the DataCustodian Page 
 driver.get(ServiceEndpoint)

 ///////////////////////////////////////////////////////// 
 // Log in as Manager
 /////////////////////////////////////////////////////////
driver.findElement(By.id("login")).click();
driver.findElement(By.name("j_username")).clear()
driver.findElement(By.name("j_username")).sendKeys(TestRetailCustomer)
driver.findElement(By.name("j_password")).clear()
driver.findElement(By.name("j_password")).sendKeys(TestRetailCustomerPW)
driver.findElement(By.name("submit")).click()
driver.findElement(By.partialLinkText("Usage Points")).click()
driver.findElement(By.partialLinkText("GB Sample Dataset 1")).click()
driver.findElement(By.partialLinkText("Hourly Electricity Consumption")).click()
driver.findElementByTagName("h2")
//driver.assertContains("Meter Reading: Fifteen Minute Electricity Consumption")

//log.info("Scenario: Third Party accesses Subscription");

driver.findElement(By.id("logout")).click();
driver.quit() 
</script></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:properties><con:property><con:name>BaseURL</con:name><con:value>http://localhost:8080</con:value></con:property><con:property><con:name>ServiceEndpoint</con:name><con:value>${#Project#BaseURL}/DataCustodian</con:value></con:property><con:property><con:name>DataCustodianContext</con:name><con:value>DataCustodian</con:value></con:property><con:property><con:name>ThirdPartyContext</con:name><con:value>ThirdParty</con:value></con:property><con:property><con:name>linkPrefixForReplace</con:name><con:value>http://localhost:8080/DataCustodian/</con:value></con:property><con:property><con:name>mysqlCmd</con:name><con:value>/usr/local/mysql/bin/mysql</con:value></con:property><con:property><con:name>TestManager</con:name><con:value>grace</con:value></con:property><con:property><con:name>TestManagerPW</con:name><con:value>koala</con:value></con:property><con:property><con:name>TestRetailCustomer</con:name><con:value>alan</con:value></con:property><con:property><con:name>TestRetailCustomerPW</con:name><con:value>koala</con:value></con:property><con:property><con:name>retailCustomerId</con:name><con:value>1</con:value></con:property><con:property><con:name>usagePointId</con:name><con:value>1</con:value></con:property><con:property><con:name>resourceId</con:name><con:value>01</con:value></con:property><con:property><con:name>meterReadingId</con:name><con:value>1</con:value></con:property><con:property><con:name>readingTypeId</con:name><con:value>1</con:value></con:property><con:property><con:name>intervalBlockId</con:name><con:value>1</con:value></con:property><con:property><con:name>electricPowerQualitySummaryId</con:name><con:value>1</con:value></con:property><con:property><con:name>TestFile</con:name><con:value>test_usage_data.xml</con:value></con:property><con:property><con:name>usagePointUUID1</con:name><con:value>48C2A019-5598-4E16-B0F9-49E4FF27F5FB</con:value></con:property><con:property><con:name>usagePointDescription1</con:name><con:value>test_usage_data</con:value></con:property><con:property><con:name>TestFile2</con:name><con:value>Gas.xml</con:value></con:property><con:property><con:name>usagePointUUID2</con:name><con:value>642EABA-8E42-4D1A-A375-AF54993C007B</con:value></con:property><con:property><con:name>usagePointDescription2</con:name><con:value>Gas</con:value></con:property><con:property><con:name>DBprepopulateScriptName</con:name><con:value>prepopulatesql_localhost8080.sql</con:value></con:property><con:property><con:name>electricPowerUsageSummaryId</con:name><con:value>1</con:value></con:property><con:property><con:name>subscriptionId</con:name><con:value>1</con:value></con:property><con:property><con:name>applicationInformationId</con:name><con:value>1</con:value></con:property><con:property><con:name>authorizationId</con:name><con:value>1</con:value></con:property><con:property><con:name>bulkId</con:name><con:value>1</con:value></con:property><con:property><con:name>localTimeParametersId</con:name><con:value>1</con:value></con:property></con:properties><con:wssContainer/><con:sensitiveInformation/></con:soapui-project>